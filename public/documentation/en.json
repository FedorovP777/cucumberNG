[{"directive":"zone","defaultValue":"—","syntax":"zone name [size];","context":"upstream","description":"Defines the name and size of the sharedmemory zone that keeps the group’s configuration and run-time state that areshared between worker processes.Several groups may share the same zone.In this case, it is enough to specify the zone size only once.Additionally,as part of our <a href=\"http://nginx.com/products/\">commercial subscription,such groups allow changing the group membershipor modifying the settings of a particular serverwithout the need of restarting nginx.The configuration is accessible via a special locationhandled by<a href=\"../http/ngx_http_upstream_conf_module.html#upstream_conf\">upstream_conf."},{"directive":"zone","defaultValue":"—","syntax":"zone name [size];","context":"upstream","description":"This directive appeared in version 1.9.0.            Defines the name and size of the sharedmemory zone that keeps the group’s configuration and run-time state that areshared between worker processes.Several groups may share the same zone.In this case, it is enough to specify the size only once.Additionally,as part of our <a href=\"http://nginx.com/products/\">commercial subscription,such groups allow changing the group membershipor modifying the settings of a particular serverwithout the need of restarting nginx.The configuration is accessible via a special locationhandled by<a href=\"ngx_http_upstream_conf_module.html#upstream_conf\">upstream_conf."},{"directive":"xslt_types","defaultValue":"","syntax":"","context":"","description":""},{"directive":"xslt_stylesheet","defaultValue":"—","syntax":"xslt_stylesheet     stylesheet    [parameter=value ...];","context":"location","description":"Defines the XSLT stylesheet and its optional parameters.A stylesheet is compiled at the configuration stage.Parameters can either be specified separately, or grouped in asingle line using the “:” delimiter.If a parameter includes the “:” character,it should be escaped as “%3A”.Also, libxslt requires to enclose parametersthat contain non-alphanumeric characters into single or double quotes,for example: param1='http%3A//www.example.com':param2=value2 The parameters description can contain variables, for example,the whole line of parameters can be taken from a single variable: location / {    xslt_stylesheet /site/xslt/one.xslt                    $arg_xslt_params                    param1='$value1':param2=value2                    param3=value3;} It is possible to specify several stylesheets.They will be applied sequentially in the specified order."},{"directive":"xslt_string_param","defaultValue":"—","syntax":"xslt_string_param parameter value;","context":"http, server, location","description":"This directive appeared in version 1.1.18.            Defines the string parameters for XSLT stylesheets.XPath expressions in the value are not interpreted.The value can contain variables.There could be several xslt_string_param directives.These directives are inherited from the previous level if andonly if there are noxslt_param and xslt_string_paramdirectives defined on the current level."},{"directive":"xslt_param","defaultValue":"—","syntax":"xslt_param parameter value;","context":"http, server, location","description":"This directive appeared in version 1.1.18.            Defines the parameters for XSLT stylesheets.The value is treated as an XPath expression.The value can contain variables.To pass a string value to a stylesheet,the xslt_string_param directive can be used.There could be several xslt_param directives.These directives are inherited from the previous level if andonly if there are noxslt_param and xslt_string_paramdirectives defined on the current level."},{"directive":"xslt_last_modified","defaultValue":"xslt_last_modified off;","syntax":"xslt_last_modified on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.1.            Allows preserving the “Last-Modified” header fieldfrom the original response during XSLT transformationsto facilitate response caching.By default, the header field is removed as contents of the responseare modified during transformations and may contain dynamically generatedelements or parts that are changed independently of the original response."},{"directive":"xml_entities","defaultValue":"—","syntax":"xml_entities path;","context":"http, server, location","description":"Specifies the DTD file that declares character entities.This file is compiled at the configuration stage.For technical reasons, the module is unable to use theexternal subset declared in the processed XML, so it isignored and a specially defined file is used instead.This file should not describe the XML structure.It is enough to declare just the required character entities, for example: &lt;!ENTITY nbsp \"&amp;#xa0;\"&gt;"},{"directive":"xclient","defaultValue":"","syntax":"","context":"","description":""},{"directive":"working_directory","defaultValue":"","syntax":"","context":"","description":""},{"directive":"worker_shutdown_timeout","defaultValue":"—","syntax":"worker_shutdown_timeout time;","context":"main","description":"This directive appeared in version 1.11.11.            Configures a timeout for a graceful shutdown of worker processes.When the time expires,nginx will try to close all the connections currently opento facilitate shutdown."},{"directive":"worker_rlimit_nofile","defaultValue":"—","syntax":"worker_rlimit_nofile number;","context":"main","description":"Changes the limit on the maximum number of open files(RLIMIT_NOFILE) for worker processes.Used to increase the limit without restarting the main process."},{"directive":"worker_rlimit_core","defaultValue":"—","syntax":"worker_rlimit_core size;","context":"main","description":"Changes the limit on the largest size of a core file(RLIMIT_CORE) for worker processes.Used to increase the limit without restarting the main process."},{"directive":"worker_processes","defaultValue":"worker_processes 1;","syntax":"worker_processes number | auto;","context":"main","description":"Defines the number of worker processes.The optimal value depends on many factors including (but notlimited to) the number of CPU cores, the number of hard diskdrives that store data, and load pattern.When one is in doubt, setting it to the number of available CPU coreswould be a good start (the value “auto”will try to autodetect it). The auto parameter is supported starting fromversions 1.3.8 and 1.2.5."},{"directive":"worker_priority","defaultValue":"worker_priority 0;","syntax":"worker_priority number;","context":"main","description":"Defines the scheduling priority for worker processes like it isdone by the nice command: a negativenumbermeans higher priority.Allowed range normally varies from -20 to 20.Example: worker_priority -10;"},{"directive":"worker_cpu_affinity","defaultValue":"—","syntax":"worker_cpu_affinity cpumask ...;worker_cpu_affinity auto [cpumask];","context":"main","description":"Binds worker processes to the sets of CPUs.Each CPU set is represented by a bitmask of allowed CPUs.There should be a separate set defined for each of the worker processes.By default, worker processes are not bound to any specific CPUs.For example, worker_processes    4;worker_cpu_affinity 0001 0010 0100 1000; binds each worker process to a separate CPU, while worker_processes    2;worker_cpu_affinity 0101 1010; binds the first worker process to CPU0/CPU2,and the second worker process to CPU1/CPU3.The second example is suitable for hyper-threading.The special value auto (1.9.10) allowsbinding worker processes automatically to available CPUs: worker_processes auto;worker_cpu_affinity auto; The optional mask parameter can be used to limit the CPUsavailable for automatic binding: worker_cpu_affinity auto 01010101;  The directive is only available on FreeBSD and Linux."},{"directive":"worker_connections","defaultValue":"worker_connections 512;","syntax":"worker_connections number;","context":"events","description":"Sets the maximum number of simultaneous connections thatcan be opened by a worker process.It should be kept in mind that this number includes all connections(e.g. connections with proxied servers, among others),not only connections with clients.Another consideration is that the actual number of simultaneousconnections cannot exceed the current limit onthe maximum number of open files, which can be changed byworker_rlimit_nofile."},{"directive":"worker_aio_requests","defaultValue":"worker_aio_requests 32;","syntax":"worker_aio_requests number;","context":"events","description":"This directive appeared in versions 1.1.4 and 1.0.7.                                                                When using <a href=\"http/ngx_http_core_module.html#aio\">aiowith the <a href=\"../docs/events.html#epoll\">epollconnection processing method, sets the maximum number ofoutstanding asynchronous I/O operationsfor a single worker process."},{"directive":"variables_hash_max_size","defaultValue":"variables_hash_max_size 1024;","syntax":"variables_hash_max_size size;","context":"stream","description":"This directive appeared in version 1.11.2.            Sets the maximum size of the variables hash table.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"variables_hash_max_size","defaultValue":"variables_hash_max_size 1024;","syntax":"variables_hash_max_size size;","context":"http","description":"Sets the maximum size of the variables hash table.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document. Prior to version 1.5.13, the default value was 512."},{"directive":"variables_hash_bucket_size","defaultValue":"variables_hash_bucket_size 64;","syntax":"variables_hash_bucket_size size;","context":"stream","description":"This directive appeared in version 1.11.2.            Sets the bucket size for the variables hash table.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"variables_hash_bucket_size","defaultValue":"variables_hash_bucket_size 64;","syntax":"variables_hash_bucket_size size;","context":"http","description":"Sets the bucket size for the variables hash table.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"valid_referers","defaultValue":"—","syntax":"valid_referers     none |    blocked |    server_names |    string    ...;","context":"server, location","description":"Specifies the “Referer” request header field valuesthat will cause the embedded $invalid_referer variable tobe set to an empty string.Otherwise, the variable will be set to “1”.Search for a match is case-insensitive.Parameters can be as follows: nonethe “Referer” field is missing in the request header;blockedthe “Referer” field is present in the request header,but its value has been deleted by a firewall or proxy server;such values are strings that do not start with“http://” or “https://”;server_namesthe “Referer” request header field containsone of the server names;arbitrary stringdefines a server name and an optional URI prefix.A server name can have an “*” at the beginning or end.During the checking, the server’s port in the “Referer” fieldis ignored;regular expressionthe first symbol should be a “~”.It should be noted that an expression will be matched againstthe text starting after the “http://”or “https://”. Example: valid_referers none blocked server_names               *.example.com example.* www.example.org/galleries/               ~\\.google\\.;"},{"directive":"uwsgi_temp_path","defaultValue":"","syntax":"","context":"","description":""},{"directive":"uwsgi_temp_file_write_size","defaultValue":"uwsgi_temp_file_write_size 8k|16k;","syntax":"uwsgi_temp_file_write_size size;","context":"http, server, location","description":"Limits the size of data written to a temporary fileat a time, when buffering of responses from the uwsgi serverto temporary files is enabled.By default, size is limited by two buffers set by theuwsgi_buffer_size and uwsgi_buffers directives.The maximum size of a temporary file is set by theuwsgi_max_temp_file_size directive."},{"directive":"uwsgi_store_access","defaultValue":"uwsgi_store_access user:rw;","syntax":"uwsgi_store_access users:permissions ...;","context":"http, server, location","description":"Sets access permissions for newly created files and directories, e.g.: uwsgi_store_access user:rw group:rw all:r; If any group or all access permissionsare specified then user permissions may be omitted: uwsgi_store_access group:rw all:r;"},{"directive":"uwsgi_store","defaultValue":"uwsgi_store off;","syntax":"uwsgi_store     on |    off |    string;","context":"http, server, location","description":"Enables saving of files to a disk.The on parameter saves files with pathscorresponding to the directives<a href=\"ngx_http_core_module.html#alias\">alias or<a href=\"ngx_http_core_module.html#root\">root.The off parameter disables saving of files.In addition, the file name can be set explicitly using thestring with variables: uwsgi_store /data/www$original_uri; The modification time of files is set according to the received“Last-Modified” response header field.The response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the persistent storecan be put on different file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both saved files and adirectory holding temporary files, set by the uwsgi_temp_pathdirective, are put on the same file system.This directive can be used to create local copies of static unchangeablefiles, e.g.: location /images/ {    root               /data/www;    error_page         404 = /fetch$uri;}location /fetch/ {    internal;    uwsgi_pass         backend:9000;    ...    uwsgi_store        on;    uwsgi_store_access user:rw group:rw all:r;    uwsgi_temp_path    /data/temp;    alias              /data/www/;}"},{"directive":"uwsgi_ssl_verify_depth","defaultValue":"uwsgi_ssl_verify_depth 1;","syntax":"uwsgi_ssl_verify_depth number;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Sets the verification depth in the secured uwsgi server certificates chain."},{"directive":"uwsgi_ssl_verify","defaultValue":"uwsgi_ssl_verify off;","syntax":"uwsgi_ssl_verify on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Enables or disables verification of the secured uwsgi server certificate."},{"directive":"uwsgi_ssl_trusted_certificate","defaultValue":"—","syntax":"uwsgi_ssl_trusted_certificate file;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Specifies a file with trusted CA certificates in the PEM formatused to verifythe certificate of the secured uwsgi server."},{"directive":"uwsgi_ssl_session_reuse","defaultValue":"uwsgi_ssl_session_reuse on;","syntax":"uwsgi_ssl_session_reuse on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.8.            Determines whether SSL sessions can be reused when working witha secured uwsgi server.If the errors“SSL3_GET_FINISHED:digest check failed”appear in the logs, try disabling session reuse."},{"directive":"uwsgi_ssl_server_name","defaultValue":"uwsgi_ssl_server_name off;","syntax":"uwsgi_ssl_server_name on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Enables or disables passing of the server name through<a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">TLSServer Name Indication extension (SNI, RFC 6066)when establishing a connection with the secured uwsgi server."},{"directive":"uwsgi_ssl_protocols","defaultValue":"uwsgi_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;","syntax":"uwsgi_ssl_protocols     [SSLv2]    [SSLv3]    [TLSv1]    [TLSv1.1]    [TLSv1.2]    [TLSv1.3];","context":"http, server, location","description":"This directive appeared in version 1.5.8.            Enables the specified protocols for requests to a secured uwsgi server."},{"directive":"uwsgi_ssl_password_file","defaultValue":"—","syntax":"uwsgi_ssl_password_file file;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            Specifies a file with passphrases forsecret keyswhere each passphrase is specified on a separate line.Passphrases are tried in turn when loading the key."},{"directive":"uwsgi_ssl_name","defaultValue":"uwsgi_ssl_name host from uwsgi_pass;","syntax":"uwsgi_ssl_name name;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Allows overriding the server name used toverifythe certificate of the secured uwsgi server and to bepassed through SNIwhen establishing a connection with the secured uwsgi server.By default, the host part from uwsgi_pass is used."},{"directive":"uwsgi_ssl_crl","defaultValue":"—","syntax":"uwsgi_ssl_crl file;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Specifies a file with revoked certificates (CRL)in the PEM format used to verifythe certificate of the secured uwsgi server."},{"directive":"uwsgi_ssl_ciphers","defaultValue":"uwsgi_ssl_ciphers DEFAULT;","syntax":"uwsgi_ssl_ciphers ciphers;","context":"http, server, location","description":"This directive appeared in version 1.5.8.            Specifies the enabled ciphers for requests to a secured uwsgi server.The ciphers are specified in the format understood by the OpenSSL library.The full list can be viewed using the“openssl ciphers” command."},{"directive":"uwsgi_ssl_certificate_key","defaultValue":"—","syntax":"uwsgi_ssl_certificate_key file;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            Specifies a file with the secret key in the PEM formatused for authentication to a secured uwsgi server.The valueengine:name:idcan be specified instead of the file (1.7.9),which loads a secret key with a specified idfrom the OpenSSL engine name."},{"directive":"uwsgi_ssl_certificate","defaultValue":"—","syntax":"uwsgi_ssl_certificate file;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            Specifies a file with the certificate in the PEM formatused for authentication to a secured uwsgi server."},{"directive":"uwsgi_send_timeout","defaultValue":"uwsgi_send_timeout 60s;","syntax":"uwsgi_send_timeout time;","context":"http, server, location","description":"Sets a timeout for transmitting a request to the uwsgi server.The timeout is set only between two successive write operations,not for the transmission of the whole request.If the uwsgi server does not receive anything within this time,the connection is closed."},{"directive":"uwsgi_request_buffering","defaultValue":"uwsgi_request_buffering on;","syntax":"uwsgi_request_buffering on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.11.            Enables or disables buffering of a client request body.When buffering is enabled, the entire request body is<a href=\"ngx_http_core_module.html#client_body_buffer_size\">readfrom the client before sending the request to a uwsgi server.When buffering is disabled, the request body is sent to the uwsgi serverimmediately as it is received.In this case, the request cannot be passed to thenext serverif nginx already started sending the request body.When HTTP/1.1 chunked transfer encoding is usedto send the original request body,the request body will be buffered regardless of the directive value."},{"directive":"uwsgi_read_timeout","defaultValue":"uwsgi_read_timeout 60s;","syntax":"uwsgi_read_timeout time;","context":"http, server, location","description":"Defines a timeout for reading a response from the uwsgi server.The timeout is set only between two successive read operations,not for the transmission of the whole response.If the uwsgi server does not transmit anything within this time,the connection is closed."},{"directive":"uwsgi_pass_request_headers","defaultValue":"uwsgi_pass_request_headers on;","syntax":"uwsgi_pass_request_headers on | off;","context":"http, server, location","description":"Indicates whether the header fields of the original request are passedto the uwsgi server.See also the uwsgi_pass_request_body directive."},{"directive":"uwsgi_pass_request_body","defaultValue":"uwsgi_pass_request_body on;","syntax":"uwsgi_pass_request_body on | off;","context":"http, server, location","description":"Indicates whether the original request body is passedto the uwsgi server.See also the uwsgi_pass_request_headers directive."},{"directive":"uwsgi_pass_header","defaultValue":"—","syntax":"uwsgi_pass_header field;","context":"http, server, location","description":"Permits passing otherwise disabled headerfields from a uwsgi server to a client."},{"directive":"uwsgi_pass","defaultValue":"—","syntax":"uwsgi_pass [protocol://]address;","context":"location, if in location","description":"Sets the protocol and address of a uwsgi server.As a protocol,“uwsgi” or “suwsgi”(secured uwsgi, uwsgi over SSL) can be specified.The address can be specified as a domain name or IP address,and a port: uwsgi_pass localhost:9000;uwsgi_pass uwsgi://localhost:9000;uwsgi_pass suwsgi://[2001:db8::1]:9090; or as a UNIX-domain socket path: uwsgi_pass unix:/tmp/uwsgi.socket; If a domain name resolves to several addresses, all of them will beused in a round-robin fashion.In addition, an address can be specified as a<a href=\"ngx_http_upstream_module.html\">server group.Parameter value can contain variables.In this case, if an address is specified as a domain name,the name is searched among the described<a href=\"ngx_http_upstream_module.html\">server groups,and, if not found, is determined using a<a href=\"ngx_http_core_module.html#resolver\">resolver. Secured uwsgi protocol is supported since version 1.5.8."},{"directive":"uwsgi_param","defaultValue":"—","syntax":"uwsgi_param     parameter value    [if_not_empty];","context":"http, server, location","description":"Sets a parameter that should be passed to the uwsgi server.The value can contain text, variables, and their combination.These directives are inherited from the previous level if andonly if there are nouwsgi_paramdirectives defined on the current level.Standard<a href=\"https://tools.ietf.org/html/rfc3875#section-4.1\">CGIenvironment variablesshould be provided as uwsgi headers, see the uwsgi_params fileprovided in the distribution: location / {    include uwsgi_params;    ...} If the directive is specified with if_not_empty (1.1.11) thensuch a parameter will not be passed to the server until its value is not empty: uwsgi_param HTTPS $https if_not_empty;"},{"directive":"uwsgi_no_cache","defaultValue":"—","syntax":"uwsgi_no_cache string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be saved to a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be saved: uwsgi_no_cache $cookie_nocache $arg_nocache$arg_comment;uwsgi_no_cache $http_pragma    $http_authorization; Can be used along with the uwsgi_cache_bypass directive."},{"directive":"uwsgi_next_upstream_tries","defaultValue":"uwsgi_next_upstream_tries 0;","syntax":"uwsgi_next_upstream_tries number;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the number of possible tries for passing a request to thenext server.The 0 value turns off this limitation."},{"directive":"uwsgi_next_upstream_timeout","defaultValue":"uwsgi_next_upstream_timeout 0;","syntax":"uwsgi_next_upstream_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the time during which a request can be passed to thenext server.The 0 value turns off this limitation."},{"directive":"uwsgi_next_upstream","defaultValue":"uwsgi_next_upstream error timeout;","syntax":"uwsgi_next_upstream     error |    timeout |    invalid_header |    http_500 |    http_503 |    http_403 |    http_404 |    http_429 |    non_idempotent |    off    ...;","context":"http, server, location","description":"Specifies in which cases a request should be passed to the next server: erroran error occurred while establishing a connection with theserver, passing a request to it, or reading the response header;timeouta timeout has occurred while establishing a connection with theserver, passing a request to it, or reading the response header;invalid_headera server returned an empty or invalid response;http_500a server returned a response with the code 500;http_503a server returned a response with the code 503;http_403a server returned a response with the code 403;http_404a server returned a response with the code 404;http_429a server returned a response with the code 429 (1.11.13);non_idempotentnormally, requests with a<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotentmethod(POST, LOCK, PATCH)are not passed to the next serverif a request has been sent to an upstream server (1.9.13);enabling this option explicitly allows retrying such requests;offdisables passing a request to the next server. One should bear in mind that passing a request to the next server isonly possible if nothing has been sent to a client yet.That is, if an error or timeout occurs in the middle of thetransferring of a response, fixing this is impossible.The directive also defines what is considered an<a href=\"ngx_http_upstream_module.html#max_fails\">unsuccessfulattempt of communication with a server.The cases of error, timeout andinvalid_header are always considered unsuccessful attempts,even if they are not specified in the directive.The cases of http_500, http_503,and http_429 areconsidered unsuccessful attempts only if they are specified in the directive.The cases of http_403 and http_404are never considered unsuccessful attempts.Passing a request to the next server can be limited bythe number of triesand by time."},{"directive":"uwsgi_modifier2","defaultValue":"uwsgi_modifier2 0;","syntax":"uwsgi_modifier2 number;","context":"http, server, location","description":"Sets the value of the modifier2 field in the<a href=\"http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header\">uwsgipacket header."},{"directive":"uwsgi_modifier1","defaultValue":"uwsgi_modifier1 0;","syntax":"uwsgi_modifier1 number;","context":"http, server, location","description":"Sets the value of the modifier1 field in the<a href=\"http://uwsgi-docs.readthedocs.org/en/latest/Protocol.html#uwsgi-packet-header\">uwsgipacket header."},{"directive":"uwsgi_max_temp_file_size","defaultValue":"uwsgi_max_temp_file_size 1024m;","syntax":"uwsgi_max_temp_file_size size;","context":"http, server, location","description":"When buffering of responses from the uwsgiserver is enabled, and the whole response does not fit into the buffersset by the uwsgi_buffer_size and uwsgi_buffersdirectives, a part of the response can be saved to a temporary file.This directive sets the maximum size of the temporary file.The size of data written to the temporary file at a time is setby the uwsgi_temp_file_write_size directive.The zero value disables buffering of responses to temporary files. This restriction does not apply to responsesthat will be cachedor stored on disk."},{"directive":"uwsgi_limit_rate","defaultValue":"uwsgi_limit_rate 0;","syntax":"uwsgi_limit_rate rate;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Limits the speed of reading the response from the uwsgi server.The rate is specified in bytes per second.The zero value disables rate limiting.The limit is set per a request, and so if nginx simultaneously openstwo connections to the uwsgi server,the overall rate will be twice as much as the specified limit.The limitation works only ifbuffering of responses from the uwsgiserver is enabled."},{"directive":"uwsgi_intercept_errors","defaultValue":"uwsgi_intercept_errors off;","syntax":"uwsgi_intercept_errors on | off;","context":"http, server, location","description":"Determines whether a uwsgi server responses with codes greater than or equalto 300 should be passed to a clientor be intercepted and redirected to nginx for processingwith the <a href=\"ngx_http_core_module.html#error_page\">error_page directive."},{"directive":"uwsgi_ignore_headers","defaultValue":"—","syntax":"uwsgi_ignore_headers field ...;","context":"http, server, location","description":"Disables processing of certain response header fields from the uwsgi server.The following fields can be ignored: “X-Accel-Redirect”,“X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6),“X-Accel-Buffering” (1.1.6),“X-Accel-Charset” (1.1.6), “Expires”,“Cache-Control”, “Set-Cookie” (0.8.44),and “Vary” (1.7.7).If not disabled, processing of these header fields has the followingeffect: “X-Accel-Expires”, “Expires”,“Cache-Control”, “Set-Cookie”,and “Vary”set the parameters of response caching;“X-Accel-Redirect” performs an<a href=\"ngx_http_core_module.html#internal\">internalredirect to the specified URI;“X-Accel-Limit-Rate” sets the<a href=\"ngx_http_core_module.html#limit_rate\">ratelimit for transmission of a response to a client;“X-Accel-Buffering” enables or disablesbuffering of a response;“X-Accel-Charset” sets the desired<a href=\"ngx_http_charset_module.html#charset\">charsetof a response."},{"directive":"uwsgi_ignore_client_abort","defaultValue":"uwsgi_ignore_client_abort off;","syntax":"uwsgi_ignore_client_abort on | off;","context":"http, server, location","description":"Determines whether the connection with a uwsgi server should beclosed when a client closes the connection without waitingfor a response."},{"directive":"uwsgi_hide_header","defaultValue":"—","syntax":"uwsgi_hide_header field;","context":"http, server, location","description":"By default,nginx does not pass the header fields “Status” and“X-Accel-...” from the response of a uwsgiserver to a client.The uwsgi_hide_header directive sets additional fieldsthat will not be passed.If, on the contrary, the passing of fields needs to be permitted,the uwsgi_pass_header directive can be used."},{"directive":"uwsgi_force_ranges","defaultValue":"uwsgi_force_ranges off;","syntax":"uwsgi_force_ranges on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Enables byte-range supportfor both cached and uncached responses from the uwsgi serverregardless of the “Accept-Ranges” field in these responses."},{"directive":"uwsgi_connect_timeout","defaultValue":"uwsgi_connect_timeout 60s;","syntax":"uwsgi_connect_timeout time;","context":"http, server, location","description":"Defines a timeout for establishing a connection with a uwsgi server.It should be noted that this timeout cannot usually exceed 75 seconds."},{"directive":"uwsgi_cache_valid","defaultValue":"—","syntax":"uwsgi_cache_valid [code ...] time;","context":"http, server, location","description":"Sets caching time for different response codes.For example, the following directives uwsgi_cache_valid 200 302 10m;uwsgi_cache_valid 404      1m; set 10 minutes of caching for responses with codes 200 and 302and 1 minute for responses with code 404.If only caching time is specified uwsgi_cache_valid 5m; then only 200, 301, and 302 responses are cached.In addition, the any parameter can be specifiedto cache any responses: uwsgi_cache_valid 200 302 10m;uwsgi_cache_valid 301      1h;uwsgi_cache_valid any      1m; Parameters of caching can also be set directlyin the response header.This has higher priority than setting of caching time using the directive. The “X-Accel-Expires” header field sets caching time of aresponse in seconds.The zero value disables caching for a response.If the value starts with the @ prefix, it sets an absolutetime in seconds since Epoch, up to which the response may be cached.If the header does not include the “X-Accel-Expires” field,parameters of caching may be set in the header fields“Expires” or “Cache-Control”.If the header includes the “Set-Cookie” field, such aresponse will not be cached.If the header includes the “Vary” fieldwith the special value “*”, such aresponse will not be cached (1.7.7).If the header includes the “Vary” fieldwith another value, such a response will be cachedtaking into account the corresponding request header fields (1.7.7). Processing of one or more of these response header fields can be disabledusing the uwsgi_ignore_headers directive."},{"directive":"uwsgi_cache_use_stale","defaultValue":"uwsgi_cache_use_stale off;","syntax":"uwsgi_cache_use_stale     error |    timeout |    invalid_header |    updating |    http_500 |    http_503 |    http_403 |    http_404 |    http_429 |    off    ...;","context":"http, server, location","description":"Determines in which cases a stale cached response can be usedwhen an error occurs during communication with the uwsgi server.The directive’s parameters match the parameters of theuwsgi_next_upstream directive.The error parameter also permitsusing a stale cached response if a uwsgi server to process a requestcannot be selected."},{"directive":"uwsgi_cache_revalidate","defaultValue":"uwsgi_cache_revalidate off;","syntax":"uwsgi_cache_revalidate on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Enables revalidation of expired cache items using conditional requests withthe “If-Modified-Since” and “If-None-Match”header fields."},{"directive":"uwsgi_cache_purge","defaultValue":"—","syntax":"uwsgi_cache_purge string ...;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Defines conditions under which the request will be considered a cachepurge request.If at least one value of the string parameters is not empty and is not equalto “0” then the cache entry with a correspondingcache key is removed.The result of successful operation is indicated by returningthe 204 (No Content) response.If the cache key of a purge request endswith an asterisk (“*”), all cache entries matching thewildcard key will be removed from the cache.However, these entries will remain on the disk until they are deletedfor either inactivity,or processed by the cache purger (1.7.12),or a client attempts to access them.Example configuration: uwsgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;map $request_method $purge_method {    PURGE   1;    default 0;}server {    ...    location / {        uwsgi_pass        backend;        uwsgi_cache       cache_zone;        uwsgi_cache_key   $uri;        uwsgi_cache_purge $purge_method;    }}  This functionality is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"uwsgi_cache_path","defaultValue":"—","syntax":"uwsgi_cache_path     path    [levels=levels]    [use_temp_path=on|off]    keys_zone=name:size    [inactive=time]    [max_size=size]    [manager_files=number]    [manager_sleep=time]    [manager_threshold=time]    [loader_files=number]    [loader_sleep=time]    [loader_threshold=time]    [purger=on|off]    [purger_files=number]    [purger_sleep=time]    [purger_threshold=time];","context":"http","description":"Sets the path and other parameters of a cache.Cache data are stored in files.The file name in a cache is a result ofapplying the MD5 function to thecache key.The levels parameter defines hierarchy levels of a cache:from 1 to 3, each level accepts values 1 or 2.For example, in the following configuration uwsgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m; file names in a cache will look like this: /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c A cached response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the cache can be put ondifferent file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both cache and a directoryholding temporary filesare put on the same file system.A directory for temporary files is set based onthe use_temp_path parameter (1.7.10).If this parameter is omitted or set to the value on,the directory set by the uwsgi_temp_path directivefor the given location will be used.If the value is set to off,temporary files will be put directly in the cache directory.In addition, all active keys and information about data are storedin a shared memory zone, whose name and sizeare configured by the keys_zone parameter.One megabyte zone can store about 8 thousand keys.Cached data that are not accessed during the time specified by theinactive parameter get removed from the cacheregardless of their freshness.By default, inactive is set to 10 minutes.The special “cache manager” process monitors the maximum cache size setby the max_size parameter.When this size is exceeded, it removes the least recently used data.The data is removed in iterations configured bymanager_files,manager_threshold, andmanager_sleep parameters (1.11.5).During one iteration no more than manager_files itemsare deleted (by default, 100).The duration of one iteration is limited by themanager_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the manager_sleepparameter (by default, 50 milliseconds) is made.A minute after the start the special “cache loader” process is activated.It loads information about previously cached data stored on file systeminto a cache zone.The loading is also done in iterations.During one iteration no more than loader_files itemsare loaded (by default, 100).Besides, the duration of one iteration is limited by theloader_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the loader_sleepparameter (by default, 50 milliseconds) is made.Additionally,the following parameters are available as part of our<a href=\"http://nginx.com/products/\">commercial subscription: purger=on|offInstructs whether cache entries that match awildcard keywill be removed from the disk by the cache purger (1.7.12).Setting the parameter to on(default is off)will activate the “cache purger” process thatpermanently iterates through all cache entriesand deletes the entries that match the wildcard key.purger_files=numberSets the number of items that will be scanned during one iteration (1.7.12).By default, purger_files is set to 10.purger_threshold=numberSets the duration of one iteration (1.7.12).By default, purger_threshold is set to 50 milliseconds.purger_sleep=numberSets a pause between iterations (1.7.12).By default, purger_sleep is set to 50 milliseconds.  In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed.Previously cached responses will be considered invalidafter upgrading to a newer nginx version."},{"directive":"uwsgi_cache_min_uses","defaultValue":"uwsgi_cache_min_uses 1;","syntax":"uwsgi_cache_min_uses number;","context":"http, server, location","description":"Sets the number of requests after which the responsewill be cached."},{"directive":"uwsgi_cache_methods","defaultValue":"uwsgi_cache_methods GET HEAD;","syntax":"uwsgi_cache_methods     GET |    HEAD |    POST    ...;","context":"http, server, location","description":"If the client request method is listed in this directive thenthe response will be cached.“GET” and “HEAD” methods are alwaysadded to the list, though it is recommended to specify them explicitly.See also the uwsgi_no_cache directive."},{"directive":"uwsgi_cache_max_range_offset","defaultValue":"—","syntax":"uwsgi_cache_max_range_offset number;","context":"http, server, location","description":"This directive appeared in version 1.11.6.            Sets an offset in bytes for byte-range requests.If the range is beyond the offset,the range request will be passed to the uwsgi serverand the response will not be cached."},{"directive":"uwsgi_cache_lock_timeout","defaultValue":"uwsgi_cache_lock_timeout 5s;","syntax":"uwsgi_cache_lock_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            Sets a timeout for uwsgi_cache_lock.When the time expires,the request will be passed to the uwsgi server,however, the response will not be cached. Before 1.7.8, the response could be cached."},{"directive":"uwsgi_cache_lock_age","defaultValue":"uwsgi_cache_lock_age 5s;","syntax":"uwsgi_cache_lock_age time;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            If the last request passed to the uwsgi serverfor populating a new cache elementhas not completed for the specified time,one more request may be passed to the uwsgi server."},{"directive":"uwsgi_cache_lock","defaultValue":"uwsgi_cache_lock off;","syntax":"uwsgi_cache_lock on | off;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            When enabled, only one request at a time will be allowed to populatea new cache element identified according to the uwsgi_cache_keydirective by passing a request to a uwsgi server.Other requests of the same cache element will either waitfor a response to appear in the cache or the cache lock forthis element to be released, up to the time set by theuwsgi_cache_lock_timeout directive."},{"directive":"uwsgi_cache_key","defaultValue":"—","syntax":"uwsgi_cache_key string;","context":"http, server, location","description":"Defines a key for caching, for example uwsgi_cache_key localhost:9000$request_uri;"},{"directive":"uwsgi_cache_bypass","defaultValue":"—","syntax":"uwsgi_cache_bypass string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be taken from a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be taken from the cache: uwsgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;uwsgi_cache_bypass $http_pragma    $http_authorization; Can be used along with the uwsgi_no_cache directive."},{"directive":"uwsgi_cache_background_update","defaultValue":"uwsgi_cache_background_update off;","syntax":"uwsgi_cache_background_update on | off;","context":"http, server, location","description":"This directive appeared in version 1.11.10.            Allows starting a background subrequestto update an expired cache item,while a stale cached response is returned to the client.Note that it is necessary toallowthe usage of a stale cached response when it is being updated."},{"directive":"uwsgi_cache","defaultValue":"uwsgi_cache off;","syntax":"uwsgi_cache zone | off;","context":"http, server, location","description":"Defines a shared memory zone used for caching.The same zone can be used in several places.Parameter value can contain variables (1.7.9).The off parameter disables caching inheritedfrom the previous configuration level."},{"directive":"uwsgi_busy_buffers_size","defaultValue":"uwsgi_busy_buffers_size 8k|16k;","syntax":"uwsgi_busy_buffers_size size;","context":"http, server, location","description":"When buffering of responses from the uwsgiserver is enabled, limits the total size of buffers thatcan be busy sending a response to the client while the response is notyet fully read.In the meantime, the rest of the buffers can be used for reading the responseand, if needed, buffering part of the response to a temporary file.By default, size is limited by the size of two buffers set by theuwsgi_buffer_size and uwsgi_buffers directives."},{"directive":"uwsgi_buffers","defaultValue":"uwsgi_buffers 8 4k|8k;","syntax":"uwsgi_buffers number size;","context":"http, server, location","description":"Sets the number and size of thebuffers used for reading a response from the uwsgi server,for a single connection.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform."},{"directive":"uwsgi_buffering","defaultValue":"uwsgi_buffering on;","syntax":"uwsgi_buffering on | off;","context":"http, server, location","description":"Enables or disables buffering of responses from the uwsgi server.When buffering is enabled, nginx receives a response from the uwsgi serveras soon as possible, saving it into the buffers set by theuwsgi_buffer_size and uwsgi_buffers directives.If the whole response does not fit into memory, a part of it can be savedto a temporary file on the disk.Writing to temporary files is controlled by theuwsgi_max_temp_file_size anduwsgi_temp_file_write_size directives.When buffering is disabled, the response is passed to a client synchronously,immediately as it is received.nginx will not try to read the whole response from the uwsgi server.The maximum size of the data that nginx can receive from the serverat a time is set by the uwsgi_buffer_size directive.Buffering can also be enabled or disabled by passing“yes” or “no” in the“X-Accel-Buffering” response header field.This capability can be disabled using theuwsgi_ignore_headers directive."},{"directive":"uwsgi_buffer_size","defaultValue":"uwsgi_buffer_size 4k|8k;","syntax":"uwsgi_buffer_size size;","context":"http, server, location","description":"Sets the size of the buffer used for reading the first partof the response received from the uwsgi server.This part usually contains a small response header.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform.It can be made smaller, however."},{"directive":"uwsgi_bind","defaultValue":"—","syntax":"uwsgi_bind     address    [transparent] |    off;","context":"http, server, location","description":"Makes outgoing connections to a uwsgi server originatefrom the specified local IP address with an optional port (1.11.2).Parameter value can contain variables (1.3.12).The special value off (1.3.12) cancels the effectof the uwsgi_bind directiveinherited from the previous configuration level, which allows thesystem to auto-assign the local IP address and port."},{"directive":"userid_service","defaultValue":"userid_service IP address of the server;","syntax":"userid_service number;","context":"http, server, location","description":"If identifiers are issued by multiple servers (services),each service should be assigned its own numberto ensure that client identifiers are unique.For version 1 cookies, the default value is zero.For version 2 cookies, the default value is the number composed from the lastfour octets of the server’s IP address."},{"directive":"userid_path","defaultValue":"userid_path /;","syntax":"userid_path path;","context":"http, server, location","description":"Defines a path for which the cookie is set."},{"directive":"userid_p3p","defaultValue":"userid_p3p none;","syntax":"userid_p3p string | none;","context":"http, server, location","description":"Sets a value for the “P3P” header field that will besent along with the cookie.If the directive is set to the special value none,the “P3P” header will not be sent in a response."},{"directive":"userid_name","defaultValue":"userid_name uid;","syntax":"userid_name name;","context":"http, server, location","description":"Sets the cookie name."},{"directive":"userid_mark","defaultValue":"userid_mark off;","syntax":"userid_mark     letter | digit |    = |    off;","context":"http, server, location","description":"If the parameter is not off, enables the cookie markingmechanism and sets the character used as a mark.This mechanism is used to add or changeuserid_p3p and/or a cookie expiration time whilepreserving the client identifier.A mark can be any letter of the English alphabet (case-sensitive),digit, or the “=” character.If the mark is set, it is compared with the first padding symbolin the base64 representation of the client identifier passed in a cookie.If they do not match, the cookie is resent with the specified mark,expiration time, and “P3P” header."},{"directive":"userid_expires","defaultValue":"userid_expires off;","syntax":"userid_expires time | max |    off;","context":"http, server, location","description":"Sets a time during which a browser should keep the cookie.The parameter max will cause the cookie to expire on“31 Dec 2037 23:55:55 GMT”.The parameter off will cause the cookie to expire atthe end of a browser session."},{"directive":"userid_domain","defaultValue":"userid_domain none;","syntax":"userid_domain name | none;","context":"http, server, location","description":"Defines a domain for which the cookie is set.The none parameter disables setting of a domain for thecookie."},{"directive":"userid","defaultValue":"userid off;","syntax":"userid     on |    v1 |    log |    off;","context":"http, server, location","description":"Enables or disables setting cookies and logging the received cookies: onenables the setting of version 2 cookiesand logging of the received cookies;v1enables the setting of version 1 cookiesand logging of the received cookies;logdisables the setting of cookies,but enables logging of the received cookies;offdisables the setting of cookies and logging of the received cookies."},{"directive":"user","defaultValue":"user nobody nobody;","syntax":"user user [group];","context":"main","description":"Defines user and groupcredentials used by worker processes.If group is omitted, a group whose name equalsthat of user is used."},{"directive":"use","defaultValue":"—","syntax":"use method;","context":"events","description":"Specifies the <a href=\"events.html\">connection processingmethod to use.There is normally no need to specify it explicitly, because nginx willby default use the most efficient method."},{"directive":"upstream_conf","defaultValue":"","syntax":"","context":"","description":""},{"directive":"upstream","defaultValue":"—","syntax":"upstream name { ... }","context":"stream","description":"Defines a group of servers.Servers can listen on different ports.In addition, servers listening on TCP and UNIX-domain socketscan be mixed.Example: upstream backend {    server backend1.example.com:12345 weight=5;    server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;    server unix:/tmp/backend2;    server backend3.example.com:12345 resolve;    server backup1.example.com:12345  backup;} By default, connections are distributed between the servers using aweighted round-robin balancing method.In the above example, each 7 connections will be distributed as follows:5 connections go to backend1.example.com:12345and one connection to each of the second and third servers.If an error occurs during communication with a server, the connection willbe passed to the next server, and so on until all of the functioningservers will be tried.If communication with all servers fails, the connection will be closed."},{"directive":"upstream","defaultValue":"—","syntax":"upstream name { ... }","context":"http","description":"Defines a group of servers.Servers can listen on different ports.In addition, servers listening on TCP and UNIX-domain socketscan be mixed.Example: upstream backend {    server backend1.example.com weight=5;    server 127.0.0.1:8080       max_fails=3 fail_timeout=30s;    server unix:/tmp/backend3;    server backup1.example.com  backup;} By default, requests are distributed between the servers using aweighted round-robin balancing method.In the above example, each 7 requests will be distributed as follows:5 requests go to backend1.example.comand one request to each of the second and third servers.If an error occurs during communication with a server, the request willbe passed to the next server, and so on until all of the functioningservers will be tried.If a successful response could not be obtained from any of the servers,the client will receive the result of the communication with the last server."},{"directive":"uninitialized_variable_warn","defaultValue":"uninitialized_variable_warn on;","syntax":"uninitialized_variable_warn on | off;","context":"http, server, location, if","description":"Controls whether warnings about uninitialized variables are logged."},{"directive":"underscores_in_headers","defaultValue":"underscores_in_headers off;","syntax":"underscores_in_headers on | off;","context":"http, server","description":"Enables or disables the use of underscores in client request header fields.When the use of underscores is disabled, request header fields whose namescontain underscores aremarked as invalid and become subject to theignore_invalid_headers directive.If the directive is specified on the server level,its value is only used if a server is a default one.The value specified also applies to all virtual serverslistening on the same address and port."},{"directive":"types_hash_max_size","defaultValue":"types_hash_max_size 1024;","syntax":"types_hash_max_size size;","context":"http, server, location","description":"Sets the maximum size of the types hash tables.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"types_hash_bucket_size","defaultValue":"types_hash_bucket_size 64;","syntax":"types_hash_bucket_size size;","context":"http, server, location","description":"Sets the bucket size for the types hash tables.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document. Prior to version 1.5.13,the default value depended on the size of the processor’s cache line."},{"directive":"types","defaultValue":"types {    text/html  html;    image/gif  gif;    image/jpeg jpg;}","syntax":"types { ... }","context":"http, server, location","description":"Maps file name extensions to MIME types of responses.Extensions are case-insensitive.Several extensions can be mapped to one type, for example: types {    application/octet-stream bin exe dll;    application/octet-stream deb;    application/octet-stream dmg;} A sufficiently full mapping table is distributed with nginx in theconf/mime.types file.To make a particular location emit the“application/octet-stream”MIME type for all requests, the following configuration can be used: location /download/ {    types        { }    default_type application/octet-stream;}"},{"directive":"try_files","defaultValue":"—","syntax":"try_files file ... uri;try_files file ... =code;","context":"server, location","description":"Checks the existence of files in the specified order and usesthe first found file for request processing; the processingis performed in the current context.The path to a file is constructed from thefile parameteraccording to theroot and alias directives.It is possible to check directory’s existence by specifyinga slash at the end of a name, e.g. “$uri/”.If none of the files were found, an internal redirect to theuri specified in the last parameter is made.For example: location /images/ {    try_files $uri /images/default.gif;}location = /images/default.gif {    expires 30s;} The last parameter can also point to a named location,as shown in examples below.Starting from version 0.7.51, the last parameter can also be acode: location / {    try_files $uri $uri/index.html $uri.html =404;} Example in proxying Mongrel: location / {    try_files /system/maintenance.html              $uri $uri/index.html $uri.html              @mongrel;}location @mongrel {    proxy_pass http://mongrel;} Example for Drupal/FastCGI: location / {    try_files $uri $uri/ @drupal;}location ~ \\.php$ {    try_files $uri @drupal;    fastcgi_pass ...;    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;    fastcgi_param SCRIPT_NAME     $fastcgi_script_name;    fastcgi_param QUERY_STRING    $args;    ... other fastcgi_param's}location @drupal {    fastcgi_pass ...;    fastcgi_param SCRIPT_FILENAME /path/to/index.php;    fastcgi_param SCRIPT_NAME     /index.php;    fastcgi_param QUERY_STRING    q=$uri&amp;$args;    ... other fastcgi_param's} In the following example, location / {    try_files $uri $uri/ @drupal;} the try_files directive is equivalent to location / {    error_page 404 = @drupal;    log_not_found off;} And here, location ~ \\.php$ {    try_files $uri @drupal;    fastcgi_pass ...;    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;    ...} try_files checks the existence of the PHP filebefore passing the request to the FastCGI server.Example for Wordpress and Joomla: location / {    try_files $uri $uri/ @wordpress;}location ~ \\.php$ {    try_files $uri @wordpress;    fastcgi_pass ...;    fastcgi_param SCRIPT_FILENAME /path/to$fastcgi_script_name;    ... other fastcgi_param's}location @wordpress {    fastcgi_pass ...;    fastcgi_param SCRIPT_FILENAME /path/to/index.php;    ... other fastcgi_param's}"},{"directive":"timer_resolution","defaultValue":"—","syntax":"timer_resolution interval;","context":"main","description":"Reduces timer resolution in worker processes, thus reducing thenumber of gettimeofday() system calls made.By default, gettimeofday() is called each timea kernel event is received.With reduced resolution, gettimeofday() is onlycalled once per specified interval.Example: timer_resolution 100ms; Internal implementation of the interval depends on the method used: the EVFILT_TIMER filter if kqueue is used;timer_create() if eventport is used;setitimer() otherwise."},{"directive":"timeout","defaultValue":"","syntax":"","context":"","description":""},{"directive":"thread_pool","defaultValue":"thread_pool default threads=32 max_queue=65536;","syntax":"thread_pool     name    threads=number    [max_queue=number];","context":"main","description":"This directive appeared in version 1.7.11.            Defines named thread poolsused for multi-threaded reading and sending of files<a href=\"http/ngx_http_core_module.html#aio\">without blockingworker processes.The threads parameterdefines the number of threads in the pool.In the event that all threads in the pool are busy,a new task will wait in the queue.The max_queue parameter limits the numberof tasks allowed to be waiting in the queue.By default, up to 65536 tasks can wait in the queue.When the queue overflows, the task is completed with an error."},{"directive":"tcp_nopush","defaultValue":"tcp_nopush off;","syntax":"tcp_nopush on | off;","context":"http, server, location","description":"Enables or disables the use ofthe TCP_NOPUSH socket option on FreeBSDor the TCP_CORK socket option on Linux.The options are enabled only when sendfile is used.Enabling the option allows sending the response header and the beginning of a file in one packet,on Linux and FreeBSD 4.*;sending a file in full packets."},{"directive":"tcp_nodelay","defaultValue":"tcp_nodelay on;","syntax":"tcp_nodelay on | off;","context":"stream, server","description":"This directive appeared in version 1.9.4.            Enables or disables the use of the TCP_NODELAY option.The option is enabled for both client and proxied server connections."},{"directive":"tcp_nodelay","defaultValue":"tcp_nodelay on;","syntax":"tcp_nodelay on | off;","context":"http, server, location","description":"Enables or disables the use of the TCP_NODELAY option.The option is enabled only when a connection is transitioned into thekeep-alive state."},{"directive":"sub_filter_types","defaultValue":"","syntax":"","context":"","description":""},{"directive":"sub_filter_once","defaultValue":"sub_filter_once on;","syntax":"sub_filter_once on | off;","context":"http, server, location","description":"Indicates whether to look for each string to replaceonce or repeatedly."},{"directive":"sub_filter_last_modified","defaultValue":"sub_filter_last_modified off;","syntax":"sub_filter_last_modified on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.1.            Allows preserving the “Last-Modified” header fieldfrom the original response during replacementto facilitate response caching.By default, the header field is removed as contents of the responseare modified during processing."},{"directive":"sub_filter","defaultValue":"—","syntax":"sub_filter string replacement;","context":"http, server, location","description":"Sets a string to replace and a replacement string.The string to replace is matched ignoring the case.The string to replace (1.9.4) and replacement string can contain variables.Several sub_filter directivescan be specified on one configuration level (1.9.4).These directives are inherited from the previous level if and only if there areno sub_filter directives defined on the current level."},{"directive":"stub_status","defaultValue":"—","syntax":"stub_status;","context":"server, location","description":"The basic status information will be accessible from the surrounding location. In versions prior to 1.7.5,the directive syntax required an arbitrary argument, for example,“stub_status on”."},{"directive":"stream","defaultValue":"—","syntax":"stream { ... }","context":"main","description":"Provides the configuration file context in which the stream server directivesare specified."},{"directive":"sticky_cookie_insert","defaultValue":"—","syntax":"sticky_cookie_insert name[expires=time][domain=domain][path=path];","context":"upstream","description":"This directive is obsolete since version 1.5.7.An equivalentsticky directive with a new syntax should be used instead: sticky cookie name[expires=time][domain=domain][path=path];"},{"directive":"sticky","defaultValue":"—","syntax":"sticky     cookie name    [expires=time]    [domain=domain]    [httponly]    [secure]    [path=path];sticky     route $variable ...;sticky     learn    create=$variable    lookup=$variable    zone=name:size    [timeout=time]    [header];","context":"upstream","description":"This directive appeared in version 1.5.7.            Enables session affinity, which causes requests from the same client to bepassed to the same server in a group of servers.Three methods are available: cookieWhen the cookie method is used, information about thedesignated server is passed in an HTTP cookie generated by nginx: upstream backend {    server backend1.example.com;    server backend2.example.com;    sticky cookie srv_id expires=1h domain=.example.com path=/;} A request that comes from a client not yet bound to a particular serveris passed to the server selected by the configured balancing method.Further requests with this cookie will be passed to the designated server.If the designated server cannot process a request, the new server isselected as if the client has not been bound yet.The first parameter sets the name of the cookie to be set or inspected.Additional parameters may be as follows: expires=timeSets the time for which a browser should keep the cookie.The special value max will cause the cookie to expire on“31 Dec 2037 23:55:55 GMT”.If the parameter is not specified, it will cause the cookie to expire atthe end of a browser session.domain=domainDefines the domain for which the cookie is set.Parameter value can contain variables (1.11.5).httponlyAdds the HttpOnly attribute to the cookie (1.7.11).secureAdds the Secure attribute to the cookie (1.7.11).path=pathDefines the path for which the cookie is set. If any parameters are omitted, the corresponding cookie fields are not set.routeWhen the route method is used, proxied server assignsclient a route on receipt of the first request.All subsequent requests from this client will carry routing informationin a cookie or URI.This information is compared with the “route” parameterof the server directive to identify the server to which therequest should be proxied.If the “route” parameter is not specified, the route namewill be a hexadecimal representation of the MD5 hash of the IP address and port,or of the UNIX-domain socket path.If the designated server cannot process a request, the new server isselected by the configured balancing method as if there is no routinginformation in the request.The parameters of the route method specify variables thatmay contain routing information.The first non-empty variable is used to find the matching server.Example: map $cookie_jsessionid $route_cookie {    ~.+\\.(?P&lt;route&gt;\\w+)$ $route;}map $request_uri $route_uri {    ~jsessionid=.+\\.(?P&lt;route&gt;\\w+)$ $route;}upstream backend {    server backend1.example.com route=a;    server backend2.example.com route=b;    sticky route $route_cookie $route_uri;} Here, the route is taken from the “JSESSIONID” cookieif present in a request.Otherwise, the route from the URI is used.learnWhen the learn method (1.7.1) is used, nginxanalyzes upstream server responses and learns server-initiated sessionsusually passed in an HTTP cookie. upstream backend {   server backend1.example.com:8080;   server backend2.example.com:8081;   sticky learn          create=$upstream_cookie_examplecookie          lookup=$cookie_examplecookie          zone=client_sessions:1m;} In the example, the upstream server creates a session by setting thecookie “EXAMPLECOOKIE” in the response.Further requests with this cookie will be passed to the same server.If the server cannot process the request, the new server isselected as if the client has not been bound yet.The parameters create and lookupspecify variables that indicate how new sessions are created and existingsessions are searched, respectively.Both parameters may be specified more than once, in which case the firstnon-empty variable is used.Sessions are stored in a shared memory zone, whose name andsize are configured by the zone parameter.One megabyte zone can store about 8000 sessions on the 64-bit platform.The sessions that are not accessed during the time specified by thetimeout parameter get removed from the zone.By default, timeout is set to 10 minutes."},{"directive":"status_zone","defaultValue":"—","syntax":"status_zone zone;","context":"server","description":"Enables collection of virtual<a href=\"ngx_http_core_module.html#server\">httpor<a href=\"../stream/ngx_stream_core_module.html#server\">stream(1.7.11) server status information in the specified zone.Several servers may share the same zone."},{"directive":"status_format","defaultValue":"status_format json;","syntax":"status_format json;status_format jsonp [callback];","context":"http, server, location","description":"By default, status information is output in the JSON format.Alternatively, data may be output as JSONP.The callback parameter specifies the name of a callback function.The value can contain variables.If parameter is omitted, or the computed value is an empty string,then “ngx_status_jsonp_callback” is used."},{"directive":"status","defaultValue":"—","syntax":"status;","context":"location","description":"The status information will be accessible from the surrounding location.Access to this location should be<a href=\"ngx_http_core_module.html#satisfy\">limited."},{"directive":"state","defaultValue":"—","syntax":"state file;","context":"upstream","description":"This directive appeared in version 1.9.7.            Specifies a file that keeps the stateof the dynamically configurable group.Examples: state /var/lib/nginx/state/servers.conf; # path for Linuxstate /var/db/nginx/state/servers.conf;  # path for FreeBSD The state is currently limited to the list of servers with their parameters.The file is read when parsing the configuration and is updated each timethe upstream configuration is<a href=\"ngx_http_upstream_conf_module.html#upstream_conf\">changed.Changing the file content directly should be avoided.The directive cannot be usedalong with the server directive. Changes made during<a href=\"../control.html#reconfiguration\">configuration reloador <a href=\"../control.html#upgrade\">binary upgradecan be lost.  This directive is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"state","defaultValue":"—","syntax":"state file;","context":"upstream","description":"This directive appeared in version 1.9.7.            Specifies a file that keeps the stateof the dynamically configurable group.Examples: state /var/lib/nginx/state/servers.conf; # path for Linuxstate /var/db/nginx/state/servers.conf;  # path for FreeBSD The state is currently limited to the list of servers with their parameters.The file is read when parsing the configuration and is updated each timethe upstream configuration is<a href=\"ngx_http_upstream_conf_module.html#upstream_conf\">changed.Changing the file content directly should be avoided.The directive cannot be usedalong with the server directive. Changes made during<a href=\"../control.html#reconfiguration\">configuration reloador <a href=\"../control.html#upgrade\">binary upgradecan be lost.  This directive is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"starttls","defaultValue":"","syntax":"","context":"","description":""},{"directive":"ssl_verify_depth","defaultValue":"ssl_verify_depth 1;","syntax":"ssl_verify_depth number;","context":"stream, server","description":"This directive appeared in version 1.11.8.            Sets the verification depth in the client certificates chain."},{"directive":"ssl_verify_depth","defaultValue":"ssl_verify_depth 1;","syntax":"ssl_verify_depth number;","context":"mail, server","description":"This directive appeared in version 1.7.11.            Sets the verification depth in the client certificates chain."},{"directive":"ssl_verify_depth","defaultValue":"ssl_verify_depth 1;","syntax":"ssl_verify_depth number;","context":"http, server","description":"Sets the verification depth in the client certificates chain."},{"directive":"ssl_verify_client","defaultValue":"ssl_verify_client off;","syntax":"ssl_verify_client     on | off |    optional | optional_no_ca;","context":"stream, server","description":"This directive appeared in version 1.11.8.            Enables verification of client certificates.The verification result is stored in the$ssl_client_verify variable.If an error has occurred during the client certificate verificationor a client has not presented the required certificate,the connection is closed.The optional parameter requests the clientcertificate and verifies it if the certificate is present.The optional_no_ca parameterrequests the clientcertificate but does not require it to be signed by a trusted CA certificate.This is intended for the use in cases when a service that is external to nginxperforms the actual certificate verification.The contents of the certificate is accessible through the$ssl_client_cert variable."},{"directive":"ssl_verify_client","defaultValue":"ssl_verify_client off;","syntax":"ssl_verify_client     on | off |    optional | optional_no_ca;","context":"mail, server","description":"This directive appeared in version 1.7.11.            Enables verification of client certificates.The verification result is passed in the“Auth-SSL-Verify” header of the<a href=\"ngx_mail_auth_http_module.html#auth_http\">authenticationrequest.The optional parameter requests the clientcertificate and verifies it if the certificate is present.The optional_no_ca parameterrequests the clientcertificate but does not require it to be signed by a trusted CA certificate.This is intended for the use in cases when a service that is external to nginxperforms the actual certificate verification.The contents of the certificate is accessible through requests<a href=\"ngx_mail_auth_http_module.html#auth_http_pass_client_cert\">sentto the authentication server."},{"directive":"ssl_verify_client","defaultValue":"ssl_verify_client off;","syntax":"ssl_verify_client     on | off |    optional | optional_no_ca;","context":"http, server","description":"Enables verification of client certificates.The verification result is stored in the$ssl_client_verify variable.The optional parameter (0.8.7+) requests the clientcertificate and verifies it if the certificate is present.The optional_no_ca parameter (1.3.8, 1.2.5)requests the clientcertificate but does not require it to be signed by a trusted CA certificate.This is intended for the use in cases when a service that is external to nginxperforms the actual certificate verification.The contents of the certificate is accessible through the$ssl_client_cert variable."},{"directive":"ssl_trusted_certificate","defaultValue":"—","syntax":"ssl_trusted_certificate file;","context":"stream, server","description":"This directive appeared in version 1.11.8.            Specifies a file with trusted CA certificates in the PEM formatused to verify client certificates.In contrast to the certificate set by ssl_client_certificate,the list of these certificates will not be sent to clients."},{"directive":"ssl_trusted_certificate","defaultValue":"—","syntax":"ssl_trusted_certificate file;","context":"mail, server","description":"This directive appeared in version 1.7.11.            Specifies a file with trusted CA certificates in the PEM formatused to verify client certificates.In contrast to the certificate set by ssl_client_certificate,the list of these certificates will not be sent to clients."},{"directive":"ssl_trusted_certificate","defaultValue":"—","syntax":"ssl_trusted_certificate file;","context":"http, server","description":"This directive appeared in version 1.3.7.            Specifies a file with trusted CA certificates in the PEM formatused to verify client certificates andOCSP responses if ssl_stapling is enabled.In contrast to the certificate set by ssl_client_certificate,the list of these certificates will not be sent to clients."},{"directive":"ssl_stapling_verify","defaultValue":"ssl_stapling_verify off;","syntax":"ssl_stapling_verify on | off;","context":"http, server","description":"This directive appeared in version 1.3.7.            Enables or disables verification of OCSP responses by the server.For verification to work, the certificate of the server certificateissuer, the root certificate, and all intermediate certificatesshould be configured as trusted using thessl_trusted_certificate directive."},{"directive":"ssl_stapling_responder","defaultValue":"—","syntax":"ssl_stapling_responder url;","context":"http, server","description":"This directive appeared in version 1.3.7.            Overrides the URL of the OCSP responder specified in the“<a href=\"https://tools.ietf.org/html/rfc5280#section-4.2.2.1\">AuthorityInformation Access” certificate extension.Only “http://” OCSP responders are supported: ssl_stapling_responder http://ocsp.example.com/;"},{"directive":"ssl_stapling_file","defaultValue":"—","syntax":"ssl_stapling_file file;","context":"http, server","description":"This directive appeared in version 1.3.7.            When set, the stapled OCSP response will be taken from thespecified file instead of queryingthe OCSP responder specified in the server certificate.The file should be in the DER format as produced by the“openssl ocsp” command."},{"directive":"ssl_stapling","defaultValue":"ssl_stapling off;","syntax":"ssl_stapling on | off;","context":"http, server","description":"This directive appeared in version 1.3.7.            Enables or disables<a href=\"https://tools.ietf.org/html/rfc4366#section-3.6\">staplingof OCSP responses by the server.Example: ssl_stapling on;resolver 192.0.2.1; For the OCSP stapling to work, the certificate of the server certificateissuer should be known.If the ssl_certificate file doesnot contain intermediate certificates,the certificate of the server certificate issuer should bepresent in thessl_trusted_certificate file.For a resolution of the OCSP responder hostname,the <a href=\"ngx_http_core_module.html#resolver\">resolver directiveshould also be specified."},{"directive":"ssl_session_timeout","defaultValue":"ssl_session_timeout 5m;","syntax":"ssl_session_timeout time;","context":"stream, server","description":"Specifies a time during which a client may reuse thesession parameters."},{"directive":"ssl_session_timeout","defaultValue":"ssl_session_timeout 5m;","syntax":"ssl_session_timeout time;","context":"mail, server","description":"Specifies a time during which a client may reuse thesession parameters."},{"directive":"ssl_session_timeout","defaultValue":"ssl_session_timeout 5m;","syntax":"ssl_session_timeout time;","context":"http, server","description":"Specifies a time during which a client may reuse thesession parameters."},{"directive":"ssl_session_tickets","defaultValue":"ssl_session_tickets on;","syntax":"ssl_session_tickets on | off;","context":"stream, server","description":"Enables or disables session resumption through<a href=\"https://tools.ietf.org/html/rfc5077\">TLS session tickets."},{"directive":"ssl_session_tickets","defaultValue":"ssl_session_tickets on;","syntax":"ssl_session_tickets on | off;","context":"mail, server","description":"This directive appeared in version 1.5.9.            Enables or disables session resumption through<a href=\"https://tools.ietf.org/html/rfc5077\">TLS session tickets."},{"directive":"ssl_session_tickets","defaultValue":"ssl_session_tickets on;","syntax":"ssl_session_tickets on | off;","context":"http, server","description":"This directive appeared in version 1.5.9.            Enables or disables session resumption through<a href=\"https://tools.ietf.org/html/rfc5077\">TLS session tickets."},{"directive":"ssl_session_ticket_key","defaultValue":"—","syntax":"ssl_session_ticket_key file;","context":"stream, server","description":"Sets a file with the secret key used to encryptand decrypt TLS session tickets.The directive is necessary if the same key has to be shared betweenmultiple servers.By default, a randomly generated key is used.If several keys are specified, only the first key isused to encrypt TLS session tickets.This allows configuring key rotation, for example: ssl_session_ticket_key current.key;ssl_session_ticket_key previous.key; The file must contain 80 or 48 bytesof random data and can be created using the following command: openssl rand 80 &gt; ticket.key Depending on the file size either AES256 (for 80-byte keys, 1.11.8)or AES128 (for 48-byte keys) is used for encryption."},{"directive":"ssl_session_ticket_key","defaultValue":"—","syntax":"ssl_session_ticket_key file;","context":"mail, server","description":"This directive appeared in version 1.5.7.            Sets a file with the secret key used to encryptand decrypt TLS session tickets.The directive is necessary if the same key has to be shared betweenmultiple servers.By default, a randomly generated key is used.If several keys are specified, only the first key isused to encrypt TLS session tickets.This allows configuring key rotation, for example: ssl_session_ticket_key current.key;ssl_session_ticket_key previous.key; The file must contain 80 or 48 bytesof random data and can be created using the following command: openssl rand 80 &gt; ticket.key Depending on the file size either AES256 (for 80-byte keys, 1.11.8)or AES128 (for 48-byte keys) is used for encryption."},{"directive":"ssl_session_ticket_key","defaultValue":"—","syntax":"ssl_session_ticket_key file;","context":"http, server","description":"This directive appeared in version 1.5.7.            Sets a file with the secret key used to encryptand decrypt TLS session tickets.The directive is necessary if the same key has to be shared betweenmultiple servers.By default, a randomly generated key is used.If several keys are specified, only the first key isused to encrypt TLS session tickets.This allows configuring key rotation, for example: ssl_session_ticket_key current.key;ssl_session_ticket_key previous.key; The file must contain 80 or 48 bytesof random data and can be created using the following command: openssl rand 80 &gt; ticket.key Depending on the file size either AES256 (for 80-byte keys, 1.11.8)or AES128 (for 48-byte keys) is used for encryption."},{"directive":"ssl_session_cache","defaultValue":"ssl_session_cache none;","syntax":"ssl_session_cache     off |    none |    [builtin[:size]]    [shared:name:size];","context":"stream, server","description":"Sets the types and sizes of caches that store session parameters.A cache can be of any of the following types: offthe use of a session cache is strictly prohibited:nginx explicitly tells a client that sessions may not be reused.nonethe use of a session cache is gently disallowed:nginx tells a client that sessions may be reused, but does notactually store session parameters in the cache.builtina cache built in OpenSSL; used by one worker process only.The cache size is specified in sessions.If size is not given, it is equal to 20480 sessions.Use of the built-in cache can cause memory fragmentation.shareda cache shared between all worker processes.The cache size is specified in bytes; one megabyte can storeabout 4000 sessions.Each shared cache should have an arbitrary name.A cache with the same name can be used in severalservers. Both cache types can be used simultaneously, for example: ssl_session_cache builtin:1000 shared:SSL:10m; but using only shared cache without the built-in cache shouldbe more efficient."},{"directive":"ssl_session_cache","defaultValue":"ssl_session_cache none;","syntax":"ssl_session_cache     off |    none |    [builtin[:size]]    [shared:name:size];","context":"mail, server","description":"Sets the types and sizes of caches that store session parameters.A cache can be of any of the following types: offthe use of a session cache is strictly prohibited:nginx explicitly tells a client that sessions may not be reused.nonethe use of a session cache is gently disallowed:nginx tells a client that sessions may be reused, but does notactually store session parameters in the cache.builtina cache built in OpenSSL; used by one worker process only.The cache size is specified in sessions.If size is not given, it is equal to 20480 sessions.Use of the built-in cache can cause memory fragmentation.shareda cache shared between all worker processes.The cache size is specified in bytes; one megabyte can storeabout 4000 sessions.Each shared cache should have an arbitrary name.A cache with the same name can be used in severalservers. Both cache types can be used simultaneously, for example: ssl_session_cache builtin:1000 shared:SSL:10m; but using only shared cache without the built-in cache shouldbe more efficient."},{"directive":"ssl_session_cache","defaultValue":"ssl_session_cache none;","syntax":"ssl_session_cache     off |    none |    [builtin[:size]]    [shared:name:size];","context":"http, server","description":"Sets the types and sizes of caches that store session parameters.A cache can be of any of the following types: offthe use of a session cache is strictly prohibited:nginx explicitly tells a client that sessions may not be reused.nonethe use of a session cache is gently disallowed:nginx tells a client that sessions may be reused, but does notactually store session parameters in the cache.builtina cache built in OpenSSL; used by one worker process only.The cache size is specified in sessions.If size is not given, it is equal to 20480 sessions.Use of the built-in cache can cause memory fragmentation.shareda cache shared between all worker processes.The cache size is specified in bytes; one megabyte can storeabout 4000 sessions.Each shared cache should have an arbitrary name.A cache with the same name can be used in several virtual servers. Both cache types can be used simultaneously, for example: ssl_session_cache builtin:1000 shared:SSL:10m; but using only shared cache without the built-in cache shouldbe more efficient."},{"directive":"ssl_protocols","defaultValue":"ssl_protocols TLSv1 TLSv1.1 TLSv1.2;","syntax":"ssl_protocols     [SSLv2]    [SSLv3]    [TLSv1]    [TLSv1.1]    [TLSv1.2]    [TLSv1.3];","context":"stream, server","description":"Enables the specified protocols. The TLSv1.1 and TLSv1.2 parameters workonly when OpenSSL 1.0.1 or higher is used.  The TLSv1.3 parameter (1.13.0) works only whenOpenSSL 1.1.1 built with TLSv1.3 support is used."},{"directive":"ssl_protocols","defaultValue":"ssl_protocols TLSv1 TLSv1.1 TLSv1.2;","syntax":"ssl_protocols     [SSLv2]    [SSLv3]    [TLSv1]    [TLSv1.1]    [TLSv1.2]    [TLSv1.3];","context":"mail, server","description":"Enables the specified protocols. The TLSv1.1 and TLSv1.2 parameters(1.1.13, 1.0.12) work only when OpenSSL 1.0.1 or higher is used.  The TLSv1.3 parameter (1.13.0) works only whenOpenSSL 1.1.1 built with TLSv1.3 support is used."},{"directive":"ssl_protocols","defaultValue":"ssl_protocols TLSv1 TLSv1.1 TLSv1.2;","syntax":"ssl_protocols     [SSLv2]    [SSLv3]    [TLSv1]    [TLSv1.1]    [TLSv1.2]    [TLSv1.3];","context":"http, server","description":"Enables the specified protocols. The TLSv1.1 and TLSv1.2 parameters(1.1.13, 1.0.12) work only when OpenSSL 1.0.1 or higher is used.  The TLSv1.3 parameter (1.13.0) works only whenOpenSSL 1.1.1 built with TLSv1.3 support is used."},{"directive":"ssl_preread","defaultValue":"ssl_preread off;","syntax":"ssl_preread on | off;","context":"stream, server","description":"Enables extracting information from the ClientHello message atthe <a href=\"stream_processing.html#preread_phase\">preread phase."},{"directive":"ssl_prefer_server_ciphers","defaultValue":"ssl_prefer_server_ciphers off;","syntax":"ssl_prefer_server_ciphers on | off;","context":"stream, server","description":"Specifies that server ciphers should be preferred over client cipherswhen the SSLv3 and TLS protocols are used."},{"directive":"ssl_prefer_server_ciphers","defaultValue":"ssl_prefer_server_ciphers off;","syntax":"ssl_prefer_server_ciphers on | off;","context":"mail, server","description":"Specifies that server ciphers should be preferred over client cipherswhen the SSLv3 and TLS protocols are used."},{"directive":"ssl_prefer_server_ciphers","defaultValue":"ssl_prefer_server_ciphers off;","syntax":"ssl_prefer_server_ciphers on | off;","context":"http, server","description":"Specifies that server ciphers should be preferred over clientciphers when using the SSLv3 and TLS protocols."},{"directive":"ssl_password_file","defaultValue":"—","syntax":"ssl_password_file file;","context":"stream, server","description":"Specifies a file with passphrases forsecret keyswhere each passphrase is specified on a separate line.Passphrases are tried in turn when loading the key.Example: stream {    ssl_password_file /etc/keys/global.pass;    ...    server {        listen 127.0.0.1:12345;        ssl_certificate_key /etc/keys/first.key;    }    server {        listen 127.0.0.1:12346;        # named pipe can also be used instead of a file        ssl_password_file /etc/keys/fifo;        ssl_certificate_key /etc/keys/second.key;    }}"},{"directive":"ssl_password_file","defaultValue":"—","syntax":"ssl_password_file file;","context":"mail, server","description":"This directive appeared in version 1.7.3.            Specifies a file with passphrases forsecret keyswhere each passphrase is specified on a separate line.Passphrases are tried in turn when loading the key.Example: mail {    ssl_password_file /etc/keys/global.pass;    ...    server {        server_name mail1.example.com;        ssl_certificate_key /etc/keys/first.key;    }    server {        server_name mail2.example.com;        # named pipe can also be used instead of a file        ssl_password_file /etc/keys/fifo;        ssl_certificate_key /etc/keys/second.key;    }}"},{"directive":"ssl_password_file","defaultValue":"—","syntax":"ssl_password_file file;","context":"http, server","description":"This directive appeared in version 1.7.3.            Specifies a file with passphrases forsecret keyswhere each passphrase is specified on a separate line.Passphrases are tried in turn when loading the key.Example: http {    ssl_password_file /etc/keys/global.pass;    ...    server {        server_name www1.example.com;        ssl_certificate_key /etc/keys/first.key;    }    server {        server_name www2.example.com;        # named pipe can also be used instead of a file        ssl_password_file /etc/keys/fifo;        ssl_certificate_key /etc/keys/second.key;    }}"},{"directive":"ssl_handshake_timeout","defaultValue":"ssl_handshake_timeout 60s;","syntax":"ssl_handshake_timeout time;","context":"stream, server","description":"Specifies a timeout for the SSL handshake to complete."},{"directive":"ssl_engine","defaultValue":"—","syntax":"ssl_engine device;","context":"main","description":"Defines the name of the hardware SSL accelerator."},{"directive":"ssl_ecdh_curve","defaultValue":"ssl_ecdh_curve auto;","syntax":"ssl_ecdh_curve curve;","context":"stream, server","description":"Specifies a curve for ECDHE ciphers.When using OpenSSL 1.0.2 or higher,it is possible to specify multiple curves (1.11.0), for example: ssl_ecdh_curve prime256v1:secp384r1; The special value auto (1.11.0) instructs nginx to usea list built into the OpenSSL library when using OpenSSL 1.0.2 or higher,or prime256v1 with older versions. Prior to version 1.11.0,the prime256v1 curve was used by default."},{"directive":"ssl_ecdh_curve","defaultValue":"ssl_ecdh_curve auto;","syntax":"ssl_ecdh_curve curve;","context":"mail, server","description":"This directive appeared in versions 1.1.0 and 1.0.6.                                                                Specifies a curve for ECDHE ciphers.When using OpenSSL 1.0.2 or higher,it is possible to specify multiple curves (1.11.0), for example: ssl_ecdh_curve prime256v1:secp384r1; The special value auto (1.11.0) instructs nginx to usea list built into the OpenSSL library when using OpenSSL 1.0.2 or higher,or prime256v1 with older versions. Prior to version 1.11.0,the prime256v1 curve was used by default."},{"directive":"ssl_ecdh_curve","defaultValue":"ssl_ecdh_curve auto;","syntax":"ssl_ecdh_curve curve;","context":"http, server","description":"This directive appeared in versions 1.1.0 and 1.0.6.                                                                Specifies a curve for ECDHE ciphers.When using OpenSSL 1.0.2 or higher,it is possible to specify multiple curves (1.11.0), for example: ssl_ecdh_curve prime256v1:secp384r1; The special value auto (1.11.0) instructs nginx to usea list built into the OpenSSL library when using OpenSSL 1.0.2 or higher,or prime256v1 with older versions. Prior to version 1.11.0,the prime256v1 curve was used by default."},{"directive":"ssl_dhparam","defaultValue":"—","syntax":"ssl_dhparam file;","context":"stream, server","description":"Specifies a file with DH parameters for DHE ciphers."},{"directive":"ssl_dhparam","defaultValue":"—","syntax":"ssl_dhparam file;","context":"mail, server","description":"This directive appeared in version 0.7.2.            Specifies a file with DH parameters for DHE ciphers."},{"directive":"ssl_dhparam","defaultValue":"—","syntax":"ssl_dhparam file;","context":"http, server","description":"This directive appeared in version 0.7.2.            Specifies a file with DH parameters for DHE ciphers."},{"directive":"ssl_crl","defaultValue":"—","syntax":"ssl_crl file;","context":"stream, server","description":"This directive appeared in version 1.11.8.            Specifies a file with revoked certificates (CRL)in the PEM format used to verifyclient certificates."},{"directive":"ssl_crl","defaultValue":"—","syntax":"ssl_crl file;","context":"mail, server","description":"This directive appeared in version 1.7.11.            Specifies a file with revoked certificates (CRL)in the PEM format used to verifyclient certificates."},{"directive":"ssl_crl","defaultValue":"—","syntax":"ssl_crl file;","context":"http, server","description":"This directive appeared in version 0.8.7.            Specifies a file with revoked certificates (CRL)in the PEM format used to verifyclient certificates."},{"directive":"ssl_client_certificate","defaultValue":"—","syntax":"ssl_client_certificate file;","context":"stream, server","description":"This directive appeared in version 1.11.8.            Specifies a file with trusted CA certificates in the PEM formatused to verify client certificates.The list of certificates will be sent to clients.If this is not desired, the ssl_trusted_certificatedirective can be used."},{"directive":"ssl_client_certificate","defaultValue":"—","syntax":"ssl_client_certificate file;","context":"mail, server","description":"This directive appeared in version 1.7.11.            Specifies a file with trusted CA certificates in the PEM formatused to verify client certificates.The list of certificates will be sent to clients.If this is not desired, the ssl_trusted_certificatedirective can be used."},{"directive":"ssl_client_certificate","defaultValue":"—","syntax":"ssl_client_certificate file;","context":"http, server","description":"Specifies a file with trusted CA certificates in the PEM formatused to verify client certificates andOCSP responses if ssl_stapling is enabled.The list of certificates will be sent to clients.If this is not desired, the ssl_trusted_certificatedirective can be used."},{"directive":"ssl_ciphers","defaultValue":"ssl_ciphers HIGH:!aNULL:!MD5;","syntax":"ssl_ciphers ciphers;","context":"stream, server","description":"Specifies the enabled ciphers.The ciphers are specified in the format understood by theOpenSSL library, for example: ssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; The full list can be viewed using the“openssl ciphers” command."},{"directive":"ssl_ciphers","defaultValue":"ssl_ciphers HIGH:!aNULL:!MD5;","syntax":"ssl_ciphers ciphers;","context":"mail, server","description":"Specifies the enabled ciphers.The ciphers are specified in the format understood by theOpenSSL library, for example: ssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; The full list can be viewed using the“openssl ciphers” command. The previous versions of nginx used<a href=\"../http/configuring_https_servers.html#compatibility\">differentciphers by default."},{"directive":"ssl_ciphers","defaultValue":"ssl_ciphers HIGH:!aNULL:!MD5;","syntax":"ssl_ciphers ciphers;","context":"http, server","description":"Specifies the enabled ciphers.The ciphers are specified in the format understood by theOpenSSL library, for example: ssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; The full list can be viewed using the“openssl ciphers” command. The previous versions of nginx used<a href=\"configuring_https_servers.html#compatibility\">differentciphers by default."},{"directive":"ssl_certificate_key","defaultValue":"—","syntax":"ssl_certificate_key file;","context":"stream, server","description":"Specifies a file with the secret key in the PEM formatfor the given server.The valueengine:name:idcan be specified instead of the file,which loads a secret key with a specified idfrom the OpenSSL engine name."},{"directive":"ssl_certificate_key","defaultValue":"—","syntax":"ssl_certificate_key file;","context":"mail, server","description":"Specifies a file with the secret key in the PEM formatfor the given server.The valueengine:name:idcan be specified instead of the file (1.7.9),which loads a secret key with a specified idfrom the OpenSSL engine name."},{"directive":"ssl_certificate_key","defaultValue":"—","syntax":"ssl_certificate_key file;","context":"http, server","description":"Specifies a file with the secret key in the PEM formatfor the given virtual server.The valueengine:name:idcan be specified instead of the file (1.7.9),which loads a secret key with a specified idfrom the OpenSSL engine name."},{"directive":"ssl_certificate","defaultValue":"—","syntax":"ssl_certificate file;","context":"stream, server","description":"Specifies a file with the certificate in the PEM formatfor the given server.If intermediate certificates should be specified in addition to a primarycertificate, they should be specified in the same file in the followingorder: the primary certificate comes first, then the intermediate certificates.A secret key in the PEM format may be placed in the same file.Since version 1.11.0,this directive can be specified multiple timesto load certificates of different types, for example, RSA and ECDSA: server {    listen              12345 ssl;    ssl_certificate     example.com.rsa.crt;    ssl_certificate_key example.com.rsa.key;    ssl_certificate     example.com.ecdsa.crt;    ssl_certificate_key example.com.ecdsa.key;    ...}  Only OpenSSL 1.0.2 or higher supports separate certificate chainsfor different certificates.With older versions, only one certificate chain can be used."},{"directive":"ssl_certificate","defaultValue":"—","syntax":"ssl_certificate file;","context":"mail, server","description":"Specifies a file with the certificate in the PEM formatfor the given server.If intermediate certificates should be specified in addition to a primarycertificate, they should be specified in the same file in the followingorder: the primary certificate comes first, then the intermediate certificates.A secret key in the PEM format may be placed in the same file.Since version 1.11.0,this directive can be specified multiple timesto load certificates of different types, for example, RSA and ECDSA: server {    listen              993 ssl;    ssl_certificate     example.com.rsa.crt;    ssl_certificate_key example.com.rsa.key;    ssl_certificate     example.com.ecdsa.crt;    ssl_certificate_key example.com.ecdsa.key;    ...}  Only OpenSSL 1.0.2 or higher supports separate certificate chainsfor different certificates.With older versions, only one certificate chain can be used."},{"directive":"ssl_certificate","defaultValue":"—","syntax":"ssl_certificate file;","context":"http, server","description":"Specifies a file with the certificate in the PEM formatfor the given virtual server.If intermediate certificates should be specified in addition to a primarycertificate, they should be specified in the same file in the followingorder: the primary certificate comes first, then the intermediate certificates.A secret key in the PEM format may be placed in the same file.Since version 1.11.0,this directive can be specified multiple timesto load certificates of different types, for example, RSA and ECDSA: server {    listen              443 ssl;    server_name         example.com;    ssl_certificate     example.com.rsa.crt;    ssl_certificate_key example.com.rsa.key;    ssl_certificate     example.com.ecdsa.crt;    ssl_certificate_key example.com.ecdsa.key;    ...}  Only OpenSSL 1.0.2 or higher supports separate<a href=\"configuring_https_servers.html#chains\">certificate chainsfor different certificates.With older versions, only one certificate chain can be used. It should be kept in mind that due to the HTTPS protocol limitationsvirtual servers should listen on different IP addresses: server {    listen          192.168.1.1:443;    server_name     one.example.com;    ssl_certificate one.example.com.crt;    ...}server {    listen          192.168.1.2:443;    server_name     two.example.com;    ssl_certificate two.example.com.crt;    ...} otherwise<a href=\"configuring_https_servers.html#name_based_https_servers\">the first server’s certificatewill be issued for the second site."},{"directive":"ssl_buffer_size","defaultValue":"ssl_buffer_size 16k;","syntax":"ssl_buffer_size size;","context":"http, server","description":"This directive appeared in version 1.5.9.            Sets the size of the buffer used for sending data.By default, the buffer size is 16k, which corresponds to minimaloverhead when sending big responses.To minimize Time To First Byte it may be beneficial to use smaller values,for example: ssl_buffer_size 4k;"},{"directive":"ssl","defaultValue":"ssl off;","syntax":"ssl on | off;","context":"mail, server","description":"Enables the SSL/TLS protocol for the given server."},{"directive":"ssl","defaultValue":"ssl off;","syntax":"ssl on | off;","context":"http, server","description":"Enables the HTTPS protocol for the given virtual server. It is recommended to use the ssl parameter of the<a href=\"ngx_http_core_module.html#listen\">listen directive insteadof this directive."},{"directive":"ssi_value_length","defaultValue":"ssi_value_length 256;","syntax":"ssi_value_length length;","context":"http, server, location","description":"Sets the maximum length of parameter values in SSI commands."},{"directive":"ssi_types","defaultValue":"ssi_types text/html;","syntax":"ssi_types mime-type ...;","context":"http, server, location","description":"Enables processing of SSI commands in responses with the specified MIME typesin addition to “text/html”.The special value “*” matches any MIME type (0.8.29)."},{"directive":"ssi_silent_errors","defaultValue":"ssi_silent_errors off;","syntax":"ssi_silent_errors on | off;","context":"http, server, location","description":"If enabled, suppresses the output of the“[an error occurred while processing the directive]”string if an error occurred during SSI processing."},{"directive":"ssi_min_file_chunk","defaultValue":"ssi_min_file_chunk 1k;","syntax":"ssi_min_file_chunk size;","context":"http, server, location","description":"Sets the minimum size for parts of a response stored on disk,starting from which it makes sense to send them using<a href=\"ngx_http_core_module.html#sendfile\">sendfile."},{"directive":"ssi_last_modified","defaultValue":"ssi_last_modified off;","syntax":"ssi_last_modified on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.1.            Allows preserving the “Last-Modified” header fieldfrom the original response during SSI processingto facilitate response caching.By default, the header field is removed as contents of the responseare modified during processing and may contain dynamically generated elementsor parts that are changed independently of the original response."},{"directive":"ssi","defaultValue":"ssi off;","syntax":"ssi on | off;","context":"http, server, location, if in location","description":"Enables or disables processing of SSI commands in responses."},{"directive":"split_clients","defaultValue":"","syntax":"","context":"","description":""},{"directive":"split_clients","defaultValue":"","syntax":"","context":"","description":""},{"directive":"spdy_headers_comp","defaultValue":"spdy_headers_comp 0;","syntax":"spdy_headers_comp level;","context":"http, server","description":"Sets the header compression level of a response in a range from1 (fastest, less compression) to 9 (slowest, best compression).The special value 0 turns off the header compression."},{"directive":"spdy_chunk_size","defaultValue":"spdy_chunk_size 8k;","syntax":"spdy_chunk_size size;","context":"http, server, location","description":"This directive appeared in version 1.5.9.            Sets the maximum size of chunksinto which the response body is<a href=\"http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2#TOC-Data-frames\">sliced.A too low value results in higher overhead.A too high value impairs prioritization due to<a href=\"http://en.wikipedia.org/wiki/Head-of-line_blocking\">HOL blocking."},{"directive":"source_charset","defaultValue":"","syntax":"","context":"","description":""},{"directive":"smtp_capabilities","defaultValue":"","syntax":"","context":"","description":""},{"directive":"smtp_auth","defaultValue":"smtp_auth login plain;","syntax":"smtp_auth method ...;","context":"mail, server","description":"Sets permitted methods of<a href=\"https://tools.ietf.org/html/rfc2554\">SASL authenticationfor SMTP clients.Supported methods are: login<a href=\"https://tools.ietf.org/html/draft-murchison-sasl-login-00\">AUTH LOGINplain<a href=\"https://tools.ietf.org/html/rfc4616\">AUTH PLAINcram-md5<a href=\"https://tools.ietf.org/html/rfc2195\">AUTH CRAM-MD5.In order for this method to work, the password must be stored unencrypted.external<a href=\"https://tools.ietf.org/html/rfc4422\">AUTH EXTERNAL (1.11.6).noneAuthentication is not required."},{"directive":"slice","defaultValue":"slice 0;","syntax":"slice size;","context":"http, server, location","description":"Sets the size of the slice.The zero value disables splitting responses into slices.Note that a too low value may result in excessive memory usageand opening a large number of files.In order for a subrequest to return the required range,the $slice_range variable should be<a href=\"ngx_http_proxy_module.html#proxy_set_header\">passed tothe proxied server as the Range request header field.If<a href=\"ngx_http_proxy_module.html#proxy_cache\">cachingis enabled, $slice_range should be added to the<a href=\"ngx_http_proxy_module.html#proxy_cache_key\">cache keyand caching of responses with 206 status code should be<a href=\"ngx_http_proxy_module.html#proxy_cache_valid\">enabled."},{"directive":"set_real_ip_from","defaultValue":"—","syntax":"set_real_ip_from     address |    CIDR |    unix:;","context":"stream, server","description":"Defines trusted addresses that are known to send correctreplacement addresses.If the special value unix: is specified,all UNIX-domain sockets will be trusted."},{"directive":"set_real_ip_from","defaultValue":"—","syntax":"set_real_ip_from     address |    CIDR |    unix:;","context":"http, server, location","description":"Defines trusted addresses that are known to send correctreplacement addresses.If the special value unix: is specified,all UNIX-domain sockets will be trusted.Trusted addresses may also be specified using a hostname (1.13.1). IPv6 addresses are supported starting from versions 1.3.0 and 1.2.1."},{"directive":"set","defaultValue":"—","syntax":"set $variable value;","context":"server, location, if","description":"Sets a value for the specified variable.The value can contain text, variables, and their combination."},{"directive":"session_log_zone","defaultValue":"—","syntax":"session_log_zone     path    zone=name:size    [format=format]    [timeout=time]    [id=id]    [md5=md5];","context":"http","description":"Sets the path to a log file and configures the shared memory zone that is usedto store currently active sessions.A session is considered active for as long as the time elapsed sincethe last request in the session does not exceed the specifiedtimeout (by default, 30 seconds).Once a session is no longer active, it is written to the log.The id parameter identifies thesession to which a request is mapped.The id parameter is set to the hexadecimal representationof an MD5 hash (for example, obtained from a cookie using variables).If this parameter is not specified or does not represent the validMD5 hash, nginx computes the MD5 hash from the value ofthe md5 parameter and creates a new session using this hash.Both the id and md5 parameterscan contain variables.The format parameter sets the custom session logformat configured by the session_log_format directive.If format is not specified, the predefined“combined” format is used."},{"directive":"session_log_format","defaultValue":"session_log_format combined \"...\";","syntax":"session_log_format     name    string ...;","context":"http","description":"Specifies the output format of a log.The value of the $body_bytes_sent variable is aggregated acrossall requests in a session.The values of all other variables available for logging correspond to thefirst request in a session."},{"directive":"session_log","defaultValue":"session_log off;","syntax":"session_log name | off;","context":"http, server, location","description":"Enables the use of the specified session log.The special value off cancels allsession_log directives inherited from the previousconfiguration level."},{"directive":"server_tokens","defaultValue":"server_tokens on;","syntax":"server_tokens     on |    off |    build |    string;","context":"http, server, location","description":"Enables or disables emitting nginx version on error pages and in the“Server” response header field."},{"directive":"server_names_hash_max_size","defaultValue":"server_names_hash_max_size 512;","syntax":"server_names_hash_max_size size;","context":"http","description":"Sets the maximum size of the server names hash tables.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"server_names_hash_bucket_size","defaultValue":"server_names_hash_bucket_size 32|64|128;","syntax":"server_names_hash_bucket_size size;","context":"http","description":"Sets the bucket size for the server names hash tables.The default value depends on the size of the processor’s cache line.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"server_name_in_redirect","defaultValue":"server_name_in_redirect off;","syntax":"server_name_in_redirect on | off;","context":"http, server, location","description":"Enables or disables the use of the primary server name, specified by theserver_name directive,in absolute redirects issued by nginx.When the use of the primary server name is disabled, the name from the“Host” request header field is used.If this field is not present, the IP address of the server is used.The use of a port in redirects is controlled bythe port_in_redirect directive."},{"directive":"server_name","defaultValue":"server_name hostname;","syntax":"server_name name;","context":"mail, server","description":"Sets the server name that is used: in the initial POP3/SMTP server greeting;in the salt during the SASL CRAM-MD5 authentication;in the EHLO command when connecting to the SMTP backend,if the passing of the<a href=\"ngx_mail_proxy_module.html#xclient\">XCLIENT commandis enabled. If the directive is not specified, the machine’s hostname is used."},{"directive":"server_name","defaultValue":"server_name \"\";","syntax":"server_name name ...;","context":"server","description":"Sets names of a virtual server, for example: server {    server_name example.com www.example.com;} The first name becomes the primary server name.Server names can include an asterisk (“*”)replacing the first or last part of a name: server {    server_name example.com *.example.com www.example.*;} Such names are called wildcard names.The first two of the names mentioned above can be combined in one: server {    server_name .example.com;} It is also possible to use regular expressions in server names,preceding the name with a tilde (“~”): server {    server_name www.example.com ~^www\\d+\\.example\\.com$;} Regular expressions can contain captures (0.7.40) that can laterbe used in other directives: server {    server_name ~^(www\\.)?(.+)$;    location / {        root /sites/$2;    }}server {    server_name _;    location / {        root /sites/default;    }} Named captures in regular expressions create variables (0.8.25)that can later be used in other directives: server {    server_name ~^(www\\.)?(?&lt;domain&gt;.+)$;    location / {        root /sites/$domain;    }}server {    server_name _;    location / {        root /sites/default;    }} If the directive’s parameter is set to “$hostname” (0.9.4), themachine’s hostname is inserted.It is also possible to specify an empty server name (0.7.11): server {    server_name www.example.com \"\";} It allows this server to process requests without the “Host”header field — instead of the default server — for the given address:port pair.This is the default setting. Before 0.8.48, the machine’s hostname was used by default. During searching for a virtual server by name,if the name matches more than one of the specified variants,(e.g. both a wildcard name and regular expression match), the first matchingvariant will be chosen, in the following order of priority: the exact namethe longest wildcard name starting with an asterisk,e.g. “*.example.com”the longest wildcard name ending with an asterisk,e.g. “mail.*”the first matching regular expression(in order of appearance in the configuration file) Detailed description of server names is provided in a separate<a href=\"server_names.html\">Server names document."},{"directive":"server","defaultValue":"—","syntax":"server address [parameters];","context":"upstream","description":"Defines the address and other parametersof a server.The address can be specified as a domain name or IP addresswith an obligatory port, or as a UNIX-domain socket pathspecified after the “unix:” prefix.A domain name that resolves to several IP addresses definesmultiple servers at once.The following parameters can be defined: weight=numbersets the weight of the server, by default, 1.max_conns=numberlimits the maximum number of simultaneousconnections to the proxied server (1.11.5).Default value is zero, meaning there is no limit.If the server group does not reside in the shared memory,the limitation works per each worker process.Prior to version 1.11.5, this parameter was available as part of our<a href=\"http://nginx.com/products/\">commercial subscription.max_fails=numbersets the number of unsuccessful attempts to communicate with the serverthat should happen in the duration set by the fail_timeoutparameter to consider the server unavailable for a duration also set by thefail_timeout parameter.By default, the number of unsuccessful attempts is set to 1.The zero value disables the accounting of attempts.Here, an unsuccessful attempt is an error or timeoutwhile establishing a connection with the server.fail_timeout=timesetsthe time during which the specified number of unsuccessful attempts tocommunicate with the server should happen to consider the server unavailable;and the period of time the server will be considered unavailable.By default, the parameter is set to 10 seconds.backupmarks the server as a backup server.Connections to the backup server will be passedwhen the primary servers are unavailable.downmarks the server as permanently unavailable. Additionally,the following parameters are available as part of our<a href=\"http://nginx.com/products/\">commercial subscription: resolvemonitors changes of the IP addressesthat correspond to a domain name of the server,and automatically modifies the upstream configurationwithout the need of restarting nginx.The server group must reside in the shared memory.In order for this parameter to work,the <a href=\"ngx_stream_core_module.html#resolver\">resolver directivemust be specified in the<a href=\"ngx_stream_core_module.html#stream\">stream block.Example: stream {    resolver 10.0.0.1;    upstream u {        zone ...;        ...        server example.com:12345 resolve;    }} service=nameenables resolving of DNS<a href=\"https://tools.ietf.org/html/rfc2782\">SRVrecords and sets the service name (1.9.13).In order for this parameter to work, it is necessary to specifythe resolve parameter for the serverand specify a hostname without a port number.If the service name does not contain a dot (“.”), thenthe <a href=\"https://tools.ietf.org/html/rfc2782\">RFC-compliant nameis constructedand the TCP protocol is added to the service prefix.For example, to look up the_http._tcp.backend.example.com SRV record,it is necessary to specify the directive: server backend.example.com service=http resolve; If the service name contains one or more dots, then the name is constructedby joining the service prefix and the server name.For example, to look up the _http._tcp.backend.example.comand server1.backend.example.com SRV records,it is necessary to specify the directives: server backend.example.com service=_http._tcp resolve;server example.com service=server1.backend resolve; Highest-priority SRV records(records with the same lowest-number priority value)are resolved as primary servers,the rest of SRV records are resolved as backup servers.If the backup parameter is specified for the server,high-priority SRV records are resolved as backup servers,the rest of SRV records are ignored.slow_start=timesets the time during which the server will recover its weightfrom zero to a nominal value, when unhealthy server becomes<a href=\"ngx_stream_upstream_hc_module.html#health_check\">healthy,or when the server becomes available after a period of timeit was considered unavailable.Default value is zero, i.e. slow start is disabled.The parameter cannot be used along with thehash load balancing method.  If there is only a single server in a group, max_fails,fail_timeout and slow_start parametersare ignored, and such a server will never be considered unavailable."},{"directive":"server","defaultValue":"—","syntax":"server { ... }","context":"stream","description":"Sets the configuration for a server."},{"directive":"server","defaultValue":"—","syntax":"server { ... }","context":"mail","description":"Sets the configuration for a server."},{"directive":"server","defaultValue":"—","syntax":"server address [parameters];","context":"upstream","description":"Defines the address and other parametersof a server.The address can be specified as a domain name or IP address,with an optional port, or as a UNIX-domain socket pathspecified after the “unix:” prefix.If a port is not specified, the port 80 is used.A domain name that resolves to several IP addresses definesmultiple servers at once.The following parameters can be defined: weight=numbersets the weight of the server, by default, 1.max_conns=numberlimits the maximum number of simultaneous activeconnections to the proxied server (1.11.5).Default value is zero, meaning there is no limit.If the server group does not reside in the shared memory,the limitation works per each worker process.If idle keepalive connections,multiple <a href=\"../ngx_core_module.html#worker_processes\">workers,and the shared memory are enabled,the total number of active and idle connections to the proxied servermay exceed the max_conns value.Since version 1.5.9 and prior to version 1.11.5,this parameter was available as part of our<a href=\"http://nginx.com/products/\">commercial subscription.max_fails=numbersets the number of unsuccessful attempts to communicate with the serverthat should happen in the duration set by the fail_timeoutparameter to consider the server unavailable for a duration also set by thefail_timeout parameter.By default, the number of unsuccessful attempts is set to 1.The zero value disables the accounting of attempts.What is considered an unsuccessful attempt is defined by the<a href=\"ngx_http_proxy_module.html#proxy_next_upstream\">proxy_next_upstream,<a href=\"ngx_http_fastcgi_module.html#fastcgi_next_upstream\">fastcgi_next_upstream,<a href=\"ngx_http_uwsgi_module.html#uwsgi_next_upstream\">uwsgi_next_upstream,<a href=\"ngx_http_scgi_module.html#scgi_next_upstream\">scgi_next_upstream, and<a href=\"ngx_http_memcached_module.html#memcached_next_upstream\">memcached_next_upstreamdirectives.fail_timeout=timesetsthe time during which the specified number of unsuccessful attempts tocommunicate with the server should happen to consider the server unavailable;and the period of time the server will be considered unavailable.By default, the parameter is set to 10 seconds.backupmarks the server as a backup server.It will be passed requests when the primary servers are unavailable.downmarks the server as permanently unavailable. Additionally,the following parameters are available as part of our<a href=\"http://nginx.com/products/\">commercial subscription: resolvemonitors changes of the IP addressesthat correspond to a domain name of the server,and automatically modifies the upstream configurationwithout the need of restarting nginx (1.5.12).The server group must reside in the shared memory.In order for this parameter to work,the <a href=\"ngx_http_core_module.html#resolver\">resolver directivemust be specified in the<a href=\"ngx_http_core_module.html#http\">http block.Example: http {    resolver 10.0.0.1;    upstream u {        zone ...;        ...        server example.com resolve;    }} route=stringsets the server route name.service=nameenables resolving of DNS<a href=\"https://tools.ietf.org/html/rfc2782\">SRVrecords and sets the service name (1.9.13).In order for this parameter to work, it is necessary to specifythe resolve parameter for the serverand specify a hostname without a port number.If the service name does not contain a dot (“.”), thenthe <a href=\"https://tools.ietf.org/html/rfc2782\">RFC-compliant nameis constructedand the TCP protocol is added to the service prefix.For example, to look up the_http._tcp.backend.example.com SRV record,it is necessary to specify the directive: server backend.example.com service=http resolve; If the service name contains one or more dots, then the name is constructedby joining the service prefix and the server name.For example, to look up the _http._tcp.backend.example.comand server1.backend.example.com SRV records,it is necessary to specify the directives: server backend.example.com service=_http._tcp resolve;server example.com service=server1.backend resolve; Highest-priority SRV records(records with the same lowest-number priority value)are resolved as primary servers,the rest of SRV records are resolved as backup servers.If the backup parameter is specified for the server,high-priority SRV records are resolved as backup servers,the rest of SRV records are ignored.slow_start=timesets the time during which the server will recover its weightfrom zero to a nominal value, when unhealthy server becomes<a href=\"ngx_http_upstream_hc_module.html#health_check\">healthy,or when the server becomes available after a period of timeit was considered unavailable.Default value is zero, i.e. slow start is disabled.The parameter cannot be used along with thehash and ip_hash load balancing methods.  If there is only a single server in a group, max_fails,fail_timeout and slow_start parametersare ignored, and such a server will never be considered unavailable."},{"directive":"server","defaultValue":"—","syntax":"server { ... }","context":"http","description":"Sets configuration for a virtual server.There is no clear separation between IP-based (based on the IP address)and name-based (based on the “Host” request header field)virtual servers.Instead, the listen directives describe alladdresses and ports that should accept connections for the server, and theserver_name directive lists all server names.Example configurations are provided in the“<a href=\"request_processing.html\">How nginx processes a request” document."},{"directive":"sendfile_max_chunk","defaultValue":"sendfile_max_chunk 0;","syntax":"sendfile_max_chunk size;","context":"http, server, location","description":"When set to a non-zero value, limits the amount of data that can betransferred in a single sendfile() call.Without the limit, one fast connection may seize the worker process entirely."},{"directive":"sendfile","defaultValue":"sendfile off;","syntax":"sendfile on | off;","context":"http, server, location, if in location","description":"Enables or disables the use ofsendfile().Starting from nginx 0.8.12 and FreeBSD 5.2.1,aio can be used to pre-load datafor sendfile(): location /video/ {    sendfile       on;    tcp_nopush     on;    aio            on;} In this configuration, sendfile() is called withthe SF_NODISKIO flag which causes it not to block on disk I/O,but, instead, report back that the data are not in memory.nginx then initiates an asynchronous data load by reading one byte.On the first read, the FreeBSD kernel loads the first 128K bytesof a file into memory, although next reads will only load data in 16K chunks.This can be changed using theread_ahead directive. Before version 1.7.11, pre-loading could be enabled withaio sendfile;."},{"directive":"send_timeout","defaultValue":"send_timeout 60s;","syntax":"send_timeout time;","context":"http, server, location","description":"Sets a timeout for transmitting a response to the client.The timeout is set only between two successive write operations,not for the transmission of the whole response.If the client does not receive anything within this time,the connection is closed."},{"directive":"send_lowat","defaultValue":"send_lowat 0;","syntax":"send_lowat size;","context":"http, server, location","description":"If the directive is set to a non-zero value, nginx will try to minimizethe number of send operations on client sockets by using eitherNOTE_LOWAT flag of the<a href=\"../events.html#kqueue\">kqueue methodor the SO_SNDLOWAT socket option.In both cases the specified size is used.This directive is ignored on Linux, Solaris, and Windows."},{"directive":"secure_link_secret","defaultValue":"—","syntax":"secure_link_secret word;","context":"location","description":"Defines a secret word used to check authenticityof requested links.The full URI of a requested link looks as follows: /prefix/hash/link where hash is a hexadecimal representation of theMD5 hash computed for the concatenation of the link and secret word,and prefix is an arbitrary string without slashes.If the requested link passes the authenticity check,the $secure_link variable is set to the linkextracted from the request URI.Otherwise, the $secure_link variableis set to an empty string.Example: location /p/ {    secure_link_secret secret;    if ($secure_link = \"\") {        return 403;    }    rewrite ^ /secure/$secure_link;}location /secure/ {    internal;} A request of “/p/5e814704a28d9bc1914ff19fa0c4a00a/link”will be internally redirected to“/secure/link”.On UNIX, the hash value for this example can be obtained as: echo -n 'linksecret' | openssl md5 -hex"},{"directive":"secure_link_md5","defaultValue":"—","syntax":"secure_link_md5 expression;","context":"http, server, location","description":"Defines an expression for which the MD5 hash value willbe computed and compared with the value passed in a request.The expression should contain the secured part of a link (resource)and a secret ingredient.If the link has a limited lifetime,the expression should also contain $secure_link_expires.To prevent unauthorized access, the expression may contain someinformation about the client, such as its address and browser version.Example: location /s/ {    secure_link $arg_md5,$arg_expires;    secure_link_md5 \"$secure_link_expires$uri$remote_addr secret\";    if ($secure_link = \"\") {        return 403;    }    if ($secure_link = \"0\") {        return 410;    }    ...} The“/s/link?md5=_e4Nc3iduzkWRm01TBBNYw&amp;expires=2147483647”linkrestricts access to “/s/link” for the client with theIP address 127.0.0.1.The link also has the limited lifetime until January 19, 2038 (GMT).On UNIX, the md5 request argument value can be obtained as: echo -n '2147483647/s/link127.0.0.1 secret' | \\    openssl md5 -binary | openssl base64 | tr +/ -_ | tr -d ="},{"directive":"secure_link","defaultValue":"—","syntax":"secure_link expression;","context":"http, server, location","description":"Defines a string with variables from which thechecksum value and lifetime of a link will be extracted.Variables used in an expression are usually associatedwith a request; see example below.The checksum value extracted from the string is compared withthe MD5 hash value of the expression defined by thesecure_link_md5 directive.If the checksums are different, the $secure_link variableis set to an empty string.If the checksums are the same, the link lifetime is checked.If the link has a limited lifetime and the time has expired,the $secure_link variable is set to “0”.Otherwise, it is set to “1”.The MD5 hash value passed in a request is encoded in<a href=\"https://tools.ietf.org/html/rfc4648#section-5\">base64url.If a link has a limited lifetime, the expiration timeis set in seconds since Epoch (Thu, 01 Jan 1970 00:00:00 GMT).The value is specified in the expression after the MD5 hash,and is separated by a comma.The expiration time passed in a request is available throughthe $secure_link_expires variable for a use inthe secure_link_md5 directive.If the expiration time is not specified, a link has the unlimitedlifetime."},{"directive":"scgi_temp_path","defaultValue":"","syntax":"","context":"","description":""},{"directive":"scgi_temp_file_write_size","defaultValue":"scgi_temp_file_write_size 8k|16k;","syntax":"scgi_temp_file_write_size size;","context":"http, server, location","description":"Limits the size of data written to a temporary fileat a time, when buffering of responses from the SCGI serverto temporary files is enabled.By default, size is limited by two buffers set by thescgi_buffer_size and scgi_buffers directives.The maximum size of a temporary file is set by thescgi_max_temp_file_size directive."},{"directive":"scgi_store_access","defaultValue":"scgi_store_access user:rw;","syntax":"scgi_store_access users:permissions ...;","context":"http, server, location","description":"Sets access permissions for newly created files and directories, e.g.: scgi_store_access user:rw group:rw all:r; If any group or all access permissionsare specified then user permissions may be omitted: scgi_store_access group:rw all:r;"},{"directive":"scgi_store","defaultValue":"scgi_store off;","syntax":"scgi_store     on |    off |    string;","context":"http, server, location","description":"Enables saving of files to a disk.The on parameter saves files with pathscorresponding to the directives<a href=\"ngx_http_core_module.html#alias\">alias or<a href=\"ngx_http_core_module.html#root\">root.The off parameter disables saving of files.In addition, the file name can be set explicitly using thestring with variables: scgi_store /data/www$original_uri; The modification time of files is set according to the received“Last-Modified” response header field.The response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the persistent storecan be put on different file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both saved files and adirectory holding temporary files, set by the scgi_temp_pathdirective, are put on the same file system.This directive can be used to create local copies of static unchangeablefiles, e.g.: location /images/ {    root              /data/www;    error_page        404 = /fetch$uri;}location /fetch/ {    internal;    scgi_pass         backend:9000;    ...    scgi_store        on;    scgi_store_access user:rw group:rw all:r;    scgi_temp_path    /data/temp;    alias             /data/www/;}"},{"directive":"scgi_send_timeout","defaultValue":"scgi_send_timeout 60s;","syntax":"scgi_send_timeout time;","context":"http, server, location","description":"Sets a timeout for transmitting a request to the SCGI server.The timeout is set only between two successive write operations,not for the transmission of the whole request.If the SCGI server does not receive anything within this time,the connection is closed."},{"directive":"scgi_request_buffering","defaultValue":"scgi_request_buffering on;","syntax":"scgi_request_buffering on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.11.            Enables or disables buffering of a client request body.When buffering is enabled, the entire request body is<a href=\"ngx_http_core_module.html#client_body_buffer_size\">readfrom the client before sending the request to an SCGI server.When buffering is disabled, the request body is sent to the SCGI serverimmediately as it is received.In this case, the request cannot be passed to thenext serverif nginx already started sending the request body.When HTTP/1.1 chunked transfer encoding is usedto send the original request body,the request body will be buffered regardless of the directive value."},{"directive":"scgi_read_timeout","defaultValue":"scgi_read_timeout 60s;","syntax":"scgi_read_timeout time;","context":"http, server, location","description":"Defines a timeout for reading a response from the SCGI server.The timeout is set only between two successive read operations,not for the transmission of the whole response.If the SCGI server does not transmit anything within this time,the connection is closed."},{"directive":"scgi_pass_request_headers","defaultValue":"scgi_pass_request_headers on;","syntax":"scgi_pass_request_headers on | off;","context":"http, server, location","description":"Indicates whether the header fields of the original request are passedto the SCGI server.See also the scgi_pass_request_body directive."},{"directive":"scgi_pass_request_body","defaultValue":"scgi_pass_request_body on;","syntax":"scgi_pass_request_body on | off;","context":"http, server, location","description":"Indicates whether the original request body is passedto the SCGI server.See also the scgi_pass_request_headers directive."},{"directive":"scgi_pass_header","defaultValue":"—","syntax":"scgi_pass_header field;","context":"http, server, location","description":"Permits passing otherwise disabled headerfields from an SCGI server to a client."},{"directive":"scgi_pass","defaultValue":"—","syntax":"scgi_pass address;","context":"location, if in location","description":"Sets the address of an SCGI server.The address can be specified as a domain name or IP address,and a port: scgi_pass localhost:9000; or as a UNIX-domain socket path: scgi_pass unix:/tmp/scgi.socket; If a domain name resolves to several addresses, all of them will beused in a round-robin fashion.In addition, an address can be specified as a<a href=\"ngx_http_upstream_module.html\">server group.Parameter value can contain variables.In this case, if an address is specified as a domain name,the name is searched among the described<a href=\"ngx_http_upstream_module.html\">server groups,and, if not found, is determined using a<a href=\"ngx_http_core_module.html#resolver\">resolver."},{"directive":"scgi_param","defaultValue":"—","syntax":"scgi_param     parameter value    [if_not_empty];","context":"http, server, location","description":"Sets a parameter that should be passed to the SCGI server.The value can contain text, variables, and their combination.These directives are inherited from the previous level if andonly if there are noscgi_paramdirectives defined on the current level.Standard<a href=\"https://tools.ietf.org/html/rfc3875#section-4.1\">CGIenvironment variablesshould be provided as SCGI headers, see the scgi_params fileprovided in the distribution: location / {    include scgi_params;    ...} If the directive is specified with if_not_empty (1.1.11) thensuch a parameter will not be passed to the server until its value is not empty: scgi_param HTTPS $https if_not_empty;"},{"directive":"scgi_no_cache","defaultValue":"—","syntax":"scgi_no_cache string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be saved to a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be saved: scgi_no_cache $cookie_nocache $arg_nocache$arg_comment;scgi_no_cache $http_pragma    $http_authorization; Can be used along with the scgi_cache_bypass directive."},{"directive":"scgi_next_upstream_tries","defaultValue":"scgi_next_upstream_tries 0;","syntax":"scgi_next_upstream_tries number;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the number of possible tries for passing a request to thenext server.The 0 value turns off this limitation."},{"directive":"scgi_next_upstream_timeout","defaultValue":"scgi_next_upstream_timeout 0;","syntax":"scgi_next_upstream_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the time during which a request can be passed to thenext server.The 0 value turns off this limitation."},{"directive":"scgi_next_upstream","defaultValue":"scgi_next_upstream error timeout;","syntax":"scgi_next_upstream     error |    timeout |    invalid_header |    http_500 |    http_503 |    http_403 |    http_404 |    http_429 |    non_idempotent |    off    ...;","context":"http, server, location","description":"Specifies in which cases a request should be passed to the next server: erroran error occurred while establishing a connection with theserver, passing a request to it, or reading the response header;timeouta timeout has occurred while establishing a connection with theserver, passing a request to it, or reading the response header;invalid_headera server returned an empty or invalid response;http_500a server returned a response with the code 500;http_503a server returned a response with the code 503;http_403a server returned a response with the code 403;http_404a server returned a response with the code 404;http_429a server returned a response with the code 429 (1.11.13);non_idempotentnormally, requests with a<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotentmethod(POST, LOCK, PATCH)are not passed to the next serverif a request has been sent to an upstream server (1.9.13);enabling this option explicitly allows retrying such requests;offdisables passing a request to the next server. One should bear in mind that passing a request to the next server isonly possible if nothing has been sent to a client yet.That is, if an error or timeout occurs in the middle of thetransferring of a response, fixing this is impossible.The directive also defines what is considered an<a href=\"ngx_http_upstream_module.html#max_fails\">unsuccessfulattempt of communication with a server.The cases of error, timeout andinvalid_header are always considered unsuccessful attempts,even if they are not specified in the directive.The cases of http_500, http_503,and http_429 areconsidered unsuccessful attempts only if they are specified in the directive.The cases of http_403 and http_404are never considered unsuccessful attempts.Passing a request to the next server can be limited bythe number of triesand by time."},{"directive":"scgi_max_temp_file_size","defaultValue":"scgi_max_temp_file_size 1024m;","syntax":"scgi_max_temp_file_size size;","context":"http, server, location","description":"When buffering of responses from the SCGIserver is enabled, and the whole response does not fit into the buffersset by the scgi_buffer_size and scgi_buffersdirectives, a part of the response can be saved to a temporary file.This directive sets the maximum size of the temporary file.The size of data written to the temporary file at a time is setby the scgi_temp_file_write_size directive.The zero value disables buffering of responses to temporary files. This restriction does not apply to responsesthat will be cachedor stored on disk."},{"directive":"scgi_limit_rate","defaultValue":"scgi_limit_rate 0;","syntax":"scgi_limit_rate rate;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Limits the speed of reading the response from the SCGI server.The rate is specified in bytes per second.The zero value disables rate limiting.The limit is set per a request, and so if nginx simultaneously openstwo connections to the SCGI server,the overall rate will be twice as much as the specified limit.The limitation works only ifbuffering of responses from the SCGIserver is enabled."},{"directive":"scgi_intercept_errors","defaultValue":"scgi_intercept_errors off;","syntax":"scgi_intercept_errors on | off;","context":"http, server, location","description":"Determines whether an SCGI server responses with codes greater than or equalto 300 should be passed to a clientor be intercepted and redirected to nginx for processingwith the <a href=\"ngx_http_core_module.html#error_page\">error_page directive."},{"directive":"scgi_ignore_headers","defaultValue":"—","syntax":"scgi_ignore_headers field ...;","context":"http, server, location","description":"Disables processing of certain response header fields from the SCGI server.The following fields can be ignored: “X-Accel-Redirect”,“X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6),“X-Accel-Buffering” (1.1.6),“X-Accel-Charset” (1.1.6), “Expires”,“Cache-Control”, “Set-Cookie” (0.8.44),and “Vary” (1.7.7).If not disabled, processing of these header fields has the followingeffect: “X-Accel-Expires”, “Expires”,“Cache-Control”, “Set-Cookie”,and “Vary”set the parameters of response caching;“X-Accel-Redirect” performs an<a href=\"ngx_http_core_module.html#internal\">internalredirect to the specified URI;“X-Accel-Limit-Rate” sets the<a href=\"ngx_http_core_module.html#limit_rate\">ratelimit for transmission of a response to a client;“X-Accel-Buffering” enables or disablesbuffering of a response;“X-Accel-Charset” sets the desired<a href=\"ngx_http_charset_module.html#charset\">charsetof a response."},{"directive":"scgi_ignore_client_abort","defaultValue":"scgi_ignore_client_abort off;","syntax":"scgi_ignore_client_abort on | off;","context":"http, server, location","description":"Determines whether the connection with an SCGI server should beclosed when a client closes the connection without waitingfor a response."},{"directive":"scgi_hide_header","defaultValue":"—","syntax":"scgi_hide_header field;","context":"http, server, location","description":"By default,nginx does not pass the header fields “Status” and“X-Accel-...” from the response of an SCGIserver to a client.The scgi_hide_header directive sets additional fieldsthat will not be passed.If, on the contrary, the passing of fields needs to be permitted,the scgi_pass_header directive can be used."},{"directive":"scgi_force_ranges","defaultValue":"scgi_force_ranges off;","syntax":"scgi_force_ranges on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Enables byte-range supportfor both cached and uncached responses from the SCGI serverregardless of the “Accept-Ranges” field in these responses."},{"directive":"scgi_connect_timeout","defaultValue":"scgi_connect_timeout 60s;","syntax":"scgi_connect_timeout time;","context":"http, server, location","description":"Defines a timeout for establishing a connection with an SCGI server.It should be noted that this timeout cannot usually exceed 75 seconds."},{"directive":"scgi_cache_valid","defaultValue":"—","syntax":"scgi_cache_valid [code ...] time;","context":"http, server, location","description":"Sets caching time for different response codes.For example, the following directives scgi_cache_valid 200 302 10m;scgi_cache_valid 404      1m; set 10 minutes of caching for responses with codes 200 and 302and 1 minute for responses with code 404.If only caching time is specified scgi_cache_valid 5m; then only 200, 301, and 302 responses are cached.In addition, the any parameter can be specifiedto cache any responses: scgi_cache_valid 200 302 10m;scgi_cache_valid 301      1h;scgi_cache_valid any      1m; Parameters of caching can also be set directlyin the response header.This has higher priority than setting of caching time using the directive. The “X-Accel-Expires” header field sets caching time of aresponse in seconds.The zero value disables caching for a response.If the value starts with the @ prefix, it sets an absolutetime in seconds since Epoch, up to which the response may be cached.If the header does not include the “X-Accel-Expires” field,parameters of caching may be set in the header fields“Expires” or “Cache-Control”.If the header includes the “Set-Cookie” field, such aresponse will not be cached.If the header includes the “Vary” fieldwith the special value “*”, such aresponse will not be cached (1.7.7).If the header includes the “Vary” fieldwith another value, such a response will be cachedtaking into account the corresponding request header fields (1.7.7). Processing of one or more of these response header fields can be disabledusing the scgi_ignore_headers directive."},{"directive":"scgi_cache_use_stale","defaultValue":"scgi_cache_use_stale off;","syntax":"scgi_cache_use_stale     error |    timeout |    invalid_header |    updating |    http_500 |    http_503 |    http_403 |    http_404 |    http_429 |    off    ...;","context":"http, server, location","description":"Determines in which cases a stale cached response can be usedwhen an error occurs during communication with the SCGI server.The directive’s parameters match the parameters of thescgi_next_upstream directive.The error parameter also permitsusing a stale cached response if an SCGI server to process a requestcannot be selected."},{"directive":"scgi_cache_revalidate","defaultValue":"scgi_cache_revalidate off;","syntax":"scgi_cache_revalidate on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Enables revalidation of expired cache items using conditional requests withthe “If-Modified-Since” and “If-None-Match”header fields."},{"directive":"scgi_cache_purge","defaultValue":"—","syntax":"scgi_cache_purge string ...;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Defines conditions under which the request will be considered a cachepurge request.If at least one value of the string parameters is not empty and is not equalto “0” then the cache entry with a correspondingcache key is removed.The result of successful operation is indicated by returningthe 204 (No Content) response.If the cache key of a purge request endswith an asterisk (“*”), all cache entries matching thewildcard key will be removed from the cache.However, these entries will remain on the disk until they are deletedfor either inactivity,or processed by the cache purger (1.7.12),or a client attempts to access them.Example configuration: scgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;map $request_method $purge_method {    PURGE   1;    default 0;}server {    ...    location / {        scgi_pass        backend;        scgi_cache       cache_zone;        scgi_cache_key   $uri;        scgi_cache_purge $purge_method;    }}  This functionality is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"scgi_cache_path","defaultValue":"—","syntax":"scgi_cache_path     path    [levels=levels]    [use_temp_path=on|off]    keys_zone=name:size    [inactive=time]    [max_size=size]    [manager_files=number]    [manager_sleep=time]    [manager_threshold=time]    [loader_files=number]    [loader_sleep=time]    [loader_threshold=time]    [purger=on|off]    [purger_files=number]    [purger_sleep=time]    [purger_threshold=time];","context":"http","description":"Sets the path and other parameters of a cache.Cache data are stored in files.The file name in a cache is a result ofapplying the MD5 function to thecache key.The levels parameter defines hierarchy levels of a cache:from 1 to 3, each level accepts values 1 or 2.For example, in the following configuration scgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m; file names in a cache will look like this: /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c A cached response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the cache can be put ondifferent file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both cache and a directoryholding temporary filesare put on the same file system.A directory for temporary files is set based onthe use_temp_path parameter (1.7.10).If this parameter is omitted or set to the value on,the directory set by the scgi_temp_path directivefor the given location will be used.If the value is set to off,temporary files will be put directly in the cache directory.In addition, all active keys and information about data are storedin a shared memory zone, whose name and sizeare configured by the keys_zone parameter.One megabyte zone can store about 8 thousand keys.Cached data that are not accessed during the time specified by theinactive parameter get removed from the cacheregardless of their freshness.By default, inactive is set to 10 minutes.The special “cache manager” process monitors the maximum cache size setby the max_size parameter.When this size is exceeded, it removes the least recently used data.The data is removed in iterations configured bymanager_files,manager_threshold, andmanager_sleep parameters (1.11.5).During one iteration no more than manager_files itemsare deleted (by default, 100).The duration of one iteration is limited by themanager_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the manager_sleepparameter (by default, 50 milliseconds) is made.A minute after the start the special “cache loader” process is activated.It loads information about previously cached data stored on file systeminto a cache zone.The loading is also done in iterations.During one iteration no more than loader_files itemsare loaded (by default, 100).Besides, the duration of one iteration is limited by theloader_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the loader_sleepparameter (by default, 50 milliseconds) is made.Additionally,the following parameters are available as part of our<a href=\"http://nginx.com/products/\">commercial subscription: purger=on|offInstructs whether cache entries that match awildcard keywill be removed from the disk by the cache purger (1.7.12).Setting the parameter to on(default is off)will activate the “cache purger” process thatpermanently iterates through all cache entriesand deletes the entries that match the wildcard key.purger_files=numberSets the number of items that will be scanned during one iteration (1.7.12).By default, purger_files is set to 10.purger_threshold=numberSets the duration of one iteration (1.7.12).By default, purger_threshold is set to 50 milliseconds.purger_sleep=numberSets a pause between iterations (1.7.12).By default, purger_sleep is set to 50 milliseconds.  In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed.Previously cached responses will be considered invalidafter upgrading to a newer nginx version."},{"directive":"scgi_cache_min_uses","defaultValue":"scgi_cache_min_uses 1;","syntax":"scgi_cache_min_uses number;","context":"http, server, location","description":"Sets the number of requests after which the responsewill be cached."},{"directive":"scgi_cache_methods","defaultValue":"scgi_cache_methods GET HEAD;","syntax":"scgi_cache_methods     GET |    HEAD |    POST    ...;","context":"http, server, location","description":"If the client request method is listed in this directive thenthe response will be cached.“GET” and “HEAD” methods are alwaysadded to the list, though it is recommended to specify them explicitly.See also the scgi_no_cache directive."},{"directive":"scgi_cache_max_range_offset","defaultValue":"—","syntax":"scgi_cache_max_range_offset number;","context":"http, server, location","description":"This directive appeared in version 1.11.6.            Sets an offset in bytes for byte-range requests.If the range is beyond the offset,the range request will be passed to the SCGI serverand the response will not be cached."},{"directive":"scgi_cache_lock_timeout","defaultValue":"scgi_cache_lock_timeout 5s;","syntax":"scgi_cache_lock_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            Sets a timeout for scgi_cache_lock.When the time expires,the request will be passed to the SCGI server,however, the response will not be cached. Before 1.7.8, the response could be cached."},{"directive":"scgi_cache_lock_age","defaultValue":"scgi_cache_lock_age 5s;","syntax":"scgi_cache_lock_age time;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            If the last request passed to the SCGI serverfor populating a new cache elementhas not completed for the specified time,one more request may be passed to the SCGI server."},{"directive":"scgi_cache_lock","defaultValue":"scgi_cache_lock off;","syntax":"scgi_cache_lock on | off;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            When enabled, only one request at a time will be allowed to populatea new cache element identified according to the scgi_cache_keydirective by passing a request to an SCGI server.Other requests of the same cache element will either waitfor a response to appear in the cache or the cache lock forthis element to be released, up to the time set by thescgi_cache_lock_timeout directive."},{"directive":"scgi_cache_key","defaultValue":"—","syntax":"scgi_cache_key string;","context":"http, server, location","description":"Defines a key for caching, for example scgi_cache_key localhost:9000$request_uri;"},{"directive":"scgi_cache_bypass","defaultValue":"—","syntax":"scgi_cache_bypass string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be taken from a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be taken from the cache: scgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;scgi_cache_bypass $http_pragma    $http_authorization; Can be used along with the scgi_no_cache directive."},{"directive":"scgi_cache_background_update","defaultValue":"scgi_cache_background_update off;","syntax":"scgi_cache_background_update on | off;","context":"http, server, location","description":"This directive appeared in version 1.11.10.            Allows starting a background subrequestto update an expired cache item,while a stale cached response is returned to the client.Note that it is necessary toallowthe usage of a stale cached response when it is being updated."},{"directive":"scgi_cache","defaultValue":"scgi_cache off;","syntax":"scgi_cache zone | off;","context":"http, server, location","description":"Defines a shared memory zone used for caching.The same zone can be used in several places.Parameter value can contain variables (1.7.9).The off parameter disables caching inheritedfrom the previous configuration level."},{"directive":"scgi_busy_buffers_size","defaultValue":"scgi_busy_buffers_size 8k|16k;","syntax":"scgi_busy_buffers_size size;","context":"http, server, location","description":"When buffering of responses from the SCGIserver is enabled, limits the total size of buffers thatcan be busy sending a response to the client while the response is notyet fully read.In the meantime, the rest of the buffers can be used for reading the responseand, if needed, buffering part of the response to a temporary file.By default, size is limited by the size of two buffers set by thescgi_buffer_size and scgi_buffers directives."},{"directive":"scgi_buffers","defaultValue":"scgi_buffers 8 4k|8k;","syntax":"scgi_buffers number size;","context":"http, server, location","description":"Sets the number and size of thebuffers used for reading a response from the SCGI server,for a single connection.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform."},{"directive":"scgi_buffering","defaultValue":"scgi_buffering on;","syntax":"scgi_buffering on | off;","context":"http, server, location","description":"Enables or disables buffering of responses from the SCGI server.When buffering is enabled, nginx receives a response from the SCGI serveras soon as possible, saving it into the buffers set by thescgi_buffer_size and scgi_buffers directives.If the whole response does not fit into memory, a part of it can be savedto a temporary file on the disk.Writing to temporary files is controlled by thescgi_max_temp_file_size andscgi_temp_file_write_size directives.When buffering is disabled, the response is passed to a client synchronously,immediately as it is received.nginx will not try to read the whole response from the SCGI server.The maximum size of the data that nginx can receive from the serverat a time is set by the scgi_buffer_size directive.Buffering can also be enabled or disabled by passing“yes” or “no” in the“X-Accel-Buffering” response header field.This capability can be disabled using thescgi_ignore_headers directive."},{"directive":"scgi_buffer_size","defaultValue":"scgi_buffer_size 4k|8k;","syntax":"scgi_buffer_size size;","context":"http, server, location","description":"Sets the size of the buffer used for reading the first partof the response received from the SCGI server.This part usually contains a small response header.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform.It can be made smaller, however."},{"directive":"scgi_bind","defaultValue":"—","syntax":"scgi_bind     address    [transparent] |    off;","context":"http, server, location","description":"Makes outgoing connections to an SCGI server originatefrom the specified local IP address with an optional port (1.11.2).Parameter value can contain variables (1.3.12).The special value off (1.3.12) cancels the effectof the scgi_bind directiveinherited from the previous configuration level, which allows thesystem to auto-assign the local IP address and port."},{"directive":"satisfy","defaultValue":"satisfy all;","syntax":"satisfy all | any;","context":"http, server, location","description":"Allows access if all (all) or at least one(any) of the<a href=\"ngx_http_access_module.html\">ngx_http_access_module,<a href=\"ngx_http_auth_basic_module.html\">ngx_http_auth_basic_module,<a href=\"ngx_http_auth_request_module.html\">ngx_http_auth_request_module,or<a href=\"ngx_http_auth_jwt_module.html\">ngx_http_auth_jwt_modulemodules allow access.Example: location / {    satisfy any;    allow 192.168.1.0/32;    deny  all;    auth_basic           \"closed site\";    auth_basic_user_file conf/htpasswd;}"},{"directive":"root","defaultValue":"root html;","syntax":"root path;","context":"http, server, location, if in location","description":"Sets the root directory for requests.For example, with the following configuration location /i/ {    root /data/w3;} The /data/w3/i/top.gif file will be sent in response tothe “/i/top.gif” request.The path value can contain variables,except $document_root and $realpath_root.A path to the file is constructed by merely adding a URI to the valueof the root directive.If a URI has to be modified, thealias directive should be used."},{"directive":"rewrite_log","defaultValue":"rewrite_log off;","syntax":"rewrite_log on | off;","context":"http, server, location, if","description":"Enables or disables logging of ngx_http_rewrite_modulemodule directives processing resultsinto the <a href=\"../ngx_core_module.html#error_log\">error_log atthe notice level."},{"directive":"rewrite","defaultValue":"—","syntax":"rewrite     regex    replacement    [flag];","context":"server, location, if","description":"If the specified regular expression matches a request URI, URI is changedas specified in the replacement string.The rewrite directives are executed sequentiallyin order of their appearance in the configuration file.It is possible to terminate further processing of the directives using flags.If a replacement string starts with “http://”,“https://”, or “$scheme”,the processing stops and the redirect is returned to a client.An optional flag parameter can be one of: laststops processing the current set ofngx_http_rewrite_module directives and startsa search for a new location matching the changed URI;breakstops processing the current set ofngx_http_rewrite_module directivesas with the break directive;redirectreturns a temporary redirect with the 302 code;used if a replacement string does not start with“http://”, “https://”,or “$scheme”;permanentreturns a permanent redirect with the 301 code. The full redirect URL is formed according to therequest scheme ($scheme) and the<a href=\"ngx_http_core_module.html#server_name_in_redirect\">server_name_in_redirect and<a href=\"ngx_http_core_module.html#port_in_redirect\">port_in_redirect directives.Example: server {    ...    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;    return  403;    ...} But if these directives are put inside the “/download/”location, the last flag should be replaced bybreak, or otherwise nginx will make 10 cycles andreturn the 500 error: location /download/ {    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  break;    return  403;} If a replacement string includes the new request arguments,the previous request arguments are appended after them.If this is undesired, putting a question mark at the end of a replacementstring avoids having them appended, for example: rewrite ^/users/(.*)$ /show?user=$1? last; If a regular expression includes the “}”or “;” characters, the whole expressions should be enclosedin single or double quotes."},{"directive":"return","defaultValue":"","syntax":"","context":"","description":""},{"directive":"return","defaultValue":"—","syntax":"return code [text];return code URL;return URL;","context":"server, location, if","description":"Stops processing and returns the specified code to a client.The non-standard code 444 closes a connection without sendinga response header.Starting from version 0.8.42, it is possible to specifyeither a redirect URL (for codes 301, 302, 303, 307, and 308)or the response body text (for other codes).A response body text and redirect URL can contain variables.As a special case, a redirect URL can be specified as a URIlocal to this server, in which case the full redirect URLis formed according to the request scheme ($scheme) and the<a href=\"ngx_http_core_module.html#server_name_in_redirect\">server_name_in_redirect and<a href=\"ngx_http_core_module.html#port_in_redirect\">port_in_redirect directives.In addition, a URL for temporary redirect with the code 302can be specified as the sole parameter.Such a parameter should start with the “http://”,“https://”, or “$scheme” string.A URL can contain variables. Only the following codes could be returned before version 0.7.51:204, 400, 402 — 406, 408, 410, 411, 413, 416, and 500 — 504.  The code 307 was not treated as a redirect until versions 1.1.16 and 1.0.13.  The code 308 was not treated as a redirect until version 1.13.0. See also the <a href=\"ngx_http_core_module.html#error_page\">error_page directive."},{"directive":"resolver_timeout","defaultValue":"resolver_timeout 30s;","syntax":"resolver_timeout time;","context":"stream, server","description":"This directive appeared in version 1.11.3.            Sets a timeout for name resolution, for example: resolver_timeout 5s;  Before version 1.11.3, this directive was available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"resolver_timeout","defaultValue":"resolver_timeout 30s;","syntax":"resolver_timeout time;","context":"mail, server","description":"Sets a timeout for DNS operations, for example: resolver_timeout 5s;"},{"directive":"resolver_timeout","defaultValue":"resolver_timeout 30s;","syntax":"resolver_timeout time;","context":"http, server, location","description":"Sets a timeout for name resolution, for example: resolver_timeout 5s;"},{"directive":"resolver","defaultValue":"—","syntax":"resolver     address ...    [valid=time]    [ipv6=on|off];","context":"stream, server","description":"This directive appeared in version 1.11.3.            Configures name servers used to resolve names of upstream serversinto addresses, for example: resolver 127.0.0.1 [::1]:5353; An address can be specified as a domain name or IP address,and an optional port.If port is not specified, the port 53 is used.Name servers are queried in a round-robin fashion.By default, nginx will look up both IPv4 and IPv6 addresses while resolving.If looking up of IPv6 addresses is not desired,the ipv6=off parameter can be specified.By default, nginx caches answers using the TTL value of a response.The optional valid parameter allows overriding it: resolver 127.0.0.1 [::1]:5353 valid=30s;  Before version 1.11.3, this directive was available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"resolver","defaultValue":"resolver off;","syntax":"resolver address ...[valid=time];resolver off;","context":"mail, server","description":"Configures name servers used to find the client’s hostnameto pass it to the<a href=\"ngx_mail_auth_http_module.html\">authentication server,and in the<a href=\"ngx_mail_proxy_module.html#xclient\">XCLIENTcommand when proxying SMTP.For example: resolver 127.0.0.1 [::1]:5353; An address can be specified as a domain name or IP address,and an optional port (1.3.1, 1.2.2).If port is not specified, the port 53 is used.Name servers are queried in a round-robin fashion. Before version 1.1.7, only a single name server could be configured.Specifying name servers using IPv6 addresses is supportedstarting from versions 1.3.1 and 1.2.2. By default, nginx caches answers using the TTL value of a response.An optional valid parameter allows overriding it: resolver 127.0.0.1 [::1]:5353 valid=30s;  Before version 1.1.9, tuning of caching time was not possible,and nginx always cached answers for the duration of 5 minutes. The special value off disables resolving."},{"directive":"resolver","defaultValue":"—","syntax":"resolver     address ...    [valid=time]    [ipv6=on|off];","context":"http, server, location","description":"Configures name servers used to resolve names of upstream serversinto addresses, for example: resolver 127.0.0.1 [::1]:5353; An address can be specified as a domain name or IP address,and an optional port (1.3.1, 1.2.2).If port is not specified, the port 53 is used.Name servers are queried in a round-robin fashion. Before version 1.1.7, only a single name server could be configured.Specifying name servers using IPv6 addresses is supportedstarting from versions 1.3.1 and 1.2.2. By default, nginx will look up both IPv4 and IPv6 addresses while resolving.If looking up of IPv6 addresses is not desired,the ipv6=off parameter can be specified. Resolving of names into IPv6 addresses is supportedstarting from version 1.5.8. By default, nginx caches answers using the TTL value of a response.An optional valid parameter allows overriding it: resolver 127.0.0.1 [::1]:5353 valid=30s;  Before version 1.1.9, tuning of caching time was not possible,and nginx always cached answers for the duration of 5 minutes.  To prevent DNS spoofing, it is recommendedconfiguring DNS servers in a properly secured trusted local network."},{"directive":"reset_timedout_connection","defaultValue":"reset_timedout_connection off;","syntax":"reset_timedout_connection on | off;","context":"http, server, location","description":"Enables or disables resetting timed out connections.The reset is performed as follows.Before closing a socket, theSO_LINGERoption is set on it with a timeout value of 0.When the socket is closed, TCP RST is sent to the client, and all memoryoccupied by this socket is released.This helps avoid keeping an already closed socket with filled buffersin a FIN_WAIT1 state for a long time.It should be noted that timed out keep-alive connections areclosed normally."},{"directive":"request_pool_size","defaultValue":"request_pool_size 4k;","syntax":"request_pool_size size;","context":"http, server","description":"Allows accurate tuning of per-request memory allocations.This directive has minimal impact on performanceand should not generally be used."},{"directive":"referer_hash_max_size","defaultValue":"referer_hash_max_size 2048;","syntax":"referer_hash_max_size size;","context":"server, location","description":"This directive appeared in version 1.0.5.            Sets the maximum size of the valid referers hash tables.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"referer_hash_bucket_size","defaultValue":"referer_hash_bucket_size 64;","syntax":"referer_hash_bucket_size size;","context":"server, location","description":"This directive appeared in version 1.0.5.            Sets the bucket size for the valid referers hash tables.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"recursive_error_pages","defaultValue":"recursive_error_pages off;","syntax":"recursive_error_pages on | off;","context":"http, server, location","description":"Enables or disables doing several redirects using theerror_pagedirective.The number of such redirects is limited."},{"directive":"real_ip_recursive","defaultValue":"real_ip_recursive off;","syntax":"real_ip_recursive on | off;","context":"http, server, location","description":"This directive appeared in versions 1.3.0 and 1.2.1.                                                                If recursive search is disabled, the original client address thatmatches one of the trusted addresses is replaced by the lastaddress sent in the request header field defined by thereal_ip_header directive.If recursive search is enabled, the original client address thatmatches one of the trusted addresses is replaced by the lastnon-trusted address sent in the request header field."},{"directive":"real_ip_header","defaultValue":"real_ip_header X-Real-IP;","syntax":"real_ip_header     field |    X-Real-IP |    X-Forwarded-For |    proxy_protocol;","context":"http, server, location","description":"Defines the request header fieldwhose value will be used to replace the client address.The request header field value that contains an optional portis also used to replace the client port (1.11.0).The address and port should be specified according to<a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986.The proxy_protocol parameter (1.5.12) changesthe client address to the one from the PROXY protocol header.The PROXY protocol must be previously enabled by setting theproxy_protocol parameterin the <a href=\"ngx_http_core_module.html#listen\">listen directive."},{"directive":"read_ahead","defaultValue":"read_ahead 0;","syntax":"read_ahead size;","context":"http, server, location","description":"Sets the amount of pre-reading for the kernel when working with file.On Linux, theposix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL)system call is used, and so the size parameter is ignored.On FreeBSD, thefcntl(O_READAHEAD,size)system call, supported since FreeBSD 9.0-CURRENT, is used.FreeBSD 7 has to be<a href=\"http://sysoev.ru/freebsd/patch.readahead.txt\">patched."},{"directive":"random_index","defaultValue":"","syntax":"","context":"","description":""},{"directive":"queue","defaultValue":"—","syntax":"queue number[timeout=time];","context":"upstream","description":"This directive appeared in version 1.5.12.            If an upstream server cannot be selected immediatelywhile processing a request,the request will be placed into the queue.The directive specifies the maximum number of requests that can be in the queueat the same time.If the queue is filled up,or the server to pass the request to cannot be selected withinthe time period specified in the timeout parameter,the 502 (Bad Gateway)error will be returned to the client.The default value of the timeout parameter is 60 seconds. When using load balancer methods other than the defaultround-robin method, it is necessary to activate them beforethe queue directive.  This directive is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"proxy_upload_rate","defaultValue":"","syntax":"","context":"","description":""},{"directive":"proxy_timeout","defaultValue":"proxy_timeout 10m;","syntax":"proxy_timeout timeout;","context":"stream, server","description":"Sets the timeout between two successiveread or write operations on client or proxied server connections.If no data is transmitted within this time, the connection is closed."},{"directive":"proxy_timeout","defaultValue":"proxy_timeout 24h;","syntax":"proxy_timeout timeout;","context":"mail, server","description":"Sets the timeout between two successiveread or write operations on client or proxied server connections.If no data is transmitted within this time, the connection is closed."},{"directive":"proxy_temp_path","defaultValue":"proxy_temp_path proxy_temp;","syntax":"proxy_temp_path     path    [level1    [level2    [level3]]];","context":"http, server, location","description":"Defines a directory for storing temporary fileswith data received from proxied servers.Up to three-level subdirectory hierarchy can be used underneath the specifieddirectory.For example, in the following configuration proxy_temp_path /spool/nginx/proxy_temp 1 2; a temporary file might look like this: /spool/nginx/proxy_temp/7/45/00000123457 See also the use_temp_path parameter of theproxy_cache_path directive."},{"directive":"proxy_temp_file_write_size","defaultValue":"proxy_temp_file_write_size 8k|16k;","syntax":"proxy_temp_file_write_size size;","context":"http, server, location","description":"Limits the size of data written to a temporary fileat a time, when buffering of responses from the proxied serverto temporary files is enabled.By default, size is limited by two buffers set by theproxy_buffer_size and proxy_buffers directives.The maximum size of a temporary file is set by theproxy_max_temp_file_size directive."},{"directive":"proxy_store_access","defaultValue":"proxy_store_access user:rw;","syntax":"proxy_store_access users:permissions ...;","context":"http, server, location","description":"Sets access permissions for newly created files and directories, e.g.: proxy_store_access user:rw group:rw all:r; If any group or all access permissionsare specified then user permissions may be omitted: proxy_store_access group:rw all:r;"},{"directive":"proxy_store","defaultValue":"proxy_store off;","syntax":"proxy_store     on |    off |    string;","context":"http, server, location","description":"Enables saving of files to a disk.The on parameter saves files with pathscorresponding to the directives<a href=\"ngx_http_core_module.html#alias\">alias or<a href=\"ngx_http_core_module.html#root\">root.The off parameter disables saving of files.In addition, the file name can be set explicitly using thestring with variables: proxy_store /data/www$original_uri; The modification time of files is set according to the received“Last-Modified” response header field.The response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the persistent storecan be put on different file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both saved files and adirectory holding temporary files, set by the proxy_temp_pathdirective, are put on the same file system.This directive can be used to create local copies of static unchangeablefiles, e.g.: location /images/ {    root               /data/www;    error_page         404 = /fetch$uri;}location /fetch/ {    internal;    proxy_pass         http://backend/;    proxy_store        on;    proxy_store_access user:rw group:rw all:r;    proxy_temp_path    /data/temp;    alias              /data/www/;} or like this: location /images/ {    root               /data/www;    error_page         404 = @fetch;}location @fetch {    internal;    proxy_pass         http://backend;    proxy_store        on;    proxy_store_access user:rw group:rw all:r;    proxy_temp_path    /data/temp;    root               /data/www;}"},{"directive":"proxy_ssl_verify_depth","defaultValue":"proxy_ssl_verify_depth 1;","syntax":"proxy_ssl_verify_depth number;","context":"stream, server","description":"Sets the verification depth in the proxied server certificates chain."},{"directive":"proxy_ssl_verify_depth","defaultValue":"proxy_ssl_verify_depth 1;","syntax":"proxy_ssl_verify_depth number;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Sets the verification depth in the proxied HTTPS server certificates chain."},{"directive":"proxy_ssl_verify","defaultValue":"proxy_ssl_verify off;","syntax":"proxy_ssl_verify on | off;","context":"stream, server","description":"Enables or disables verification of the proxied server certificate."},{"directive":"proxy_ssl_verify","defaultValue":"proxy_ssl_verify off;","syntax":"proxy_ssl_verify on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Enables or disables verification of the proxied HTTPS server certificate."},{"directive":"proxy_ssl_trusted_certificate","defaultValue":"—","syntax":"proxy_ssl_trusted_certificate file;","context":"stream, server","description":"Specifies a file with trusted CA certificates in the PEM formatused to verifythe certificate of the proxied server."},{"directive":"proxy_ssl_trusted_certificate","defaultValue":"—","syntax":"proxy_ssl_trusted_certificate file;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Specifies a file with trusted CA certificates in the PEM formatused to verifythe certificate of the proxied HTTPS server."},{"directive":"proxy_ssl_session_reuse","defaultValue":"proxy_ssl_session_reuse on;","syntax":"proxy_ssl_session_reuse on | off;","context":"stream, server","description":"Determines whether SSL sessions can be reused when working withthe proxied server.If the errors“SSL3_GET_FINISHED:digest check failed”appear in the logs, try disabling session reuse."},{"directive":"proxy_ssl_session_reuse","defaultValue":"proxy_ssl_session_reuse on;","syntax":"proxy_ssl_session_reuse on | off;","context":"http, server, location","description":"Determines whether SSL sessions can be reused when working withthe proxied server.If the errors“SSL3_GET_FINISHED:digest check failed”appear in the logs, try disabling session reuse."},{"directive":"proxy_ssl_server_name","defaultValue":"proxy_ssl_server_name off;","syntax":"proxy_ssl_server_name on | off;","context":"stream, server","description":"Enables or disables passing of the server name through<a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">TLSServer Name Indication extension (SNI, RFC 6066)when establishing a connection with the proxied server."},{"directive":"proxy_ssl_server_name","defaultValue":"proxy_ssl_server_name off;","syntax":"proxy_ssl_server_name on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Enables or disables passing of the server name through<a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">TLSServer Name Indication extension (SNI, RFC 6066)when establishing a connection with the proxied HTTPS server."},{"directive":"proxy_ssl_protocols","defaultValue":"proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;","syntax":"proxy_ssl_protocols     [SSLv2]    [SSLv3]    [TLSv1]    [TLSv1.1]    [TLSv1.2]    [TLSv1.3];","context":"stream, server","description":"Enables the specified protocols for connections to a proxied server."},{"directive":"proxy_ssl_protocols","defaultValue":"proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;","syntax":"proxy_ssl_protocols     [SSLv2]    [SSLv3]    [TLSv1]    [TLSv1.1]    [TLSv1.2]    [TLSv1.3];","context":"http, server, location","description":"This directive appeared in version 1.5.6.            Enables the specified protocols for requests to a proxied HTTPS server."},{"directive":"proxy_ssl_password_file","defaultValue":"—","syntax":"proxy_ssl_password_file file;","context":"stream, server","description":"Specifies a file with passphrases forsecret keyswhere each passphrase is specified on a separate line.Passphrases are tried in turn when loading the key."},{"directive":"proxy_ssl_password_file","defaultValue":"—","syntax":"proxy_ssl_password_file file;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            Specifies a file with passphrases forsecret keyswhere each passphrase is specified on a separate line.Passphrases are tried in turn when loading the key."},{"directive":"proxy_ssl_name","defaultValue":"proxy_ssl_name host from proxy_pass;","syntax":"proxy_ssl_name name;","context":"stream, server","description":"Allows overriding the server name used toverifythe certificate of the proxied server and to bepassed through SNIwhen establishing a connection with the proxied server.The server name can also be specified using variables (1.11.3).By default, the host part of the proxy_pass address is used."},{"directive":"proxy_ssl_name","defaultValue":"proxy_ssl_name $proxy_host;","syntax":"proxy_ssl_name name;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Allows overriding the server name used toverifythe certificate of the proxied HTTPS server and to bepassed through SNIwhen establishing a connection with the proxied HTTPS server.By default, the host part of the proxy_pass URL is used."},{"directive":"proxy_ssl_crl","defaultValue":"—","syntax":"proxy_ssl_crl file;","context":"stream, server","description":"Specifies a file with revoked certificates (CRL)in the PEM format used to verifythe certificate of the proxied server."},{"directive":"proxy_ssl_crl","defaultValue":"—","syntax":"proxy_ssl_crl file;","context":"http, server, location","description":"This directive appeared in version 1.7.0.            Specifies a file with revoked certificates (CRL)in the PEM format used to verifythe certificate of the proxied HTTPS server."},{"directive":"proxy_ssl_ciphers","defaultValue":"proxy_ssl_ciphers DEFAULT;","syntax":"proxy_ssl_ciphers ciphers;","context":"stream, server","description":"Specifies the enabled ciphers for connections to a proxied server.The ciphers are specified in the format understood by the OpenSSL library.The full list can be viewed using the“openssl ciphers” command."},{"directive":"proxy_ssl_ciphers","defaultValue":"proxy_ssl_ciphers DEFAULT;","syntax":"proxy_ssl_ciphers ciphers;","context":"http, server, location","description":"This directive appeared in version 1.5.6.            Specifies the enabled ciphers for requests to a proxied HTTPS server.The ciphers are specified in the format understood by the OpenSSL library.The full list can be viewed using the“openssl ciphers” command."},{"directive":"proxy_ssl_certificate_key","defaultValue":"—","syntax":"proxy_ssl_certificate_key file;","context":"stream, server","description":"Specifies a file with the secret key in the PEM formatused for authentication to a proxied server."},{"directive":"proxy_ssl_certificate_key","defaultValue":"—","syntax":"proxy_ssl_certificate_key file;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            Specifies a file with the secret key in the PEM formatused for authentication to a proxied HTTPS server.The valueengine:name:idcan be specified instead of the file (1.7.9),which loads a secret key with a specified idfrom the OpenSSL engine name."},{"directive":"proxy_ssl_certificate","defaultValue":"—","syntax":"proxy_ssl_certificate file;","context":"stream, server","description":"Specifies a file with the certificate in the PEM formatused for authentication to a proxied server."},{"directive":"proxy_ssl_certificate","defaultValue":"—","syntax":"proxy_ssl_certificate file;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            Specifies a file with the certificate in the PEM formatused for authentication to a proxied HTTPS server."},{"directive":"proxy_ssl","defaultValue":"proxy_ssl off;","syntax":"proxy_ssl on | off;","context":"stream, server","description":"Enables the SSL/TLS protocol for connections to a proxied server."},{"directive":"proxy_set_header","defaultValue":"proxy_set_header Host $proxy_host;proxy_set_header Connection close;","syntax":"proxy_set_header field value;","context":"http, server, location","description":"Allows redefining or appending fields to the request headerpassed to the proxied server.The value can contain text, variables, and their combinations.These directives are inherited from the previous level if andonly if there are noproxy_set_headerdirectives defined on the current level.By default, only two fields are redefined: proxy_set_header Host       $proxy_host;proxy_set_header Connection close; If caching is enabled, the header fields“If-Modified-Since”,“If-Unmodified-Since”,“If-None-Match”,“If-Match”,“Range”,and“If-Range”from the original request are not passed to the proxied server.An unchanged “Host” request header field can be passed like this: proxy_set_header Host       $http_host; However, if this field is not present in a client request header thennothing will be passed.In such a case it is better to use the $host variable - itsvalue equals the server name in the “Host” request headerfield or the primary server name if this field is not present: proxy_set_header Host       $host; In addition, the server name can be passed together with the port of theproxied server: proxy_set_header Host       $host:$proxy_port; If the value of a header field is an empty string then thisfield will not be passed to a proxied server: proxy_set_header Accept-Encoding \"\";"},{"directive":"proxy_set_body","defaultValue":"—","syntax":"proxy_set_body value;","context":"http, server, location","description":"Allows redefining the request body passed to the proxied server.The value can contain text, variables, and their combination."},{"directive":"proxy_send_timeout","defaultValue":"proxy_send_timeout 60s;","syntax":"proxy_send_timeout time;","context":"http, server, location","description":"Sets a timeout for transmitting a request to the proxied server.The timeout is set only between two successive write operations,not for the transmission of the whole request.If the proxied server does not receive anything within this time,the connection is closed."},{"directive":"proxy_send_lowat","defaultValue":"proxy_send_lowat 0;","syntax":"proxy_send_lowat size;","context":"http, server, location","description":"If the directive is set to a non-zero value, nginx will try tominimize the numberof send operations on outgoing connections to a proxied server by using eitherNOTE_LOWAT flag of the<a href=\"../events.html#kqueue\">kqueue method,or the SO_SNDLOWAT socket option,with the specified size.This directive is ignored on Linux, Solaris, and Windows."},{"directive":"proxy_responses","defaultValue":"—","syntax":"proxy_responses number;","context":"stream, server","description":"This directive appeared in version 1.9.13.            Sets the number of datagrams expected from the proxied serverin response to the client requestif the <a href=\"ngx_stream_core_module.html#udp\">UDPprotocol is used.By default, the number of datagrams is not limited:the response datagrams will be sentuntil the proxy_timeout value expires."},{"directive":"proxy_request_buffering","defaultValue":"proxy_request_buffering on;","syntax":"proxy_request_buffering on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.11.            Enables or disables buffering of a client request body.When buffering is enabled, the entire request body is<a href=\"ngx_http_core_module.html#client_body_buffer_size\">readfrom the client before sending the request to a proxied server.When buffering is disabled, the request body is sent to the proxied serverimmediately as it is received.In this case, the request cannot be passed to thenext serverif nginx already started sending the request body.When HTTP/1.1 chunked transfer encoding is usedto send the original request body,the request body will be buffered regardless of the directive value unlessHTTP/1.1 is enabled for proxying."},{"directive":"proxy_redirect","defaultValue":"proxy_redirect default;","syntax":"proxy_redirect default;proxy_redirect off;proxy_redirect redirect replacement;","context":"http, server, location","description":"Sets the text that should be changed in the “Location”and “Refresh” header fields of a proxied server response.Suppose a proxied server returned the header field“Location: http://localhost:8000/two/some/uri/”.The directive proxy_redirect http://localhost:8000/two/ http://frontend/one/; will rewrite this string to“Location: http://frontend/one/some/uri/”.A server name may be omitted in the replacement string: proxy_redirect http://localhost:8000/two/ /; then the primary server’s name and port, if different from 80,will be inserted.The default replacement specified by the default parameteruses the parameters of the<a href=\"ngx_http_core_module.html#location\">location andproxy_pass directives.Hence, the two configurations below are equivalent: location /one/ {    proxy_pass     http://upstream:port/two/;    proxy_redirect default;  location /one/ {    proxy_pass     http://upstream:port/two/;    proxy_redirect http://upstream:port/two/ /one/; The default parameter is not permitted ifproxy_pass is specified using variables.A replacement string can contain variables: proxy_redirect http://localhost:8000/ http://$host:$server_port/; A redirect can also contain (1.1.11) variables: proxy_redirect http://$proxy_host:8000/ /; The directive can be specified (1.1.11) using regular expressions.In this case, redirect should either start withthe “~” symbol for a case-sensitive matching,or with the “~*” symbols for case-insensitivematching.The regular expression can contain named and positional captures,and replacement can reference them: proxy_redirect ~^(http://[^:]+):\\d+(/.+)$ $1$2;proxy_redirect ~*/user/([^/]+)/(.+)$      http://$1.example.com/$2; There could be several proxy_redirect directives: proxy_redirect default;proxy_redirect http://localhost:8000/  /;proxy_redirect http://www.example.com/ /; The off parameter cancels the effect of allproxy_redirect directives on the current level: proxy_redirect off;proxy_redirect default;proxy_redirect http://localhost:8000/  /;proxy_redirect http://www.example.com/ /; Using this directive, it is also possible to add host names to relativeredirects issued by a proxied server: proxy_redirect / /;"},{"directive":"proxy_read_timeout","defaultValue":"proxy_read_timeout 60s;","syntax":"proxy_read_timeout time;","context":"http, server, location","description":"Defines a timeout for reading a response from the proxied server.The timeout is set only between two successive read operations,not for the transmission of the whole response.If the proxied server does not transmit anything within this time,the connection is closed."},{"directive":"proxy_protocol_timeout","defaultValue":"proxy_protocol_timeout 30s;","syntax":"proxy_protocol_timeout timeout;","context":"stream, server","description":"This directive appeared in version 1.11.4.            Specifies a timeout forreading the PROXY protocol header to complete.If no entire header is transmitted within this time,the connection is closed."},{"directive":"proxy_protocol","defaultValue":"proxy_protocol off;","syntax":"proxy_protocol on | off;","context":"stream, server","description":"This directive appeared in version 1.9.2.            Enables the<a href=\"http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt\">PROXYprotocol for connections to a proxied server."},{"directive":"proxy_pass_request_headers","defaultValue":"proxy_pass_request_headers on;","syntax":"proxy_pass_request_headers on | off;","context":"http, server, location","description":"Indicates whether the header fields of the original request are passedto the proxied server. location /x-accel-redirect-here/ {    proxy_method GET;    proxy_pass_request_headers off;    proxy_pass_request_body off;    proxy_pass ...} See also the proxy_set_header andproxy_pass_request_body directives."},{"directive":"proxy_pass_request_body","defaultValue":"proxy_pass_request_body on;","syntax":"proxy_pass_request_body on | off;","context":"http, server, location","description":"Indicates whether the original request body is passedto the proxied server. location /x-accel-redirect-here/ {    proxy_method GET;    proxy_pass_request_body off;    proxy_set_header Content-Length \"\";    proxy_pass ...} See also the proxy_set_header andproxy_pass_request_headers directives."},{"directive":"proxy_pass_header","defaultValue":"—","syntax":"proxy_pass_header field;","context":"http, server, location","description":"Permits passing otherwise disabled headerfields from a proxied server to a client."},{"directive":"proxy_pass_error_message","defaultValue":"proxy_pass_error_message off;","syntax":"proxy_pass_error_message on | off;","context":"mail, server","description":"Indicates whether to pass the error message obtained duringthe authentication on the backend to the client.Usually, if the authentication in nginx is a success,the backend cannot return an error.If it nevertheless returns an error,it means some internal error has occurred.In such case the backend message can contain informationthat should not be shown to the client.However, responding with an error for the correct passwordis a normal behavior for some POP3 servers.For example, CommuniGatePro informs a user about<a href=\"http://www.stalker.com/CommuniGatePro/Alerts.html#Quota\">mailboxoverflow or other events by periodically outputting the<a href=\"http://www.stalker.com/CommuniGatePro/POP.html#Alerts\">authenticationerror.The directive should be enabled in this case."},{"directive":"proxy_pass","defaultValue":"—","syntax":"proxy_pass address;","context":"server","description":"Sets the address of a proxied server.The address can be specified as a domain name or IP address,and a port: proxy_pass localhost:12345; or as a UNIX-domain socket path: proxy_pass unix:/tmp/stream.socket; If a domain name resolves to several addresses, all of them will beused in a round-robin fashion.In addition, an address can be specified as a<a href=\"ngx_stream_upstream_module.html\">server group.The address can also be specified using variables (1.11.3): proxy_pass $upstream; In this case, the server name is searched among the described<a href=\"ngx_stream_upstream_module.html\">server groups,and, if not found, is determined using a<a href=\"ngx_stream_core_module.html#resolver\">resolver."},{"directive":"proxy_pass","defaultValue":"—","syntax":"proxy_pass URL;","context":"location, if in location, limit_except","description":"Sets the protocol and address of a proxied server and an optional URIto which a location should be mapped.As a protocol, “http” or “https”can be specified.The address can be specified as a domain name or IP address,and an optional port: proxy_pass http://localhost:8000/uri/; or as a UNIX-domain socket path specified after the word“unix” and enclosed in colons: proxy_pass http://unix:/tmp/backend.socket:/uri/; If a domain name resolves to several addresses, all of them will beused in a round-robin fashion.In addition, an address can be specified as a<a href=\"ngx_http_upstream_module.html\">server group.Parameter value can contain variables.In this case, if an address is specified as a domain name,the name is searched among the described server groups,and, if not found, is determined using a<a href=\"ngx_http_core_module.html#resolver\">resolver.A request URI is passed to the server as follows: If the proxy_pass directive is specified with a URI,then when a request is passed to the server, the part of a<a href=\"ngx_http_core_module.html#location\">normalizedrequest URI matching the location is replaced by a URIspecified in the directive:location /name/ {    proxy_pass http://127.0.0.1/remote/;}If proxy_pass is specified without a URI,the request URI is passed to the server in the same formas sent by a client when the original request is processed,or the full normalized request URI is passedwhen processing the changed URI:location /some/path/ {    proxy_pass http://127.0.0.1;}Before version 1.1.12,if proxy_pass is specified without a URI,the original request URI might be passedinstead of the changed URI in some cases. In some cases, the part of a request URI to be replaced cannot be determined: When location is specified using a regular expression,and also inside named locations.In these cases,proxy_pass should be specified without a URI.When the URI is changed inside a proxied location using the<a href=\"ngx_http_rewrite_module.html#rewrite\">rewrite directive,and this same configuration will be used to process a request(break):location /name/ {    rewrite    /name/([^/]+) /users?name=$1 break;    proxy_pass http://127.0.0.1;}In this case, the URI specified in the directive is ignored andthe full changed request URI is passed to the server.When variables are used in proxy_pass:location /name/ {    proxy_pass http://127.0.0.1$request_uri;}In this case, if URI is specified in the directive,it is passed to the server as is,replacing the original request URI. <a href=\"websocket.html\">WebSocket proxying requires specialconfiguration and is supported since version 1.3.13."},{"directive":"proxy_no_cache","defaultValue":"—","syntax":"proxy_no_cache string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be saved to a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be saved: proxy_no_cache $cookie_nocache $arg_nocache$arg_comment;proxy_no_cache $http_pragma    $http_authorization; Can be used along with the proxy_cache_bypass directive."},{"directive":"proxy_next_upstream_tries","defaultValue":"proxy_next_upstream_tries 0;","syntax":"proxy_next_upstream_tries number;","context":"stream, server","description":"Limits the number of possible tries for passing a connection to thenext server.The 0 value turns off this limitation."},{"directive":"proxy_next_upstream_tries","defaultValue":"proxy_next_upstream_tries 0;","syntax":"proxy_next_upstream_tries number;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the number of possible tries for passing a request to thenext server.The 0 value turns off this limitation."},{"directive":"proxy_next_upstream_timeout","defaultValue":"proxy_next_upstream_timeout 0;","syntax":"proxy_next_upstream_timeout time;","context":"stream, server","description":"Limits the time allowed to pass a connection to thenext server.The 0 value turns off this limitation."},{"directive":"proxy_next_upstream_timeout","defaultValue":"proxy_next_upstream_timeout 0;","syntax":"proxy_next_upstream_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the time during which a request can be passed to thenext server.The 0 value turns off this limitation."},{"directive":"proxy_next_upstream","defaultValue":"proxy_next_upstream on;","syntax":"proxy_next_upstream on | off;","context":"stream, server","description":"When a connection to the proxied server cannot be established, determineswhether a client connection will be passed to the next server.Passing a connection to the next server can be limited bythe number of triesand by time."},{"directive":"proxy_next_upstream","defaultValue":"proxy_next_upstream error timeout;","syntax":"proxy_next_upstream     error |    timeout |    invalid_header |    http_500 |    http_502 |    http_503 |    http_504 |    http_403 |    http_404 |    http_429 |    non_idempotent |    off    ...;","context":"http, server, location","description":"Specifies in which cases a request should be passed to the next server: erroran error occurred while establishing a connection with theserver, passing a request to it, or reading the response header;timeouta timeout has occurred while establishing a connection with theserver, passing a request to it, or reading the response header;invalid_headera server returned an empty or invalid response;http_500a server returned a response with the code 500;http_502a server returned a response with the code 502;http_503a server returned a response with the code 503;http_504a server returned a response with the code 504;http_403a server returned a response with the code 403;http_404a server returned a response with the code 404;http_429a server returned a response with the code 429 (1.11.13);non_idempotentnormally, requests with a<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotentmethod(POST, LOCK, PATCH)are not passed to the next serverif a request has been sent to an upstream server (1.9.13);enabling this option explicitly allows retrying such requests;offdisables passing a request to the next server. One should bear in mind that passing a request to the next server isonly possible if nothing has been sent to a client yet.That is, if an error or timeout occurs in the middle of thetransferring of a response, fixing this is impossible.The directive also defines what is considered an<a href=\"ngx_http_upstream_module.html#max_fails\">unsuccessfulattempt of communication with a server.The cases of error, timeout andinvalid_header are always considered unsuccessful attempts,even if they are not specified in the directive.The cases of http_500, http_502,http_503, http_504,and http_429 areconsidered unsuccessful attempts only if they are specified in the directive.The cases of http_403 and http_404are never considered unsuccessful attempts.Passing a request to the next server can be limited bythe number of triesand by time."},{"directive":"proxy_method","defaultValue":"—","syntax":"proxy_method method;","context":"http, server, location","description":"Specifies the HTTP method to use in requests forwardedto the proxied server instead of the method from the client request.Parameter value can contain variables (1.11.6)."},{"directive":"proxy_max_temp_file_size","defaultValue":"proxy_max_temp_file_size 1024m;","syntax":"proxy_max_temp_file_size size;","context":"http, server, location","description":"When buffering of responses from the proxiedserver is enabled, and the whole response does not fit into the buffersset by the proxy_buffer_size and proxy_buffersdirectives, a part of the response can be saved to a temporary file.This directive sets the maximum size of the temporary file.The size of data written to the temporary file at a time is setby the proxy_temp_file_write_size directive.The zero value disables buffering of responses to temporary files. This restriction does not apply to responsesthat will be cachedor stored on disk."},{"directive":"proxy_limit_rate","defaultValue":"proxy_limit_rate 0;","syntax":"proxy_limit_rate rate;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Limits the speed of reading the response from the proxied server.The rate is specified in bytes per second.The zero value disables rate limiting.The limit is set per a request, and so if nginx simultaneously openstwo connections to the proxied server,the overall rate will be twice as much as the specified limit.The limitation works only ifbuffering of responses from the proxiedserver is enabled."},{"directive":"proxy_intercept_errors","defaultValue":"proxy_intercept_errors off;","syntax":"proxy_intercept_errors on | off;","context":"http, server, location","description":"Determines whether proxied responses with codes greater than or equalto 300 should be passed to a clientor be intercepted and redirected to nginx for processingwith the <a href=\"ngx_http_core_module.html#error_page\">error_page directive."},{"directive":"proxy_ignore_headers","defaultValue":"—","syntax":"proxy_ignore_headers field ...;","context":"http, server, location","description":"Disables processing of certain response header fields from the proxied server.The following fields can be ignored: “X-Accel-Redirect”,“X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6),“X-Accel-Buffering” (1.1.6),“X-Accel-Charset” (1.1.6), “Expires”,“Cache-Control”, “Set-Cookie” (0.8.44),and “Vary” (1.7.7).If not disabled, processing of these header fields has the followingeffect: “X-Accel-Expires”, “Expires”,“Cache-Control”, “Set-Cookie”,and “Vary”set the parameters of response caching;“X-Accel-Redirect” performs an<a href=\"ngx_http_core_module.html#internal\">internalredirect to the specified URI;“X-Accel-Limit-Rate” sets the<a href=\"ngx_http_core_module.html#limit_rate\">ratelimit for transmission of a response to a client;“X-Accel-Buffering” enables or disablesbuffering of a response;“X-Accel-Charset” sets the desired<a href=\"ngx_http_charset_module.html#charset\">charsetof a response."},{"directive":"proxy_ignore_client_abort","defaultValue":"proxy_ignore_client_abort off;","syntax":"proxy_ignore_client_abort on | off;","context":"http, server, location","description":"Determines whether the connection with a proxied server should beclosed when a client closes the connection without waitingfor a response."},{"directive":"proxy_http_version","defaultValue":"proxy_http_version 1.0;","syntax":"proxy_http_version 1.0 | 1.1;","context":"http, server, location","description":"This directive appeared in version 1.1.4.            Sets the HTTP protocol version for proxying.By default, version 1.0 is used.Version 1.1 is recommended for use with<a href=\"ngx_http_upstream_module.html#keepalive\">keepaliveconnections and<a href=\"ngx_http_upstream_module.html#ntlm\">NTLM authentication."},{"directive":"proxy_hide_header","defaultValue":"—","syntax":"proxy_hide_header field;","context":"http, server, location","description":"By default,nginx does not pass the header fields “Date”,“Server”, “X-Pad”, and“X-Accel-...” from the response of a proxiedserver to a client.The proxy_hide_header directive sets additional fieldsthat will not be passed.If, on the contrary, the passing of fields needs to be permitted,the proxy_pass_header directive can be used."},{"directive":"proxy_headers_hash_max_size","defaultValue":"proxy_headers_hash_max_size 512;","syntax":"proxy_headers_hash_max_size size;","context":"http, server, location","description":"Sets the maximum size of hash tablesused by the proxy_hide_header and proxy_set_headerdirectives.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"proxy_headers_hash_bucket_size","defaultValue":"proxy_headers_hash_bucket_size 64;","syntax":"proxy_headers_hash_bucket_size size;","context":"http, server, location","description":"Sets the bucket size for hash tablesused by the proxy_hide_header and proxy_set_headerdirectives.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"proxy_force_ranges","defaultValue":"proxy_force_ranges off;","syntax":"proxy_force_ranges on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Enables byte-range supportfor both cached and uncached responses from the proxied serverregardless of the “Accept-Ranges” field in these responses."},{"directive":"proxy_download_rate","defaultValue":"proxy_download_rate 0;","syntax":"proxy_download_rate rate;","context":"stream, server","description":"This directive appeared in version 1.9.3.            Limits the speed of reading the data from the proxied server.The rate is specified in bytes per second.The zero value disables rate limiting.The limit is set per a connection, so if nginx simultaneously openstwo connections to the proxied server,the overall rate will be twice as much as the specified limit."},{"directive":"proxy_cookie_path","defaultValue":"proxy_cookie_path off;","syntax":"proxy_cookie_path off;proxy_cookie_path path replacement;","context":"http, server, location","description":"This directive appeared in version 1.1.15.            Sets a text that should be changed in the pathattribute of the “Set-Cookie” header fields of aproxied server response.Suppose a proxied server returned the “Set-Cookie”header field with the attribute“path=/two/some/uri/”.The directive proxy_cookie_path /two/ /; will rewrite this attribute to“path=/some/uri/”.The path and replacement stringscan contain variables: proxy_cookie_path $uri /some$uri; The directive can also be specified using regular expressions.In this case, path should either start fromthe “~” symbol for a case-sensitive matching,or from the “~*” symbols for case-insensitivematching.The regular expression can contain named and positional captures,and replacement can reference them: proxy_cookie_path ~*^/user/([^/]+) /u/$1; There could be several proxy_cookie_path directives: proxy_cookie_path /one/ /;proxy_cookie_path / /two/; The off parameter cancels the effect of allproxy_cookie_path directives on the current level: proxy_cookie_path off;proxy_cookie_path /two/ /;proxy_cookie_path ~*^/user/([^/]+) /u/$1;"},{"directive":"proxy_cookie_domain","defaultValue":"proxy_cookie_domain off;","syntax":"proxy_cookie_domain off;proxy_cookie_domain domain replacement;","context":"http, server, location","description":"This directive appeared in version 1.1.15.            Sets a text that should be changed in the domainattribute of the “Set-Cookie” header fields of aproxied server response.Suppose a proxied server returned the “Set-Cookie”header field with the attribute“domain=localhost”.The directive proxy_cookie_domain localhost example.org; will rewrite this attribute to“domain=example.org”.A dot at the beginning of the domain andreplacement strings and the domainattribute is ignored.Matching is case-insensitive.The domain and replacement stringscan contain variables: proxy_cookie_domain www.$host $host; The directive can also be specified using regular expressions.In this case, domain should start fromthe “~” symbol.A regular expression can contain named and positional captures,and replacement can reference them: proxy_cookie_domain ~\\.(?P&lt;sl_domain&gt;[-0-9a-z]+\\.[a-z]+)$ $sl_domain; There could be several proxy_cookie_domain directives: proxy_cookie_domain localhost example.org;proxy_cookie_domain ~\\.([a-z]+\\.[a-z]+)$ $1; The off parameter cancels the effect of allproxy_cookie_domain directives on the current level: proxy_cookie_domain off;proxy_cookie_domain localhost example.org;proxy_cookie_domain www.example.org example.org;"},{"directive":"proxy_connect_timeout","defaultValue":"proxy_connect_timeout 60s;","syntax":"proxy_connect_timeout time;","context":"stream, server","description":"Defines a timeout for establishing a connection with a proxied server."},{"directive":"proxy_connect_timeout","defaultValue":"proxy_connect_timeout 60s;","syntax":"proxy_connect_timeout time;","context":"http, server, location","description":"Defines a timeout for establishing a connection with a proxied server.It should be noted that this timeout cannot usually exceed 75 seconds."},{"directive":"proxy_cache_valid","defaultValue":"—","syntax":"proxy_cache_valid [code ...] time;","context":"http, server, location","description":"Sets caching time for different response codes.For example, the following directives proxy_cache_valid 200 302 10m;proxy_cache_valid 404      1m; set 10 minutes of caching for responses with codes 200 and 302and 1 minute for responses with code 404.If only caching time is specified proxy_cache_valid 5m; then only 200, 301, and 302 responses are cached.In addition, the any parameter can be specifiedto cache any responses: proxy_cache_valid 200 302 10m;proxy_cache_valid 301      1h;proxy_cache_valid any      1m; Parameters of caching can also be set directlyin the response header.This has higher priority than setting of caching time using the directive. The “X-Accel-Expires” header field sets caching time of aresponse in seconds.The zero value disables caching for a response.If the value starts with the @ prefix, it sets an absolutetime in seconds since Epoch, up to which the response may be cached.If the header does not include the “X-Accel-Expires” field,parameters of caching may be set in the header fields“Expires” or “Cache-Control”.If the header includes the “Set-Cookie” field, such aresponse will not be cached.If the header includes the “Vary” fieldwith the special value “*”, such aresponse will not be cached (1.7.7).If the header includes the “Vary” fieldwith another value, such a response will be cachedtaking into account the corresponding request header fields (1.7.7). Processing of one or more of these response header fields can be disabledusing the proxy_ignore_headers directive."},{"directive":"proxy_cache_use_stale","defaultValue":"proxy_cache_use_stale off;","syntax":"proxy_cache_use_stale     error |    timeout |    invalid_header |    updating |    http_500 |    http_502 |    http_503 |    http_504 |    http_403 |    http_404 |    http_429 |    off    ...;","context":"http, server, location","description":"Determines in which cases a stale cached response can be usedduring communication with the proxied server.The directive’s parameters match the parameters of theproxy_next_upstream directive.The error parameter also permitsusing a stale cached response if a proxied server to process a requestcannot be selected."},{"directive":"proxy_cache_revalidate","defaultValue":"proxy_cache_revalidate off;","syntax":"proxy_cache_revalidate on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Enables revalidation of expired cache items using conditional requests withthe “If-Modified-Since” and “If-None-Match”header fields."},{"directive":"proxy_cache_purge","defaultValue":"—","syntax":"proxy_cache_purge string ...;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Defines conditions under which the request will be considered a cachepurge request.If at least one value of the string parameters is not empty and is not equalto “0” then the cache entry with a correspondingcache key is removed.The result of successful operation is indicated by returningthe 204 (No Content) response.If the cache key of a purge request endswith an asterisk (“*”), all cache entries matching thewildcard key will be removed from the cache.However, these entries will remain on the disk until they are deletedfor either inactivity,or processed by the cache purger (1.7.12),or a client attempts to access them.Example configuration: proxy_cache_path /data/nginx/cache keys_zone=cache_zone:10m;map $request_method $purge_method {    PURGE   1;    default 0;}server {    ...    location / {        proxy_pass http://backend;        proxy_cache cache_zone;        proxy_cache_key $uri;        proxy_cache_purge $purge_method;    }}  This functionality is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"proxy_cache_path","defaultValue":"—","syntax":"proxy_cache_path     path    [levels=levels]    [use_temp_path=on|off]    keys_zone=name:size    [inactive=time]    [max_size=size]    [manager_files=number]    [manager_sleep=time]    [manager_threshold=time]    [loader_files=number]    [loader_sleep=time]    [loader_threshold=time]    [purger=on|off]    [purger_files=number]    [purger_sleep=time]    [purger_threshold=time];","context":"http","description":"Sets the path and other parameters of a cache.Cache data are stored in files.The file name in a cache is a result ofapplying the MD5 function to thecache key.The levels parameter defines hierarchy levels of a cache:from 1 to 3, each level accepts values 1 or 2.For example, in the following configuration proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m; file names in a cache will look like this: /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c A cached response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the cache can be put ondifferent file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both cache and a directoryholding temporary filesare put on the same file system.The directory for temporary files is set based onthe use_temp_path parameter (1.7.10).If this parameter is omitted or set to the value on,the directory set by the proxy_temp_path directivefor the given location will be used.If the value is set to off,temporary files will be put directly in the cache directory.In addition, all active keys and information about data are storedin a shared memory zone, whose name and sizeare configured by the keys_zone parameter.One megabyte zone can store about 8 thousand keys.Cached data that are not accessed during the time specified by theinactive parameter get removed from the cacheregardless of their freshness.By default, inactive is set to 10 minutes.The special “cache manager” process monitors the maximum cache size setby the max_size parameter.When this size is exceeded, it removes the least recently used data.The data is removed in iterations configured bymanager_files,manager_threshold, andmanager_sleep parameters (1.11.5).During one iteration no more than manager_files itemsare deleted (by default, 100).The duration of one iteration is limited by themanager_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the manager_sleepparameter (by default, 50 milliseconds) is made.A minute after the start the special “cache loader” process is activated.It loads information about previously cached data stored on file systeminto a cache zone.The loading is also done in iterations.During one iteration no more than loader_files itemsare loaded (by default, 100).Besides, the duration of one iteration is limited by theloader_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the loader_sleepparameter (by default, 50 milliseconds) is made.Additionally,the following parameters are available as part of our<a href=\"http://nginx.com/products/\">commercial subscription: purger=on|offInstructs whether cache entries that match awildcard keywill be removed from the disk by the cache purger (1.7.12).Setting the parameter to on(default is off)will activate the “cache purger” process thatpermanently iterates through all cache entriesand deletes the entries that match the wildcard key.purger_files=numberSets the number of items that will be scanned during one iteration (1.7.12).By default, purger_files is set to 10.purger_threshold=numberSets the duration of one iteration (1.7.12).By default, purger_threshold is set to 50 milliseconds.purger_sleep=numberSets a pause between iterations (1.7.12).By default, purger_sleep is set to 50 milliseconds.  In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed.Previously cached responses will be considered invalidafter upgrading to a newer nginx version."},{"directive":"proxy_cache_min_uses","defaultValue":"proxy_cache_min_uses 1;","syntax":"proxy_cache_min_uses number;","context":"http, server, location","description":"Sets the number of requests after which the responsewill be cached."},{"directive":"proxy_cache_methods","defaultValue":"proxy_cache_methods GET HEAD;","syntax":"proxy_cache_methods     GET |    HEAD |    POST    ...;","context":"http, server, location","description":"This directive appeared in version 0.7.59.            If the client request method is listed in this directive thenthe response will be cached.“GET” and “HEAD” methods are alwaysadded to the list, though it is recommended to specify them explicitly.See also the proxy_no_cache directive."},{"directive":"proxy_cache_max_range_offset","defaultValue":"—","syntax":"proxy_cache_max_range_offset number;","context":"http, server, location","description":"This directive appeared in version 1.11.6.            Sets an offset in bytes for byte-range requests.If the range is beyond the offset,the range request will be passed to the proxied serverand the response will not be cached."},{"directive":"proxy_cache_lock_timeout","defaultValue":"proxy_cache_lock_timeout 5s;","syntax":"proxy_cache_lock_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            Sets a timeout for proxy_cache_lock.When the time expires,the request will be passed to the proxied server,however, the response will not be cached. Before 1.7.8, the response could be cached."},{"directive":"proxy_cache_lock_age","defaultValue":"proxy_cache_lock_age 5s;","syntax":"proxy_cache_lock_age time;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            If the last request passed to the proxied serverfor populating a new cache elementhas not completed for the specified time,one more request may be passed to the proxied server."},{"directive":"proxy_cache_lock","defaultValue":"proxy_cache_lock off;","syntax":"proxy_cache_lock on | off;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            When enabled, only one request at a time will be allowed to populatea new cache element identified according to the proxy_cache_keydirective by passing a request to a proxied server.Other requests of the same cache element will either waitfor a response to appear in the cache or the cache lock forthis element to be released, up to the time set by theproxy_cache_lock_timeout directive."},{"directive":"proxy_cache_key","defaultValue":"proxy_cache_key $scheme$proxy_host$request_uri;","syntax":"proxy_cache_key string;","context":"http, server, location","description":"Defines a key for caching, for example proxy_cache_key \"$host$request_uri $cookie_user\"; By default, the directive’s value is close to the string proxy_cache_key $scheme$proxy_host$uri$is_args$args;"},{"directive":"proxy_cache_convert_head","defaultValue":"proxy_cache_convert_head on;","syntax":"proxy_cache_convert_head on | off;","context":"http, server, location","description":"This directive appeared in version 1.9.7.            Enables or disables the conversion of the “HEAD” methodto “GET” for caching.When the conversion is disabled, thecache key should be configuredto include the $request_method."},{"directive":"proxy_cache_bypass","defaultValue":"—","syntax":"proxy_cache_bypass string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be taken from a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be taken from the cache: proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;proxy_cache_bypass $http_pragma    $http_authorization; Can be used along with the proxy_no_cache directive."},{"directive":"proxy_cache_background_update","defaultValue":"proxy_cache_background_update off;","syntax":"proxy_cache_background_update on | off;","context":"http, server, location","description":"This directive appeared in version 1.11.10.            Allows starting a background subrequestto update an expired cache item,while a stale cached response is returned to the client.Note that it is necessary toallowthe usage of a stale cached response when it is being updated."},{"directive":"proxy_cache","defaultValue":"proxy_cache off;","syntax":"proxy_cache zone | off;","context":"http, server, location","description":"Defines a shared memory zone used for caching.The same zone can be used in several places.Parameter value can contain variables (1.7.9).The off parameter disables caching inheritedfrom the previous configuration level."},{"directive":"proxy_busy_buffers_size","defaultValue":"proxy_busy_buffers_size 8k|16k;","syntax":"proxy_busy_buffers_size size;","context":"http, server, location","description":"When buffering of responses from the proxiedserver is enabled, limits the total size of buffers thatcan be busy sending a response to the client while the response is notyet fully read.In the meantime, the rest of the buffers can be used for reading the responseand, if needed, buffering part of the response to a temporary file.By default, size is limited by the size of two buffers set by theproxy_buffer_size and proxy_buffers directives."},{"directive":"proxy_buffers","defaultValue":"proxy_buffers 8 4k|8k;","syntax":"proxy_buffers number size;","context":"http, server, location","description":"Sets the number and size of thebuffers used for reading a response from the proxied server,for a single connection.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform."},{"directive":"proxy_buffering","defaultValue":"proxy_buffering on;","syntax":"proxy_buffering on | off;","context":"http, server, location","description":"Enables or disables buffering of responses from the proxied server.When buffering is enabled, nginx receives a response from the proxied serveras soon as possible, saving it into the buffers set by theproxy_buffer_size and proxy_buffers directives.If the whole response does not fit into memory, a part of it can be savedto a temporary file on the disk.Writing to temporary files is controlled by theproxy_max_temp_file_size andproxy_temp_file_write_size directives.When buffering is disabled, the response is passed to a client synchronously,immediately as it is received.nginx will not try to read the whole response from the proxied server.The maximum size of the data that nginx can receive from the serverat a time is set by the proxy_buffer_size directive.Buffering can also be enabled or disabled by passing“yes” or “no” in the“X-Accel-Buffering” response header field.This capability can be disabled using theproxy_ignore_headers directive."},{"directive":"proxy_buffer_size","defaultValue":"proxy_buffer_size 16k;","syntax":"proxy_buffer_size size;","context":"stream, server","description":"This directive appeared in version 1.9.4.            Sets the size of the buffer used for reading datafrom the proxied server.Also sets the size of the buffer used for reading datafrom the client."},{"directive":"proxy_buffer_size","defaultValue":"proxy_buffer_size 4k|8k;","syntax":"proxy_buffer_size size;","context":"http, server, location","description":"Sets the size of the buffer used for reading the first partof the response received from the proxied server.This part usually contains a small response header.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform.It can be made smaller, however."},{"directive":"proxy_buffer","defaultValue":"proxy_buffer 4k|8k;","syntax":"proxy_buffer size;","context":"mail, server","description":"Sets the size of the buffer used for proxying.By default, the buffer size is equal to one memory page.Depending on a platform, it is either 4K or 8K."},{"directive":"proxy_bind","defaultValue":"—","syntax":"proxy_bind     address    [transparent] |    off;","context":"stream, server","description":"This directive appeared in version 1.9.2.            Makes outgoing connections to a proxied server originatefrom the specified local IP address.Parameter value can contain variables (1.11.2).The special value off cancels the effectof the proxy_bind directiveinherited from the previous configuration level, which allows thesystem to auto-assign the local IP address."},{"directive":"proxy_bind","defaultValue":"—","syntax":"proxy_bind     address    [transparent] |    off;","context":"http, server, location","description":"This directive appeared in version 0.8.22.            Makes outgoing connections to a proxied server originatefrom the specified local IP address with an optional port (1.11.2).Parameter value can contain variables (1.3.12).The special value off (1.3.12) cancels the effectof the proxy_bind directiveinherited from the previous configuration level, which allows thesystem to auto-assign the local IP address and port."},{"directive":"protocol","defaultValue":"—","syntax":"protocol   imap |  pop3 |  smtp;","context":"server","description":"Sets the protocol for a proxied server.Supported protocols are<a href=\"ngx_mail_imap_module.html\">IMAP,<a href=\"ngx_mail_pop3_module.html\">POP3, and<a href=\"ngx_mail_smtp_module.html\">SMTP.If the directive is not set, the protocol can be detected automaticallybased on the well-known port specified in the listendirective: imap: 143, 993pop3: 110, 995smtp: 25, 587, 465 Unnecessary protocols can be disabled using the<a href=\"../configure.html\">configurationparameters --without-mail_imap_module,--without-mail_pop3_module, and--without-mail_smtp_module."},{"directive":"preread_timeout","defaultValue":"preread_timeout 30s;","syntax":"preread_timeout timeout;","context":"stream, server","description":"This directive appeared in version 1.11.5.            Specifies a timeout of the<a href=\"stream_processing.html#preread_phase\">preread phase."},{"directive":"preread_buffer_size","defaultValue":"preread_buffer_size 16k;","syntax":"preread_buffer_size size;","context":"stream, server","description":"This directive appeared in version 1.11.5.            Specifies a size of the<a href=\"stream_processing.html#preread_phase\">preread buffer."},{"directive":"postpone_output","defaultValue":"postpone_output 1460;","syntax":"postpone_output size;","context":"http, server, location","description":"If possible, the transmission of client data will be postponed untilnginx has at least size bytes of data to send.The zero value disables postponing data transmission."},{"directive":"port_in_redirect","defaultValue":"port_in_redirect on;","syntax":"port_in_redirect on | off;","context":"http, server, location","description":"Enables or disables specifying the port inabsolute redirects issued by nginx.The use of the primary server name in redirects is controlled bythe server_name_in_redirect directive."},{"directive":"pop3_capabilities","defaultValue":"","syntax":"","context":"","description":""},{"directive":"pop3_auth","defaultValue":"pop3_auth plain;","syntax":"pop3_auth method ...;","context":"mail, server","description":"Sets permitted methods of authentication for POP3 clients.Supported methods are: plain<a href=\"https://tools.ietf.org/html/rfc1939\">USER/PASS,<a href=\"https://tools.ietf.org/html/rfc4616\">AUTH PLAIN,<a href=\"https://tools.ietf.org/html/draft-murchison-sasl-login-00\">AUTH LOGIN.It is not possible to disable these methods.apop<a href=\"https://tools.ietf.org/html/rfc1939\">APOP.In order for this method to work, the password must be stored unencrypted.cram-md5<a href=\"https://tools.ietf.org/html/rfc2195\">AUTH CRAM-MD5.In order for this method to work, the password must be stored unencrypted.external<a href=\"https://tools.ietf.org/html/rfc4422\">AUTH EXTERNAL (1.11.6)."},{"directive":"pid","defaultValue":"pid nginx.pid;","syntax":"pid file;","context":"main","description":"Defines a file that will store the process ID of the main process."},{"directive":"perl_set","defaultValue":"—","syntax":"perl_set     $variable    module::function|'sub { ... }';","context":"http","description":"Installs a Perl handler for the specified variable."},{"directive":"perl_require","defaultValue":"—","syntax":"perl_require module;","context":"http","description":"Defines the name of a module that will be loaded during eachreconfiguration.Several perl_require directives can be present."},{"directive":"perl_modules","defaultValue":"—","syntax":"perl_modules path;","context":"http","description":"Sets an additional path for Perl modules."},{"directive":"perl","defaultValue":"—","syntax":"perl module::function|'sub { ... }';","context":"location, limit_except","description":"Sets a Perl handler for the given location."},{"directive":"pcre_jit","defaultValue":"pcre_jit off;","syntax":"pcre_jit on | off;","context":"main","description":"This directive appeared in version 1.1.12.            Enables or disables the use of “just-in-time compilation” (PCRE JIT)for the regular expressions known by the time of configuration parsing.PCRE JIT can speed up processing of regular expressions significantly. The JIT is available in PCRE libraries starting from version 8.20built with the --enable-jit configuration parameter.When the PCRE library is built with nginx (--with-pcre=),the JIT support is enabled via the--with-pcre-jit configuration parameter."},{"directive":"override_charset","defaultValue":"override_charset off;","syntax":"override_charset on | off;","context":"http, server, location, if in location","description":"Determines whether a conversion should be performed for answersreceived from a proxied or a FastCGI/uwsgi/SCGI serverwhen the answers already carry a charset in the “Content-Type”response header field.If conversion is enabled, a charset specified in the receivedresponse is used as a source charset. It should be noted that if a response is received in a subrequestthen the conversion from the response charset to the main request charsetis always performed, regardless of the override_charsetdirective setting."},{"directive":"output_buffers","defaultValue":"output_buffers 2 32k;","syntax":"output_buffers number size;","context":"http, server, location","description":"Sets the number and size of thebuffers used for reading a response from a disk. Prior to version 1.9.5, the default value was 1 32k."},{"directive":"open_log_file_cache","defaultValue":"","syntax":"","context":"","description":""},{"directive":"open_log_file_cache","defaultValue":"","syntax":"","context":"","description":""},{"directive":"open_file_cache_valid","defaultValue":"open_file_cache_valid 60s;","syntax":"open_file_cache_valid time;","context":"http, server, location","description":"Sets a time after whichopen_file_cacheelements should be validated."},{"directive":"open_file_cache_min_uses","defaultValue":"open_file_cache_min_uses 1;","syntax":"open_file_cache_min_uses number;","context":"http, server, location","description":"Sets the minimum number of file accesses duringthe period configured by the inactive parameterof the open_file_cache directive, required for a filedescriptor to remain open in the cache."},{"directive":"open_file_cache_errors","defaultValue":"open_file_cache_errors off;","syntax":"open_file_cache_errors on | off;","context":"http, server, location","description":"Enables or disables caching of file lookup errors byopen_file_cache."},{"directive":"open_file_cache","defaultValue":"open_file_cache off;","syntax":"open_file_cache off;open_file_cache max=N[inactive=time];","context":"http, server, location","description":"Configures a cache that can store: open file descriptors, their sizes and modification times;information on existence of directories;file lookup errors, such as “file not found”, “no read permission”,and so on.Caching of errors should be enabled separately by theopen_file_cache_errorsdirective. The directive has the following parameters: maxsets the maximum number of elements in the cache;on cache overflow the least recently used (LRU) elements are removed;inactivedefines a time after which an element is removed from the cacheif it has not been accessed during this time;by default, it is 60 seconds;offdisables the cache. Example: open_file_cache          max=1000 inactive=20s;open_file_cache_valid    30s;open_file_cache_min_uses 2;open_file_cache_errors   on;"},{"directive":"ntlm","defaultValue":"—","syntax":"ntlm;","context":"upstream","description":"This directive appeared in version 1.9.2.            Allows proxying requests with<a href=\"https://en.wikipedia.org/wiki/Integrated_Windows_Authentication\">NTLMAuthentication.The upstream connection is bound to the client connectiononce the client sends a request with the “Authorization”header field valuestarting with “Negotiate” or “NTLM”.Further client requests will be proxied through the same upstream connection,keeping the authentication context.In order for NTLM authentication to work,it is necessary to enable keepalive connections to upstream servers.The <a href=\"ngx_http_proxy_module.html#proxy_http_version\">proxy_http_versiondirective should be set to “1.1”and the “Connection” header field should be cleared: upstream http_backend {    server 127.0.0.1:8080;    ntlm;}server {    ...    location /http/ {        proxy_pass http://http_backend;        proxy_http_version 1.1;        proxy_set_header Connection \"\";        ...    }}  When using load balancer methods other than the defaultround-robin method, it is necessary to activate them beforethe ntlm directive.  This directive is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"multi_accept","defaultValue":"multi_accept off;","syntax":"multi_accept on | off;","context":"events","description":"If multi_accept is disabled, a worker processwill accept one new connection at a time.Otherwise, a worker processwill accept all new connections at a time. The directive is ignored if <a href=\"events.html#kqueue\">kqueueconnection processing method is used, because it reportsthe number of new connections waiting to be accepted."},{"directive":"msie_refresh","defaultValue":"msie_refresh off;","syntax":"msie_refresh on | off;","context":"http, server, location","description":"Enables or disables issuing refreshes instead of redirects for MSIE clients."},{"directive":"msie_padding","defaultValue":"msie_padding on;","syntax":"msie_padding on | off;","context":"http, server, location","description":"Enables or disables adding comments to responses for MSIE clients with statusgreater than 400 to increase the response size to 512 bytes."},{"directive":"mp4_max_buffer_size","defaultValue":"mp4_max_buffer_size 10M;","syntax":"mp4_max_buffer_size size;","context":"http, server, location","description":"During metadata processing, a larger buffer may become necessary.Its size cannot exceed the specified size,or else nginx will return the500 (Internal Server Error) server error,and log the following message: \"/some/movie/file.mp4\" mp4 moov atom is too large:12583268, you may want to increase mp4_max_buffer_size"},{"directive":"mp4_limit_rate_after","defaultValue":"","syntax":"","context":"","description":""},{"directive":"mp4_limit_rate","defaultValue":"mp4_limit_rate off;","syntax":"mp4_limit_rate     on |    off |    factor;","context":"http, server, location","description":"Limits the rate of response transmission to a client.The rate is limited based on the average bitrate of theMP4 file served.To calculate the rate, the bitrate is multiplied by the specifiedfactor.The special value “on” corresponds to the factor of 1.1.The special value “off” disables rate limiting.The limit is set per a request, and so if a client simultaneously openstwo connections, the overall rate will be twice as muchas the specified limit. This directive is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"mp4_buffer_size","defaultValue":"mp4_buffer_size 512K;","syntax":"mp4_buffer_size size;","context":"http, server, location","description":"Sets the initial size of the buffer used forprocessing MP4 files."},{"directive":"mp4","defaultValue":"—","syntax":"mp4;","context":"location","description":"Turns on module processing in a surrounding location."},{"directive":"modern_browser_value","defaultValue":"","syntax":"","context":"","description":""},{"directive":"modern_browser","defaultValue":"—","syntax":"modern_browser browser version;modern_browser unlisted;","context":"http, server, location","description":"Specifies a version starting from which a browser is considered modern.A browser can be any one of the following: msie,gecko (browsers based on Mozilla),opera, safari,or konqueror.Versions can be specified in the following formats: X, X.X, X.X.X, or X.X.X.X.The maximum values for each of the format are4000, 4000.99, 4000.99.99, and 4000.99.99.99, respectively.The special value unlisted specifies to considera browser as modern if it was not listed by themodern_browser and ancient_browserdirectives.Otherwise such a browser is considered ancient.If a request does not provide the “User-Agent” fieldin the header, the browser is treated as not being listed."},{"directive":"mirror_request_body","defaultValue":"","syntax":"","context":"","description":""},{"directive":"mirror","defaultValue":"mirror off;","syntax":"mirror uri | off;","context":"http, server, location","description":"Sets the URI to which an original request will be mirrored.Several mirrors can be specified on the same level."},{"directive":"min_delete_depth","defaultValue":"","syntax":"","context":"","description":""},{"directive":"merge_slashes","defaultValue":"merge_slashes on;","syntax":"merge_slashes on | off;","context":"http, server","description":"Enables or disables compression of two or more adjacent slashesin a URI into a single slash.Note that compression is essential for the correct matching of prefix stringand regular expression locations.Without it, the “//scripts/one.php” request would not match location /scripts/ {    ...} and might be processed as a static file.So it gets converted to “/scripts/one.php”.Turning the compression off can become necessary if a URIcontains base64-encoded names, since base64 uses the “/”character internally.However, for security considerations, it is better to avoid turningthe compression off.If the directive is specified on the server level,its value is only used if a server is a default one.The value specified also applies to all virtual serverslistening on the same address and port."},{"directive":"memcached_send_timeout","defaultValue":"memcached_send_timeout 60s;","syntax":"memcached_send_timeout time;","context":"http, server, location","description":"Sets a timeout for transmitting a request to the memcached server.The timeout is set only between two successive write operations,not for the transmission of the whole request.If the memcached server does not receive anything within this time,the connection is closed."},{"directive":"memcached_read_timeout","defaultValue":"memcached_read_timeout 60s;","syntax":"memcached_read_timeout time;","context":"http, server, location","description":"Defines a timeout for reading a response from the memcached server.The timeout is set only between two successive read operations,not for the transmission of the whole response.If the memcached server does not transmit anything within this time,the connection is closed."},{"directive":"memcached_pass","defaultValue":"—","syntax":"memcached_pass address;","context":"location, if in location","description":"Sets the memcached server address.The address can be specified as a domain name or IP address,and a port: memcached_pass localhost:11211; or as a UNIX-domain socket path: memcached_pass unix:/tmp/memcached.socket; If a domain name resolves to several addresses, all of them will beused in a round-robin fashion.In addition, an address can be specified as a<a href=\"ngx_http_upstream_module.html\">server group."},{"directive":"memcached_next_upstream_tries","defaultValue":"memcached_next_upstream_tries 0;","syntax":"memcached_next_upstream_tries number;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the number of possible tries for passing a request to thenext server.The 0 value turns off this limitation."},{"directive":"memcached_next_upstream_timeout","defaultValue":"memcached_next_upstream_timeout 0;","syntax":"memcached_next_upstream_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the time during which a request can be passed to thenext server.The 0 value turns off this limitation."},{"directive":"memcached_next_upstream","defaultValue":"memcached_next_upstream error timeout;","syntax":"memcached_next_upstream     error |    timeout |    invalid_response |    not_found |    off    ...;","context":"http, server, location","description":"Specifies in which cases a request should be passed to the next server: erroran error occurred while establishing a connection with theserver, passing a request to it, or reading the response header;timeouta timeout has occurred while establishing a connection with theserver, passing a request to it, or reading the response header;invalid_responsea server returned an empty or invalid response;not_founda response was not found on the server;offdisables passing a request to the next server. One should bear in mind that passing a request to the next server isonly possible if nothing has been sent to a client yet.That is, if an error or timeout occurs in the middle of thetransferring of a response, fixing this is impossible.The directive also defines what is considered an<a href=\"ngx_http_upstream_module.html#max_fails\">unsuccessfulattempt of communication with a server.The cases of error, timeout andinvalid_header are always considered unsuccessful attempts,even if they are not specified in the directive.The case of not_foundis never considered an unsuccessful attempt.Passing a request to the next server can be limited bythe number of triesand by time."},{"directive":"memcached_gzip_flag","defaultValue":"—","syntax":"memcached_gzip_flag flag;","context":"http, server, location","description":"This directive appeared in version 1.3.6.            Enables the test for the flag presence in the memcachedserver response and sets the “Content-Encoding”response header field to “gzip”if the flag is set."},{"directive":"memcached_force_ranges","defaultValue":"memcached_force_ranges off;","syntax":"memcached_force_ranges on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Enables byte-range supportfor both cached and uncached responses from the memcached serverregardless of the “Accept-Ranges” field in these responses."},{"directive":"memcached_connect_timeout","defaultValue":"memcached_connect_timeout 60s;","syntax":"memcached_connect_timeout time;","context":"http, server, location","description":"Defines a timeout for establishing a connection with a memcached server.It should be noted that this timeout cannot usually exceed 75 seconds."},{"directive":"memcached_buffer_size","defaultValue":"memcached_buffer_size 4k|8k;","syntax":"memcached_buffer_size size;","context":"http, server, location","description":"Sets the size of the buffer used for reading the responsereceived from the memcached server.The response is passed to the client synchronously, as soon as it is received."},{"directive":"memcached_bind","defaultValue":"—","syntax":"memcached_bind     address    [ transparent ] |    off;","context":"http, server, location","description":"This directive appeared in version 0.8.22.            Makes outgoing connections to a memcached server originatefrom the specified local IP address with an optional port (1.11.2).Parameter value can contain variables (1.3.12).The special value off (1.3.12) cancels the effectof the memcached_bind directiveinherited from the previous configuration level, which allows thesystem to auto-assign the local IP address and port."},{"directive":"max_ranges","defaultValue":"—","syntax":"max_ranges number;","context":"http, server, location","description":"This directive appeared in version 1.1.2.            Limits the maximum allowed number of ranges in byte-range requests.Requests that exceed the limit are processed as if there were nobyte ranges specified.By default, the number of ranges is not limited.The zero value disables the byte-range support completely."},{"directive":"match","defaultValue":"","syntax":"","context":"","description":""},{"directive":"match","defaultValue":"","syntax":"","context":"","description":""},{"directive":"master_process","defaultValue":"master_process on;","syntax":"master_process on | off;","context":"main","description":"Determines whether worker processes are started.This directive is intended for nginx developers."},{"directive":"map_hash_max_size","defaultValue":"","syntax":"","context":"","description":""},{"directive":"map_hash_max_size","defaultValue":"","syntax":"","context":"","description":""},{"directive":"map_hash_bucket_size","defaultValue":"map_hash_bucket_size 32|64|128;","syntax":"map_hash_bucket_size size;","context":"stream","description":"Sets the bucket size for the map variables hash tables.Default value depends on the processor’s cache line size.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"map_hash_bucket_size","defaultValue":"map_hash_bucket_size 32|64|128;","syntax":"map_hash_bucket_size size;","context":"http","description":"Sets the bucket size for the map variables hash tables.Default value depends on the processor’s cache line size.The details of setting up hash tables are provided in a separate<a href=\"../hash.html\">document."},{"directive":"map","defaultValue":"—","syntax":"map     string    $variable { ... }","context":"stream","description":"Creates a new variable whose valuedepends on values of one or more of the source variablesspecified in the first parameter. Since variables are evaluated only when they are used, the mere declarationeven of a large number of “map” variablesdoes not add any extra costs to connection processing. Parameters inside the map block specify a mappingbetween source and resulting values.Source values are specified as strings or regular expressions.Strings are matched ignoring the case.A regular expression should either start from the “~”symbol for a case-sensitive matching, or from the “~*”symbols for case-insensitive matching.A regular expression can contain named and positional capturesthat can later be used in other directives along with theresulting variable.If a source value matches one of the names of special parametersdescribed below, it should be prefixed with the “\\” symbol.The resulting value can contain text,variable, and their combination.The following special parameters are also supported: default valuesets the resulting value if the source value matches noneof the specified variants.When default is not specified, the defaultresulting value will be an empty string.hostnamesindicates that source values can be hostnames with a prefix or suffix mask:*.example.com 1;example.*     1;The following two recordsexample.com   1;*.example.com 1;can be combined:.example.com  1;This parameter should be specified before the list of values.include fileincludes a file with values.There can be several inclusions.volatileindicates that the variable is not cacheable (1.11.7). If the source value matches more than one of the specified variants,e.g. both a mask and a regular expression match, the first matchingvariant will be chosen, in the following order of priority: string value without a masklongest string value with a prefix mask,e.g. “*.example.com”longest string value with a suffix mask,e.g. “mail.*”first matching regular expression(in order of appearance in a configuration file)default value"},{"directive":"map","defaultValue":"—","syntax":"map     string    $variable { ... }","context":"http","description":"Creates a new variable whose valuedepends on values of one or more of the source variablesspecified in the first parameter. Before version 0.9.0 only a single variable could bespecified in the first parameter.  Since variables are evaluated only when they are used, the mere declarationeven of a large number of “map” variablesdoes not add any extra costs to request processing. Parameters inside the map block specify a mappingbetween source and resulting values.Source values are specified as strings or regular expressions (0.9.6).Strings are matched ignoring the case.A regular expression should either start from the “~”symbol for a case-sensitive matching, or from the “~*”symbols (1.0.4) for case-insensitive matching.A regular expression can contain named and positional capturesthat can later be used in other directives along with theresulting variable.If a source value matches one of the names of special parametersdescribed below, it should be prefixed with the “\\” symbol.The resulting value can contain text,variable (0.9.0), and their combination (1.11.0).The following special parameters are also supported: default valuesets the resulting value if the source value matches noneof the specified variants.When default is not specified, the defaultresulting value will be an empty string.hostnamesindicates that source values can be hostnames with a prefix or suffix mask:*.example.com 1;example.*     1;The following two recordsexample.com   1;*.example.com 1;can be combined:.example.com  1;This parameter should be specified before the list of values.include fileincludes a file with values.There can be several inclusions.volatileindicates that the variable is not cacheable (1.11.7). If the source value matches more than one of the specified variants,e.g. both a mask and a regular expression match, the first matchingvariant will be chosen, in the following order of priority: string value without a masklongest string value with a prefix mask,e.g. “*.example.com”longest string value with a suffix mask,e.g. “mail.*”first matching regular expression(in order of appearance in a configuration file)default value"},{"directive":"mail","defaultValue":"—","syntax":"mail { ... }","context":"main","description":"Provides the configuration file context in which the mail server directivesare specified."},{"directive":"log_subrequest","defaultValue":"log_subrequest off;","syntax":"log_subrequest on | off;","context":"http, server, location","description":"Enables or disables logging of subrequests into<a href=\"ngx_http_log_module.html#access_log\">access_log."},{"directive":"log_not_found","defaultValue":"log_not_found on;","syntax":"log_not_found on | off;","context":"http, server, location","description":"Enables or disables logging of errors about not found files into<a href=\"../ngx_core_module.html#error_log\">error_log."},{"directive":"log_format","defaultValue":"—","syntax":"log_format     name    [escape=default|json]    string ...;","context":"stream","description":"Specifies the log format, for example: log_format proxy '$remote_addr [$time_local] '                 '$protocol $status $bytes_sent $bytes_received '                 '$session_time \"$upstream_addr\" '                 '\"$upstream_bytes_sent\" \"$upstream_bytes_received\" \"$upstream_connect_time\"';"},{"directive":"log_format","defaultValue":"log_format combined \"...\";","syntax":"log_format     name    [escape=default|json]    string ...;","context":"http","description":"Specifies log format."},{"directive":"lock_file","defaultValue":"lock_file logs/nginx.lock;","syntax":"lock_file file;","context":"main","description":"nginx uses the locking mechanism to implement accept_mutexand serialize access to shared memory.On most systems the locks are implemented using atomic operations,and this directive is ignored.On other systems the “lock file” mechanism is used.This directive specifies a prefix for the names of lock files."},{"directive":"location","defaultValue":"—","syntax":"location [    = |    ~ |    ~* |    ^~    ] uri { ... }location @name { ... }","context":"server, location","description":"Sets configuration depending on a request URI.The matching is performed against a normalized URI,after decoding the text encoded in the “%XX” form,resolving references to relative path components “.”and “..”, and possiblecompression of two or moreadjacent slashes into a single slash.A location can either be defined by a prefix string, or by a regular expression.Regular expressions are specified with the preceding“~*” modifier (for case-insensitive matching), or the“~” modifier (for case-sensitive matching).To find location matching a given request, nginx first checkslocations defined using the prefix strings (prefix locations).Among them, the location with the longest matchingprefix is selected and remembered.Then regular expressions are checked, in the order of their appearancein the configuration file.The search of regular expressions terminates on the first match,and the corresponding configuration is used.If no match with a regular expression is found then theconfiguration of the prefix location remembered earlier is used.location blocks can be nested, with some exceptionsmentioned below.For case-insensitive operating systems such as macOS and Cygwin,matching with prefix strings ignores a case (0.7.7).However, comparison is limited to one-byte locales.Regular expressions can contain captures (0.7.40) that can laterbe used in other directives.If the longest matching prefix location has the “^~” modifierthen regular expressions are not checked.Also, using the “=” modifier it is possible to definean exact match of URI and location.If an exact match is found, the search terminates.For example, if a “/” request happens frequently,defining “location = /” will speed up the processingof these requests, as search terminates right after the firstcomparison.Such a location cannot obviously contain nested locations. In versions from 0.7.1 to 0.8.41, if a request matched the prefixlocation without the “=” and “^~”modifiers, the search also terminated and regular expressions werenot checked. Let’s illustrate the above by an example: location = / {    [ configuration A ]}location / {    [ configuration B ]}location /documents/ {    [ configuration C ]}location ^~ /images/ {    [ configuration D ]}location ~* \\.(gif|jpg|jpeg)$ {    [ configuration E ]} The “/” request will match configuration A,the “/index.html” request will match configuration B,the “/documents/document.html” request will matchconfiguration C,the “/images/1.gif” request will match configuration D, andthe “/documents/1.jpg” request will match configuration E.The “@” prefix defines a named location.Such a location is not used for a regular request processing, but insteadused for request redirection.They cannot be nested, and cannot contain nested locations.If a location is defined by a prefix string that ends with the slash character,and requests are processed by one of<a href=\"ngx_http_proxy_module.html#proxy_pass\">proxy_pass,<a href=\"ngx_http_fastcgi_module.html#fastcgi_pass\">fastcgi_pass,<a href=\"ngx_http_uwsgi_module.html#uwsgi_pass\">uwsgi_pass,<a href=\"ngx_http_scgi_module.html#scgi_pass\">scgi_pass, or<a href=\"ngx_http_memcached_module.html#memcached_pass\">memcached_pass,then the special processing is performed.In response to a request with URI equal to this string,but without the trailing slash,a permanent redirect with the code 301 will be returned to the requested URIwith the slash appended.If this is not desired, an exact match of the URI and location could bedefined like this: location /user/ {    proxy_pass http://user.example.com;}location = /user {    proxy_pass http://login.example.com;}"},{"directive":"load_module","defaultValue":"—","syntax":"load_module file;","context":"main","description":"This directive appeared in version 1.9.11.            Loads a dynamic module.Example: load_module modules/ngx_mail_module.so;"},{"directive":"listen","defaultValue":"—","syntax":"listen     address:port    [ssl]    [udp]    [proxy_protocol]    [backlog=number]    [rcvbuf=size]    [sndbuf=size]    [bind]    [ipv6only=on|off]    [reuseport]    [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];","context":"server","description":"Sets the address and port for the socketon which the server will accept connections.It is possible to specify just the port.The address can also be a hostname, for example: listen 127.0.0.1:12345;listen *:12345;listen 12345;     # same as *:12345listen localhost:12345; IPv6 addresses are specified in square brackets: listen [::1]:12345;listen [::]:12345; UNIX-domain sockets are specified with the “unix:”prefix: listen unix:/var/run/nginx.sock; The ssl parameter allows specifying that allconnections accepted on this port should work in SSL mode."},{"directive":"listen","defaultValue":"—","syntax":"listen     address:port    [ssl]    [backlog=number]    [rcvbuf=size]    [sndbuf=size]    [bind]    [ipv6only=on|off]    [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];","context":"server","description":"Sets the address and port for the socketon which the server will accept requests.It is possible to specify just the port.The address can also be a hostname, for example: listen 127.0.0.1:110;listen *:110;listen 110;     # same as *:110listen localhost:110; IPv6 addresses (0.7.58) are specified in square brackets: listen [::1]:110;listen [::]:110; UNIX-domain sockets (1.3.5) are specified with the “unix:”prefix: listen unix:/var/run/nginx.sock; Different servers must listen on differentaddress:port pairs.The ssl parameter allows specifying that allconnections accepted on this port should work in SSL mode.The listen directivecan have several additional parameters specific to socket-related system calls. backlog=numbersets the backlog parameter in thelisten() call that limitsthe maximum length for the queue of pending connections (1.9.2).By default,backlog is set to -1 on FreeBSD, DragonFly BSD, and macOS,and to 511 on other platforms.rcvbuf=sizesets the receive buffer size(the SO_RCVBUF option) for the listening socket (1.11.13).sndbuf=sizesets the send buffer size(the SO_SNDBUF option) for the listening socket (1.11.13).bindthis parameter instructs to make a separate bind()call for a given address:port pair.The fact is that if there are several listen directives withthe same port but different addresses, and one of thelisten directives listens on all addressesfor the given port (*:port), nginx willbind() only to *:port.It should be noted that the getsockname() system call will bemade in this case to determine the address that accepted the connection.If the ipv6onlyor so_keepalive parametersare used then for a givenaddress:port paira separate bind() call will always be made.ipv6only=on|offthis parameter determines(via the IPV6_V6ONLY socket option)whether an IPv6 socket listening on a wildcard address [::]will accept only IPv6 connections or both IPv6 and IPv4 connections.This parameter is turned on by default.It can only be set once on start.so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]this parameter configures the “TCP keepalive” behaviorfor the listening socket.If this parameter is omitted then the operating system’s settings will bein effect for the socket.If it is set to the value “on”, theSO_KEEPALIVE option is turned on for the socket.If it is set to the value “off”, theSO_KEEPALIVE option is turned off for the socket.Some operating systems support setting of TCP keepalive parameters ona per-socket basis using the TCP_KEEPIDLE,TCP_KEEPINTVL, and TCP_KEEPCNT socket options.On such systems (currently, Linux 2.4+, NetBSD 5+, andFreeBSD 9.0-STABLE), they can be configuredusing the keepidle, keepintvl, andkeepcnt parameters.One or two parameters may be omitted, in which case the system default settingfor the corresponding socket option will be in effect.For example,so_keepalive=30m::10will set the idle timeout (TCP_KEEPIDLE) to 30 minutes,leave the probe interval (TCP_KEEPINTVL) at its system default,and set the probes count (TCP_KEEPCNT) to 10 probes."},{"directive":"listen","defaultValue":"listen *:80 | *:8000;","syntax":"listen     address[:port]    [default_server]    [ssl]    [http2 | spdy]    [proxy_protocol]    [setfib=number]    [fastopen=number]    [backlog=number]    [rcvbuf=size]    [sndbuf=size]    [accept_filter=filter]    [deferred]    [bind]    [ipv6only=on|off]    [reuseport]    [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];listen     port    [default_server]    [ssl]    [http2 | spdy]    [proxy_protocol]    [setfib=number]    [fastopen=number]    [backlog=number]    [rcvbuf=size]    [sndbuf=size]    [accept_filter=filter]    [deferred]    [bind]    [ipv6only=on|off]    [reuseport]    [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];listen     unix:path    [default_server]    [ssl]    [http2 | spdy]    [proxy_protocol]    [backlog=number]    [rcvbuf=size]    [sndbuf=size]    [accept_filter=filter]    [deferred]    [bind]    [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];","context":"server","description":"Sets the address and port for IP,or the path for a UNIX-domain socket on whichthe server will accept requests.Both address and port,or only address or only port can be specified.An address may also be a hostname, for example: listen 127.0.0.1:8000;listen 127.0.0.1;listen 8000;listen *:8000;listen localhost:8000; IPv6 addresses (0.7.36) are specified in square brackets: listen [::]:8000;listen [::1]; UNIX-domain sockets (0.8.21) are specified with the “unix:”prefix: listen unix:/var/run/nginx.sock; If only address is given, the port 80 is used.If the directive is not present then either *:80 is usedif nginx runs with the superuser privileges, or *:8000otherwise.The default_server parameter, if present,will cause the server to become the default server for the specifiedaddress:port pair.If none of the directives have the default_serverparameter then the first server with theaddress:port pair will bethe default server for this pair. In versions prior to 0.8.21 this parameter is named simplydefault. The ssl parameter (0.7.14) allows specifying that allconnections accepted on this port should work in SSL mode.This allows for a more compact <a href=\"configuring_https_servers.html#single_http_https_server\">configuration for the server thathandles both HTTP and HTTPS requests.The http2 parameter (1.9.5) configures the port to accept<a href=\"ngx_http_v2_module.html\">HTTP/2 connections.Normally, for this to work the ssl parameter should bespecified as well, but nginx can also be configured to accept HTTP/2connections without SSL.The spdy parameter (1.3.15-1.9.4) allows accepting<a href=\"ngx_http_spdy_module.html\">SPDY connections on this port.Normally, for this to work the ssl parameter should bespecified as well, but nginx can also be configured to accept SPDYconnections without SSL.The proxy_protocol parameter (1.5.12)allows specifying that all connections accepted on this port should use the<a href=\"http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt\">PROXYprotocol.The listen directivecan have several additional parameters specific to socket-related system calls.These parameters can be specified in anylisten directive, but only once for a givenaddress:port pair. In versions prior to 0.8.21, they could only bespecified in the listen directive together with thedefault parameter.  setfib=numberthis parameter (0.8.44) sets the associated routing table, FIB(the SO_SETFIB option) for the listening socket.This currently works only on FreeBSD.fastopen=numberenables“<a href=\"http://en.wikipedia.org/wiki/TCP_Fast_Open\">TCP Fast Open”for the listening socket (1.5.8) and<a href=\"https://tools.ietf.org/html/rfc7413#section-5.1\">limitsthe maximum length for the queue of connections that have not yet completedthe three-way handshake.Do not enable this feature unless the server can handlereceiving the<a href=\"https://tools.ietf.org/html/rfc7413#section-6.1\">same SYN packet with data more than once.backlog=numbersets the backlog parameter in thelisten() call that limitsthe maximum length for the queue of pending connections.By default,backlog is set to -1 on FreeBSD, DragonFly BSD, and macOS,and to 511 on other platforms.rcvbuf=sizesets the receive buffer size(the SO_RCVBUF option) for the listening socket.sndbuf=sizesets the send buffer size(the SO_SNDBUF option) for the listening socket.accept_filter=filtersets the name of accept filter(the SO_ACCEPTFILTER option) for the listening socketthat filters incoming connections before passing them toaccept().This works only on FreeBSD and NetBSD 5.0+.Possible values are<a href=\"http://man.freebsd.org/accf_data\">datareadyand<a href=\"http://man.freebsd.org/accf_http\">httpready.deferredinstructs to use a deferred accept()(the TCP_DEFER_ACCEPT socket option) on Linux.bindinstructs to make a separate bind() call for a givenaddress:port pair.This is useful because if there are several listendirectives with the same port but different addresses, and one of thelisten directives listens on all addressesfor the given port (*:port), nginxwill bind() only to *:port.It should be noted that the getsockname() system call will bemade in this case to determine the address that accepted the connection.If the setfib,backlog, rcvbuf,sndbuf, accept_filter,deferred, ipv6only,or so_keepalive parametersare used then for a givenaddress:port paira separate bind() call will always be made.ipv6only=on|offthis parameter (0.7.42) determines(via the IPV6_V6ONLY socket option)whether an IPv6 socket listening on a wildcard address [::]will accept only IPv6 connections or both IPv6 and IPv4 connections.This parameter is turned on by default.It can only be set once on start.Prior to version 1.3.4,if this parameter was omitted then the operating system’s settings werein effect for the socket.reuseportthis parameter (1.9.1) instructs to create an individual listening socketfor each worker process(using the SO_REUSEPORT socket option), allowing a kernelto distribute incoming connections between worker processes.This currently works only on Linux 3.9+ and DragonFly BSD.Inappropriate use of this option may have its security<a href=\"http://man7.org/linux/man-pages/man7/socket.7.html\">implications.so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]this parameter (1.1.11) configures the “TCP keepalive” behaviorfor the listening socket.If this parameter is omitted then the operating system’s settings will bein effect for the socket.If it is set to the value “on”, theSO_KEEPALIVE option is turned on for the socket.If it is set to the value “off”, theSO_KEEPALIVE option is turned off for the socket.Some operating systems support setting of TCP keepalive parameters ona per-socket basis using the TCP_KEEPIDLE,TCP_KEEPINTVL, and TCP_KEEPCNT socket options.On such systems (currently, Linux 2.4+, NetBSD 5+, andFreeBSD 9.0-STABLE), they can be configuredusing the keepidle, keepintvl, andkeepcnt parameters.One or two parameters may be omitted, in which case the system default settingfor the corresponding socket option will be in effect.For example,so_keepalive=30m::10will set the idle timeout (TCP_KEEPIDLE) to 30 minutes,leave the probe interval (TCP_KEEPINTVL) at its system default,and set the probes count (TCP_KEEPCNT) to 10 probes. Example: listen 127.0.0.1 default_server accept_filter=dataready backlog=1024;"},{"directive":"lingering_timeout","defaultValue":"lingering_timeout 5s;","syntax":"lingering_timeout time;","context":"http, server, location","description":"When lingering_close is in effect, this directive specifiesthe maximum waiting time for more client data to arrive.If data are not received during this time, the connection is closed.Otherwise, the data are read and ignored, and nginx starts waitingfor more data again.The “wait-read-ignore” cycle is repeated, but no longer than specified by thelingering_time directive."},{"directive":"lingering_time","defaultValue":"lingering_time 30s;","syntax":"lingering_time time;","context":"http, server, location","description":"When lingering_close is in effect,this directive specifies the maximum time during which nginxwill process (read and ignore) additional data coming from a client.After that, the connection will be closed, even if there will bemore data."},{"directive":"lingering_close","defaultValue":"lingering_close on;","syntax":"lingering_close     off |    on |    always;","context":"http, server, location","description":"This directive appeared in versions 1.1.0 and 1.0.6.                                                                Controls how nginx closes client connections.The default value “on” instructs nginx towait for andprocess additional data from a clientbefore fully closing a connection, but onlyif heuristics suggests that a client may be sending more data.The value “always” will cause nginx to unconditionallywait for and process additional client data.The value “off” tells nginx to never wait formore data and close the connection immediately.This behavior breaks the protocol and should not be used under normalcircumstances."},{"directive":"limit_zone","defaultValue":"","syntax":"","context":"","description":""},{"directive":"limit_req_zone","defaultValue":"","syntax":"","context":"","description":""},{"directive":"limit_req_status","defaultValue":"limit_req_status 503;","syntax":"limit_req_status code;","context":"http, server, location","description":"This directive appeared in version 1.3.15.            Sets the status code to return in response to rejected requests."},{"directive":"limit_req_log_level","defaultValue":"limit_req_log_level error;","syntax":"limit_req_log_level info |notice |warn |error;","context":"http, server, location","description":"This directive appeared in version 0.8.18.            Sets the desired logging levelfor cases when the server refuses to process requestsdue to rate exceeding,or delays request processing.Logging level for delays is one point less than for refusals; for example,if “limit_req_log_level notice” is specified,delays are logged with the info level."},{"directive":"limit_req","defaultValue":"—","syntax":"limit_req     zone=name    [burst=number]    [nodelay];","context":"http, server, location","description":"Sets the shared memory zoneand the maximum burst size of requests.If the requests rate exceeds the rate configured for a zone,their processing is delayed such that requests are processedat a defined rate.Excessive requests are delayed until their number exceeds themaximum burst sizein which case the request is terminated with anerror.By default, the maximum burst size is equal to zero.For example, the directives limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;server {    location /search/ {        limit_req zone=one burst=5;    } allow not more than 1 request per second at an average,with bursts not exceeding 5 requests.If delaying of excessive requests while requests are being limited is notdesired, the parameter nodelay should be used: limit_req zone=one burst=5 nodelay; There could be several limit_req directives.For example, the following configuration will limit the processing rateof requests coming from a single IP address and, at the same time,the request processing rate by the virtual server: limit_req_zone $binary_remote_addr zone=perip:10m rate=1r/s;limit_req_zone $server_name zone=perserver:10m rate=10r/s;server {    ...    limit_req zone=perip burst=5 nodelay;    limit_req zone=perserver burst=10;} These directives are inherited from the previous level if andonly if there are nolimit_reqdirectives on the current level."},{"directive":"limit_rate_after","defaultValue":"limit_rate_after 0;","syntax":"limit_rate_after size;","context":"http, server, location, if in location","description":"This directive appeared in version 0.8.0.            Sets the initial amount after which the further transmissionof a response to a client will be rate limited.Example: location /flv/ {    flv;    limit_rate_after 500k;    limit_rate       50k;}"},{"directive":"limit_rate","defaultValue":"limit_rate 0;","syntax":"limit_rate rate;","context":"http, server, location, if in location","description":"Limits the rate of response transmission to a client.The rate is specified in bytes per second.The zero value disables rate limiting.The limit is set per a request, and so if a client simultaneously openstwo connections, the overall rate will be twice as muchas the specified limit.Rate limit can also be set in the $limit_rate variable.It may be useful in cases where rate should be limiteddepending on a certain condition: server {    if ($slow) {        set $limit_rate 4k;    }    ...} Rate limit can also be set in the“X-Accel-Limit-Rate” header field of a proxied server response.This capability can be disabled using the<a href=\"ngx_http_proxy_module.html#proxy_ignore_headers\">proxy_ignore_headers,<a href=\"ngx_http_fastcgi_module.html#fastcgi_ignore_headers\">fastcgi_ignore_headers,<a href=\"ngx_http_uwsgi_module.html#uwsgi_ignore_headers\">uwsgi_ignore_headers,and<a href=\"ngx_http_scgi_module.html#scgi_ignore_headers\">scgi_ignore_headersdirectives."},{"directive":"limit_except","defaultValue":"—","syntax":"limit_except method ... { ... }","context":"location","description":"Limits allowed HTTP methods inside a location.The method parameter can be one of the following:GET,HEAD,POST,PUT,DELETE,MKCOL,COPY,MOVE,OPTIONS,PROPFIND,PROPPATCH,LOCK,UNLOCK,orPATCH.Allowing the GET method makes theHEAD method also allowed.Access to other methods can be limited using the<a href=\"ngx_http_access_module.html\">ngx_http_access_moduleand<a href=\"ngx_http_auth_basic_module.html\">ngx_http_auth_basic_modulemodules directives: limit_except GET {    allow 192.168.1.0/32;    deny  all;} Please note that this will limit access to all methodsexcept GET and HEAD."},{"directive":"limit_conn_zone","defaultValue":"","syntax":"","context":"","description":""},{"directive":"limit_conn_zone","defaultValue":"—","syntax":"limit_conn_zone     key    zone=name:size;","context":"http","description":"Sets parameters for a shared memory zonethat will keep states for various keys.In particular, the state includes the current number of connections.The key can contain text, variables, and their combination.Requests with an empty key value are not accounted. Prior to version 1.7.6, a key could contain exactly one variable. Usage example: limit_conn_zone $binary_remote_addr zone=addr:10m; Here, a client IP address serves as a key.Note that instead of $remote_addr, the$binary_remote_addr variable is used here.The $remote_addr variable’s size canvary from 7 to 15 bytes.The stored state occupies either32 or 64 bytes of memory on 32-bit platforms and always 64bytes on 64-bit platforms.The $binary_remote_addr variable’s sizeis always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses.The stored state always occupies 32 or 64 byteson 32-bit platforms and 64 bytes on 64-bit platforms.One megabyte zone can keep about 32 thousand 32-byte statesor about 16 thousand 64-byte states.If the zone storage is exhausted, the server will return theerrorto all further requests."},{"directive":"limit_conn_status","defaultValue":"limit_conn_status 503;","syntax":"limit_conn_status code;","context":"http, server, location","description":"This directive appeared in version 1.3.15.            Sets the status code to return in response to rejected requests."},{"directive":"limit_conn_log_level","defaultValue":"limit_conn_log_level error;","syntax":"limit_conn_log_level info |notice |warn |error;","context":"stream, server","description":"Sets the desired logging level for cases when the serverlimits the number of connections."},{"directive":"limit_conn_log_level","defaultValue":"limit_conn_log_level error;","syntax":"limit_conn_log_level info |notice |warn |error;","context":"http, server, location","description":"This directive appeared in version 0.8.18.            Sets the desired logging level for cases when the serverlimits the number of connections."},{"directive":"limit_conn","defaultValue":"—","syntax":"limit_conn zone number;","context":"stream, server","description":"Sets the shared memory zoneand the maximum allowed number of connections for a given key value.When this limit is exceeded, the server will close the connection.For example, the directives limit_conn_zone $binary_remote_addr zone=addr:10m;server {    ...    limit_conn addr 1;} allow only one connection per an IP address at a time.When several limit_conn directives are specified,any configured limit will apply.The directives are inherited from the previous level if andonly if there are nolimit_conndirectives on the current level."},{"directive":"limit_conn","defaultValue":"—","syntax":"limit_conn zone number;","context":"http, server, location","description":"Sets the shared memory zoneand the maximum allowed number of connections for a given key value.When this limit is exceeded, the server will return theerrorin reply to a request.For example, the directives limit_conn_zone $binary_remote_addr zone=addr:10m;server {    location /download/ {        limit_conn addr 1;    } allow only one connection per an IP address at a time. In HTTP/2 and SPDY, each concurrent request is considered a separate connection. There could be several limit_conn directives.For example, the following configuration will limit the numberof connections to the server per a client IP and, at the same time,the total number of connections to the virtual server: limit_conn_zone $binary_remote_addr zone=perip:10m;limit_conn_zone $server_name zone=perserver:10m;server {    ...    limit_conn perip 10;    limit_conn perserver 100;} These directives are inherited from the previous level if andonly if there are nolimit_conndirectives on the current level."},{"directive":"least_time","defaultValue":"—","syntax":"least_time     connect |    first_byte |    last_byte    [inflight];","context":"upstream","description":"Specifies that a group should use a load balancing method where a connectionis passed to the server with the least average time andleast number of active connections, taking into account weights of servers.If there are several such servers, they are tried in turn using aweighted round-robin balancing method.If the connect parameter is specified,time to connect to the upstream server is used.If the first_byte parameter is specified,time to receive the first byte of data is used.If the last_byte is specified,time to receive the last byte of data is used.If the inflight parameter is specified (1.11.6),incomplete connections are also taken into account. Prior to version 1.11.6,incomplete connections were taken into account by default.  This directive is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"least_time","defaultValue":"—","syntax":"least_time     header |    last_byte    [inflight];","context":"upstream","description":"This directive appeared in version 1.7.10.            Specifies that a group should use a load balancing method where a requestis passed to the server with the least average response time andleast number of active connections, taking into account weights of servers.If there are several such servers, they are tried in turn using aweighted round-robin balancing method.If the header parameter is specified,time to receive theresponse header is used.If the last_byte parameter is specified,time to receive the full responseis used.If the inflight parameter is specified (1.11.6),incomplete requests are also taken into account. Prior to version 1.11.6, incomplete requests were taken into account by default.  This directive is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"least_conn","defaultValue":"—","syntax":"least_conn;","context":"upstream","description":"Specifies that a server group should use a load balancing methodwhere a connectionis passed to the server with the least number of active connections,taking into account weights of servers.If there are several such servers, they are tried in turn using aweighted round-robin balancing method."},{"directive":"least_conn","defaultValue":"—","syntax":"least_conn;","context":"upstream","description":"This directive appeared in versions 1.3.1 and 1.2.2.                                                                Specifies that a group should use a load balancing method where a requestis passed to the server with the least number of active connections,taking into account weights of servers.If there are several such servers, they are tried in turn using aweighted round-robin balancing method."},{"directive":"large_client_header_buffers","defaultValue":"large_client_header_buffers 4 8k;","syntax":"large_client_header_buffers number size;","context":"http, server","description":"Sets the maximum number and size ofbuffers used for reading large client request header.A request line cannot exceed the size of one buffer, or the414 (Request-URI Too Large)error is returned to the client.A request header field cannot exceed the size of one buffer as well, or the400 (Bad Request)error is returned to the client.Buffers are allocated only on demand.By default, the buffer size is equal to 8K bytes.If after the end of request processing a connection is transitionedinto the keep-alive state, these buffers are released."},{"directive":"keyval_zone","defaultValue":"","syntax":"","context":"","description":""},{"directive":"keyval","defaultValue":"—","syntax":"keyval     key    $variable    zone=name;","context":"http","description":"Creates a new $variable whose valueis looked up by the key in the key-value database.Strings are matched ignoring the case.The database is stored in a shared memory zonespecified by the zone parameter."},{"directive":"keepalive_timeout","defaultValue":"keepalive_timeout 75s;","syntax":"keepalive_timeout     timeout    [header_timeout];","context":"http, server, location","description":"The first parameter sets a timeout during which a keep-aliveclient connection will stay open on the server side.The zero value disables keep-alive client connections.The optional second parameter sets a value in the“Keep-Alive: timeout=time”response header field.Two parameters may differ.The“Keep-Alive: timeout=time”header field is recognized by Mozilla and Konqueror.MSIE closes keep-alive connections by itself in about 60 seconds."},{"directive":"keepalive_requests","defaultValue":"keepalive_requests 100;","syntax":"keepalive_requests number;","context":"http, server, location","description":"This directive appeared in version 0.8.0.            Sets the maximum number of requests that can beserved through one keep-alive connection.After the maximum number of requests are made, the connection is closed."},{"directive":"keepalive_disable","defaultValue":"keepalive_disable msie6;","syntax":"keepalive_disable none | browser ...;","context":"http, server, location","description":"Disables keep-alive connections with misbehaving browsers.The browser parameters specify whichbrowsers will be affected.The value msie6 disables keep-alive connectionswith old versions of MSIE, once a POST request is received.The value safari disables keep-alive connectionswith Safari and Safari-like browsers on macOS and macOS-likeoperating systems.The value none enables keep-alive connectionswith all browsers. Prior to version 1.1.18, the value safari matchedall Safari and Safari-like browsers on all operating systems, andkeep-alive connections with them were disabled by default."},{"directive":"keepalive","defaultValue":"—","syntax":"keepalive connections;","context":"upstream","description":"This directive appeared in version 1.1.4.            Activates the cache for connections to upstream servers.The connections parameter sets the maximum number ofidle keepalive connections to upstream servers that are preserved inthe cache of each worker process.When this number is exceeded, the least recently used connectionsare closed. It should be particularly noted that the keepalive directivedoes not limit the total number of connections to upstream serversthat an nginx worker process can open.The connections parameter should be set to a number small enoughto let upstream servers process new incoming connections as well. Example configuration of memcached upstream with keepalive connections: upstream memcached_backend {    server 127.0.0.1:11211;    server 10.0.0.2:11211;    keepalive 32;}server {    ...    location /memcached/ {        set $memcached_key $uri;        memcached_pass memcached_backend;    }} For HTTP, the <a href=\"ngx_http_proxy_module.html#proxy_http_version\">proxy_http_versiondirective should be set to “1.1”and the “Connection” header field should be cleared: upstream http_backend {    server 127.0.0.1:8080;    keepalive 16;}server {    ...    location /http/ {        proxy_pass http://http_backend;        proxy_http_version 1.1;        proxy_set_header Connection \"\";        ...    }}  Alternatively, HTTP/1.0 persistent connections can be used by passing the“Connection: Keep-Alive” header field to an upstream server,though this method is not recommended. For FastCGI servers, it is required to set<a href=\"ngx_http_fastcgi_module.html#fastcgi_keep_conn\">fastcgi_keep_connfor keepalive connections to work: upstream fastcgi_backend {    server 127.0.0.1:9000;    keepalive 8;}server {    ...    location /fastcgi/ {        fastcgi_pass fastcgi_backend;        fastcgi_keep_conn on;        ...    }}  When using load balancer methods other than the defaultround-robin method, it is necessary to activate them beforethe keepalive directive.  SCGI and uwsgi protocols do not have a notion of keepalive connections."},{"directive":"js_set","defaultValue":"—","syntax":"js_set $variable function;","context":"stream","description":"Sets an nginScript function for the specified variable."},{"directive":"js_set","defaultValue":"—","syntax":"js_set $variable function;","context":"http","description":"Sets an nginScript function for the specified variable."},{"directive":"js_preread","defaultValue":"—","syntax":"js_preread function;","context":"stream, server","description":"Sets an nginScript function which will be called at the<a href=\"stream_processing.html#preread_phase\">preread phase."},{"directive":"js_include","defaultValue":"—","syntax":"js_include file;","context":"stream","description":"Specifies a file that implements server and variable handlers in nginScript."},{"directive":"js_include","defaultValue":"—","syntax":"js_include file;","context":"http","description":"Specifies a file that implements location and variable handlers in nginScript."},{"directive":"js_filter","defaultValue":"—","syntax":"js_filter function;","context":"stream, server","description":"Sets a data filter."},{"directive":"js_content","defaultValue":"—","syntax":"js_content function;","context":"location, limit_except","description":"Sets an nginScript function as a location content handler."},{"directive":"js_access","defaultValue":"—","syntax":"js_access function;","context":"stream, server","description":"Sets an nginScript function which will be called at the<a href=\"stream_processing.html#access_phase\">access phase."},{"directive":"ip_hash","defaultValue":"—","syntax":"ip_hash;","context":"upstream","description":"Specifies that a group should use a load balancing method where requestsare distributed between servers based on client IP addresses.The first three octets of the client IPv4 address, or the entire IPv6 address,are used as a hashing key.The method ensures that requests from the same client will always bepassed to the same server except when this server is unavailable.In the latter case client requests will be passed to another server.Most probably, it will always be the same server as well. IPv6 addresses are supported starting from versions 1.3.2 and 1.2.2. If one of the servers needs to be temporarily removed, it shouldbe marked with the down parameter inorder to preserve the current hashing of client IP addresses.Example: upstream backend {    ip_hash;    server backend1.example.com;    server backend2.example.com;    server backend3.example.com down;    server backend4.example.com;}  Until versions 1.3.1 and 1.2.2, it was not possible to specify a weight forservers using the ip_hash load balancing method."},{"directive":"internal","defaultValue":"—","syntax":"internal;","context":"location","description":"Specifies that a given location can only be used for internal requests.For external requests, the client error404 (Not Found)is returned.Internal requests are the following: requests redirected by theerror_page,<a href=\"ngx_http_index_module.html#index\">index,<a href=\"ngx_http_random_index_module.html#random_index\">random_index, andtry_files directives;requests redirected by the “X-Accel-Redirect”response header field from an upstream server;subrequests formed by the“include virtual”command of the<a href=\"ngx_http_ssi_module.html\">ngx_http_ssi_modulemodule, by the<a href=\"ngx_http_addition_module.html\">ngx_http_addition_modulemodule directives, and by<a href=\"ngx_http_auth_request_module.html#auth_request\">auth_request and<a href=\"ngx_http_mirror_module.html#mirror\">mirror directives;requests changed by the<a href=\"ngx_http_rewrite_module.html#rewrite\">rewrite directive. Example: error_page 404 /404.html;location /404.html {    internal;}  There is a limit of 10 internal redirects per request to preventrequest processing cycles that can occur in incorrect configurations.If this limit is reached, the error500 (Internal Server Error) is returned.In such cases, the “rewrite or internal redirection cycle” messagecan be seen in the error log."},{"directive":"index","defaultValue":"","syntax":"","context":"","description":""},{"directive":"include","defaultValue":"—","syntax":"include file | mask;","context":"any","description":"Includes another file, or files matching thespecified mask, into configuration.Included files should consist ofsyntactically correct directives and blocks.Usage example: include mime.types;include vhosts/*.conf;"},{"directive":"imap_client_buffer","defaultValue":"","syntax":"","context":"","description":""},{"directive":"imap_capabilities","defaultValue":"imap_capabilities IMAP4 IMAP4rev1 UIDPLUS;","syntax":"imap_capabilities extension ...;","context":"mail, server","description":"Sets the<a href=\"https://tools.ietf.org/html/rfc3501\">IMAP protocolextensions list that is passed to the client in response tothe CAPABILITY command.The authentication methods specified in the imap_auth directive and<a href=\"https://tools.ietf.org/html/rfc2595\">STARTTLSare automatically added to this list depending on the<a href=\"ngx_mail_ssl_module.html#starttls\">starttls directive value.It makes sense to specify the extensionssupported by the IMAP backendsto which the clients are proxied (if these extensions are related to commandsused after the authentication, when nginx transparently proxies a clientconnection to the backend).The current list of standardized extensions is published at<a href=\"http://www.iana.org/assignments/imap4-capabilities\">www.iana.org."},{"directive":"imap_auth","defaultValue":"imap_auth plain;","syntax":"imap_auth method ...;","context":"mail, server","description":"Sets permitted methods of authentication for IMAP clients.Supported methods are: login<a href=\"https://tools.ietf.org/html/draft-murchison-sasl-login-00\">AUTH=LOGINplain<a href=\"https://tools.ietf.org/html/rfc4616\">AUTH=PLAINcram-md5<a href=\"https://tools.ietf.org/html/rfc2195\">AUTH=CRAM-MD5.In order for this method to work, the password must be stored unencrypted.external<a href=\"https://tools.ietf.org/html/rfc4422\">AUTH=EXTERNAL (1.11.6)."},{"directive":"image_filter_webp_quality","defaultValue":"","syntax":"","context":"","description":""},{"directive":"image_filter_transparency","defaultValue":"image_filter_transparency on;","syntax":"image_filter_transparency on|off;","context":"http, server, location","description":"Defines whether transparency should be preserved when transformingGIF images or PNG images with colors specified by a palette.The loss of transparency results in images of a better quality.The alpha channel transparency in PNG is always preserved."},{"directive":"image_filter_sharpen","defaultValue":"image_filter_sharpen 0;","syntax":"image_filter_sharpen percent;","context":"http, server, location","description":"Increases sharpness of the final image.The sharpness percentage can exceed 100.The zero value disables sharpening.Parameter value can contain variables."},{"directive":"image_filter_jpeg_quality","defaultValue":"image_filter_jpeg_quality 75;","syntax":"image_filter_jpeg_quality quality;","context":"http, server, location","description":"Sets the desired quality of the transformed JPEG images.Acceptable values are in the range from 1 to 100.Lesser values usually imply both lower image quality and less data to transfer.The maximum recommended value is 95.Parameter value can contain variables."},{"directive":"image_filter_interlace","defaultValue":"image_filter_interlace off;","syntax":"image_filter_interlace on | off;","context":"http, server, location","description":"This directive appeared in version 1.3.15.            If enabled, final images will be interlaced.For JPEG, final images will be in “progressive JPEG” format."},{"directive":"image_filter_buffer","defaultValue":"image_filter_buffer 1M;","syntax":"image_filter_buffer size;","context":"http, server, location","description":"Sets the maximum size of the buffer used for reading images.When the size is exceeded the server returns error415 (Unsupported Media Type)."},{"directive":"image_filter","defaultValue":"image_filter off;","syntax":"image_filter off;image_filter test;image_filter size;image_filter     rotate    90 | 180 |    270;image_filter     resize    width    height;image_filter     crop    width    height;","context":"location","description":"Sets the type of transformation to perform on images: offturns off module processing in a surrounding location.testensures that responses are images in either JPEG, GIF, PNG, or WebP format.Otherwise, the415 (Unsupported Media Type)error is returned.sizeoutputs information about images in a JSON format, e.g.:{ \"img\" : { \"width\": 100, \"height\": 100, \"type\": \"gif\" } }In case of an error, the output is as follows:{}rotate90|180|270rotates images counter-clockwise by the specified number of degrees.Parameter value can contain variables.This mode can be used either alone or along with theresize and crop transformations.resizewidthheightproportionally reduces an image to the specified sizes.To reduce by only one dimension, another dimension can be specified as“-”.In case of an error, the server will return code415 (Unsupported Media Type).Parameter values can contain variables.When used along with the rotate parameter,the rotation happens after reduction.cropwidthheightproportionally reduces an image to the larger side sizeand crops extraneous edges by another side.To reduce by only one dimension, another dimension can be specified as“-”.In case of an error, the server will return code415 (Unsupported Media Type).Parameter values can contain variables.When used along with the rotate parameter,the rotation happens before reduction."},{"directive":"ignore_invalid_headers","defaultValue":"ignore_invalid_headers on;","syntax":"ignore_invalid_headers on | off;","context":"http, server","description":"Controls whether header fields with invalid names should be ignored.Valid names are composed of English letters, digits, hyphens, and possiblyunderscores (as controlled by the underscores_in_headersdirective).If the directive is specified on the server level,its value is only used if a server is a default one.The value specified also applies to all virtual serverslistening on the same address and port."},{"directive":"if_modified_since","defaultValue":"if_modified_since exact;","syntax":"if_modified_since     off |    exact |    before;","context":"http, server, location","description":"This directive appeared in version 0.7.24.            Specifies how to compare modification time of a responsewith the time in the“If-Modified-Since”request header field: offthe“If-Modified-Since” request header field is ignored (0.7.34);exactexact match;beforemodification time of a response isless than or equal to the time in the “If-Modified-Since”request header field."},{"directive":"if","defaultValue":"—","syntax":"if (condition) { ... }","context":"server, location","description":"The specified condition is evaluated.If true, this module directives specified inside the braces areexecuted, and the request is assigned the configuration inside theif directive.Configurations inside the if directives areinherited from the previous configuration level.A condition may be any of the following: a variable name; false if the value of a variable is an empty stringor “0”;Before version 1.0.1, any string starting with “0”was considered a false value.comparison of a variable with a string using the“=” and “!=” operators;matching of a variable against a regular expression using the“~” (for case-sensitive matching) and“~*” (for case-insensitive matching) operators.Regular expressions can contain captures that are made available forlater reuse in the $1..$9 variables.Negative operators “!~” and “!~*”are also available.If a regular expression includes the “}”or “;” characters, the whole expressions should be enclosedin single or double quotes.checking of a file existence with the “-f” and“!-f” operators;checking of a directory existence with the “-d” and“!-d” operators;checking of a file, directory, or symbolic link existence with the“-e” and “!-e” operators;checking for an executable file with the “-x”and “!-x” operators. Examples: if ($http_user_agent ~ MSIE) {    rewrite ^(.*)$ /msie/$1 break;}if ($http_cookie ~* \"id=([^;]+)(?:;|$)\") {    set $id $1;}if ($request_method = POST) {    return 405;}if ($slow) {    limit_rate 10k;}if ($invalid_referer) {    return 403;}  A value of the $invalid_referer embedded variable is set by the<a href=\"ngx_http_referer_module.html#valid_referers\">valid_referers directive."},{"directive":"http2_recv_timeout","defaultValue":"http2_recv_timeout 30s;","syntax":"http2_recv_timeout time;","context":"http, server","description":"Sets the timeout for expecting more data from the client,after which the connection is closed."},{"directive":"http2_recv_buffer_size","defaultValue":"http2_recv_buffer_size 256k;","syntax":"http2_recv_buffer_size size;","context":"http","description":"Sets the size of the per<a href=\"../ngx_core_module.html#worker_processes\">workerinput buffer."},{"directive":"http2_max_requests","defaultValue":"http2_max_requests 1000;","syntax":"http2_max_requests number;","context":"http, server, location","description":"This directive appeared in version 1.11.6.            Sets the maximum number of requests that can beserved through one HTTP/2 connection,after which the connection is closedand the client should use a new connection."},{"directive":"http2_max_header_size","defaultValue":"http2_max_header_size 16k;","syntax":"http2_max_header_size size;","context":"http, server","description":"Limits the maximum size of the entire request header list after<a href=\"https://tools.ietf.org/html/rfc7541\">HPACK decompression.For most requests, the default limit should be enough."},{"directive":"http2_max_field_size","defaultValue":"http2_max_field_size 4k;","syntax":"http2_max_field_size size;","context":"http, server","description":"Limits the maximum size ofan <a href=\"https://tools.ietf.org/html/rfc7541\">HPACK-compressedrequest header field.The limit applies equally to both name and value.Note that if Huffman encoding is applied,the actual size of decompressed name and value strings may be larger.For most requests, the default limit should be enough."},{"directive":"http2_max_concurrent_streams","defaultValue":"http2_max_concurrent_streams 128;","syntax":"http2_max_concurrent_streams number;","context":"http, server","description":"Sets the maximum number of concurrent HTTP/2 streamsin a connection."},{"directive":"http2_idle_timeout","defaultValue":"http2_idle_timeout 3m;","syntax":"http2_idle_timeout time;","context":"http, server","description":"Sets the timeout of inactivity after which the connection is closed."},{"directive":"http2_chunk_size","defaultValue":"http2_chunk_size 8k;","syntax":"http2_chunk_size size;","context":"http, server, location","description":"Sets the maximum size of chunksinto which the response body is sliced.A too low value results in higher overhead.A too high value impairs prioritization due to<a href=\"http://en.wikipedia.org/wiki/Head-of-line_blocking\">HOL blocking."},{"directive":"http2_body_preread_size","defaultValue":"http2_body_preread_size 64k;","syntax":"http2_body_preread_size size;","context":"http, server","description":"This directive appeared in version 1.11.0.            Sets the size of the buffer per each requestin which the request body may be savedbefore it is started to be processed."},{"directive":"http","defaultValue":"—","syntax":"http { ... }","context":"main","description":"Provides the configuration file context in which the HTTP server directivesare specified."},{"directive":"hls_mp4_max_buffer_size","defaultValue":"","syntax":"","context":"","description":""},{"directive":"hls_mp4_buffer_size","defaultValue":"hls_mp4_buffer_size 512k;","syntax":"hls_mp4_buffer_size size;","context":"http, server, location","description":"Sets the initial size of the buffer used forprocessing MP4 and MOV files."},{"directive":"hls_fragment","defaultValue":"hls_fragment 5s;","syntax":"hls_fragment time;","context":"http, server, location","description":"Defines the default fragment length for playlist URIs requested without the“len” argument."},{"directive":"hls_forward_args","defaultValue":"hls_forward_args off;","syntax":"hls_forward_args on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.12.            Adds arguments from a playlist request to URIs of fragments.This may be useful for performing client authorization at the moment ofrequesting a fragment, or when protecting an HLS stream with the<a href=\"ngx_http_secure_link_module.html\">ngx_http_secure_link_modulemodule.For example, if a client requests a playlisthttp://example.com/hls/test.mp4.m3u8?a=1&amp;b=2,the arguments a=1 and b=2will be added to URIs of fragments after the argumentsstart and end: #EXTM3U#EXT-X-VERSION:3#EXT-X-TARGETDURATION:15#EXT-X-PLAYLIST-TYPE:VOD#EXTINF:9.333,test.mp4.ts?start=0.000&amp;end=9.333&amp;a=1&amp;b=2#EXTINF:7.167,test.mp4.ts?start=9.333&amp;end=16.500&amp;a=1&amp;b=2#EXTINF:5.416,test.mp4.ts?start=16.500&amp;end=21.916&amp;a=1&amp;b=2#EXTINF:5.500,test.mp4.ts?start=21.916&amp;end=27.416&amp;a=1&amp;b=2#EXTINF:15.167,test.mp4.ts?start=27.416&amp;end=42.583&amp;a=1&amp;b=2#EXTINF:9.626,test.mp4.ts?start=42.583&amp;end=52.209&amp;a=1&amp;b=2#EXT-X-ENDLIST If an HLS stream is protected with the<a href=\"ngx_http_secure_link_module.html\">ngx_http_secure_link_modulemodule, $uri should not be used in the<a href=\"ngx_http_secure_link_module.html#secure_link_md5\">secure_link_md5expression because this will cause errors when requesting the fragments.<a href=\"ngx_http_map_module.html#map\">Base URI should be usedinstead of $uri($hls_uri in the example): http {    ...    map $uri $hls_uri {        ~^(?&lt;base_uri&gt;.*).m3u8$ $base_uri;        ~^(?&lt;base_uri&gt;.*).ts$   $base_uri;        default                 $uri;    }    server {        ...        location /hls {            hls;            hls_forward_args on;            alias /var/videos;            secure_link $arg_md5,$arg_expires;            secure_link_md5 \"$secure_link_expires$hls_uri$remote_addr secret\";            if ($secure_link = \"\") {                return 403;            }            if ($secure_link = \"0\") {                return 410;            }        }    }}"},{"directive":"hls_buffers","defaultValue":"hls_buffers 8 2m;","syntax":"hls_buffers number size;","context":"http, server, location","description":"Sets the maximum number and size of buffersthat are used for reading and writing data frames."},{"directive":"hls","defaultValue":"—","syntax":"hls;","context":"location","description":"Turns on HLS streaming in the surrounding location."},{"directive":"health_check_timeout","defaultValue":"health_check_timeout 5s;","syntax":"health_check_timeout timeout;","context":"stream, server","description":"Overrides the<a href=\"ngx_stream_proxy_module.html#proxy_timeout\">proxy_timeoutvalue for health checks."},{"directive":"health_check","defaultValue":"—","syntax":"health_check [parameters];","context":"server","description":"Enables periodic health checks of the servers in a<a href=\"ngx_stream_upstream_module.html#upstream\">group.The following optional parameters are supported: interval=timesets the interval between two consecutive health checks,by default, 5 seconds.jitter=timesets the time within whicheach health check will be randomly delayed,by default, there is no delay.fails=numbersets the number of consecutive failed health checks of a particular serverafter which this server will be considered unhealthy,by default, 1.passes=numbersets the number of consecutive passed health checks of a particular serverafter which the server will be considered healthy,by default, 1.mandatorysets the initial “checking” state for a serveruntil the first health check is completed (1.11.7).Client connections are not passed to servers in the “checking” state.If the parameter is not specified,the server will be initially considered healthy.match=namespecifies the match block configuring the tests that asuccessful connection should pass in order for a health check to pass.By default, for TCP, only the abilityto establish a TCP connection with the server is checked.For UDP, the absence ofICMP “Destination Unreachable” message is expectedin reply to the sent string “nginx health check”.Prior to version 1.11.7, by default, UDP health checkrequired a match block with thesend and expectparameters.port=numberdefines the port used when connecting to a serverto perform a health check (1.9.7).By default, equals the<a href=\"ngx_stream_upstream_module.html#server\">server port.udpspecifies that the UDP protocol should be used forhealth checks instead of the default TCP protocol (1.9.13)."},{"directive":"health_check","defaultValue":"—","syntax":"health_check [parameters];","context":"location","description":"Enables periodic health checks of the servers in a<a href=\"ngx_http_upstream_module.html#upstream\">groupreferenced in the surrounding location.The following optional parameters are supported: interval=timesets the interval between two consecutive health checks,by default, 5 seconds.jitter=timesets the time within whicheach health check will be randomly delayed,by default, there is no delay.fails=numbersets the number of consecutive failed health checks of a particular serverafter which this server will be considered unhealthy,by default, 1.passes=numbersets the number of consecutive passed health checks of a particular serverafter which the server will be considered healthy,by default, 1.uri=uridefines the URI used in health check requests,by default, “/”.mandatorysets the initial “checking” state for a serveruntil the first health check is completed (1.11.7).Client requests are not passed to servers in the “checking” state.If the parameter is not specified,the server will be initially considered healthy.match=namespecifies the match block configuring the tests that aresponse should pass in order for a health check to pass.By default, the response should have status code 2xx or 3xx.port=numberdefines the port used when connecting to a serverto perform a health check (1.9.7).By default, equals the<a href=\"ngx_http_upstream_module.html#server\">server port."},{"directive":"hash","defaultValue":"—","syntax":"hash key [consistent];","context":"upstream","description":"Specifies a load balancing method for a server groupwhere client-server mapping is based on the hashed key value.The key can contain text, variables,and their combinations (1.11.2).Usage example: hash $remote_addr; Note that adding or removing a server from the groupmay result in remapping most of the keys to different servers.The method is compatible with the<a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached\">Cache::MemcachedPerl library.If the consistent parameter is specified,the <a href=\"http://www.last.fm/user/RJ/journal/2007/04/10/392555/\">ketamaconsistent hashing method will be used instead.The method ensures that only a few keyswill be remapped to different serverswhen a server is added to or removed from the group.This helps to achieve a higher cache hit ratio for caching servers.The method is compatible with the<a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached%3A%3AFast\">Cache::Memcached::FastPerl library with the ketama_points parameter set to 160."},{"directive":"hash","defaultValue":"—","syntax":"hash key [consistent];","context":"upstream","description":"This directive appeared in version 1.7.2.            Specifies a load balancing method for a server groupwhere the client-server mapping is based on the hashed key value.The key can contain text, variables, and their combinations.Note that adding or removing a server from the groupmay result in remapping most of the keys to different servers.The method is compatible with the<a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached\">Cache::MemcachedPerl library.If the consistent parameter is specifiedthe <a href=\"http://www.last.fm/user/RJ/journal/2007/04/10/392555/\">ketamaconsistent hashing method will be used instead.The method ensures that only a few keyswill be remapped to different serverswhen a server is added to or removed from the group.This helps to achieve a higher cache hit ratio for caching servers.The method is compatible with the<a href=\"http://search.cpan.org/perldoc?Cache%3A%3AMemcached%3A%3AFast\">Cache::Memcached::FastPerl library with the ketama_points parameter set to 160."},{"directive":"gzip_vary","defaultValue":"gzip_vary off;","syntax":"gzip_vary on | off;","context":"http, server, location","description":"Enables or disables inserting the “Vary: Accept-Encoding”response header field if the directivesgzip,<a href=\"ngx_http_gzip_static_module.html#gzip_static\">gzip_static, or<a href=\"ngx_http_gunzip_module.html#gunzip\">gunzipare active."},{"directive":"gzip_types","defaultValue":"gzip_types text/html;","syntax":"gzip_types mime-type ...;","context":"http, server, location","description":"Enables gzipping of responses for the specified MIME types in additionto “text/html”.The special value “*” matches any MIME type (0.8.29).Responses with the “text/html” type are always compressed."},{"directive":"gzip_static","defaultValue":"","syntax":"","context":"","description":""},{"directive":"gzip_proxied","defaultValue":"gzip_proxied off;","syntax":"gzip_proxied     off |    expired |    no-cache |    no-store |    private |    no_last_modified |    no_etag |    auth |    any    ...;","context":"http, server, location","description":"Enables or disables gzipping of responses for proxiedrequests depending on the request and response.The fact that the request is proxied is determined bythe presence of the “Via” request header field.The directive accepts multiple parameters: offdisables compression for all proxied requests,ignoring other parameters;expiredenables compression if a response header includes the“Expires” field with a value that disables caching;no-cacheenables compression if a response header includes the“Cache-Control” field with the“no-cache” parameter;no-storeenables compression if a response header includes the“Cache-Control” field with the“no-store” parameter;privateenables compression if a response header includes the“Cache-Control” field with the“private” parameter;no_last_modifiedenables compression if a response header does not include the“Last-Modified” field;no_etagenables compression if a response header does not include the“ETag” field;authenables compression if a request header includes the“Authorization” field;anyenables compression for all proxied requests."},{"directive":"gzip_min_length","defaultValue":"gzip_min_length 20;","syntax":"gzip_min_length length;","context":"http, server, location","description":"Sets the minimum length of a response that will be gzipped.The length is determined only from the “Content-Length”response header field."},{"directive":"gzip_http_version","defaultValue":"gzip_http_version 1.1;","syntax":"gzip_http_version 1.0 | 1.1;","context":"http, server, location","description":"Sets the minimum HTTP version of a request required to compress a response."},{"directive":"gzip_disable","defaultValue":"—","syntax":"gzip_disable regex ...;","context":"http, server, location","description":"This directive appeared in version 0.6.23.            Disables gzipping of responses for requests with“User-Agent” header fields matchingany of the specified regular expressions.The special mask “msie6” (0.7.12) corresponds tothe regular expression “MSIE [4-6]\\.”, but works faster.Starting from version 0.8.11, “MSIE 6.0; ... SV1”is excluded from this mask."},{"directive":"gzip_comp_level","defaultValue":"gzip_comp_level 1;","syntax":"gzip_comp_level level;","context":"http, server, location","description":"Sets a gzip compression level of a response.Acceptable values are in the range from 1 to 9."},{"directive":"gzip_buffers","defaultValue":"gzip_buffers 32 4k|16 8k;","syntax":"gzip_buffers number size;","context":"http, server, location","description":"Sets the number and size of buffersused to compress a response.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform. Until version 0.7.28, four 4K or 8K buffers were used by default."},{"directive":"gzip","defaultValue":"gzip off;","syntax":"gzip on | off;","context":"http, server, location, if in location","description":"Enables or disables gzipping of responses."},{"directive":"gunzip_buffers","defaultValue":"","syntax":"","context":"","description":""},{"directive":"gunzip","defaultValue":"gunzip off;","syntax":"gunzip on | off;","context":"http, server, location","description":"Enables or disables decompression of gzipped responsesfor clients that lack gzip support.If enabled, the following directives are also taken into accountwhen determining if clients support gzip:<a href=\"ngx_http_gzip_module.html#gzip_http_version\">gzip_http_version,<a href=\"ngx_http_gzip_module.html#gzip_proxied\">gzip_proxied, and<a href=\"ngx_http_gzip_module.html#gzip_disable\">gzip_disable.See also the <a href=\"ngx_http_gzip_module.html#gzip_vary\">gzip_vary directive."},{"directive":"google_perftools_profiles","defaultValue":"","syntax":"","context":"","description":""},{"directive":"geoip_proxy_recursive","defaultValue":"","syntax":"","context":"","description":""},{"directive":"geoip_proxy","defaultValue":"—","syntax":"geoip_proxy address | CIDR;","context":"http","description":"This directive appeared in versions 1.3.0 and 1.2.1.                                                                Defines trusted addresses.When a request comes from a trusted address,an address from the “X-Forwarded-For” requestheader field will be used instead."},{"directive":"geoip_org","defaultValue":"","syntax":"","context":"","description":""},{"directive":"geoip_org","defaultValue":"—","syntax":"geoip_org file;","context":"http","description":"This directive appeared in version 1.0.3.            Specifies a database used to determine the organizationdepending on the client IP address.The following variable is available when using this database: $geoip_orgorganization name, for example, “The University of Melbourne”."},{"directive":"geoip_country","defaultValue":"—","syntax":"geoip_country file;","context":"stream","description":"Specifies a database used to determine the countrydepending on the client IP address.The following variables are available when using this database: $geoip_country_codetwo-letter country code, for example,“RU”, “US”.$geoip_country_code3three-letter country code, for example,“RUS”, “USA”.$geoip_country_namecountry name, for example,“Russian Federation”, “United States”."},{"directive":"geoip_country","defaultValue":"—","syntax":"geoip_country file;","context":"http","description":"Specifies a database used to determine the countrydepending on the client IP address.The following variables are available when using this database: $geoip_country_codetwo-letter country code, for example,“RU”, “US”.$geoip_country_code3three-letter country code, for example,“RUS”, “USA”.$geoip_country_namecountry name, for example,“Russian Federation”, “United States”."},{"directive":"geoip_city","defaultValue":"—","syntax":"geoip_city file;","context":"stream","description":"Specifies a database used to determine the country, region, and citydepending on the client IP address.The following variables are available when using this database: $geoip_area_codetelephone area code (US only).This variable may contain outdated information sincethe corresponding database field is deprecated.$geoip_city_continent_codetwo-letter continent code, for example,“EU”, “NA”.$geoip_city_country_codetwo-letter country code, for example,“RU”, “US”.$geoip_city_country_code3three-letter country code, for example,“RUS”, “USA”.$geoip_city_country_namecountry name, for example,“Russian Federation”, “United States”.$geoip_dma_codeDMA region code in US (also known as “metro code”), according to the<a href=\"https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions\">geotargetingin Google AdWords API.$geoip_latitudelatitude.$geoip_longitudelongitude.$geoip_regiontwo-symbol country region code (region, territory, state, province, federal landand the like), for example,“48”, “DC”.$geoip_region_namecountry region name (region, territory, state, province, federal landand the like), for example,“Moscow City”, “District of Columbia”.$geoip_citycity name, for example,“Moscow”, “Washington”.$geoip_postal_codepostal code."},{"directive":"geoip_city","defaultValue":"—","syntax":"geoip_city file;","context":"http","description":"Specifies a database used to determine the country, region, and citydepending on the client IP address.The following variables are available when using this database: $geoip_area_codetelephone area code (US only).This variable may contain outdated information sincethe corresponding database field is deprecated.$geoip_city_continent_codetwo-letter continent code, for example,“EU”, “NA”.$geoip_city_country_codetwo-letter country code, for example,“RU”, “US”.$geoip_city_country_code3three-letter country code, for example,“RUS”, “USA”.$geoip_city_country_namecountry name, for example,“Russian Federation”, “United States”.$geoip_dma_codeDMA region code in US (also known as “metro code”), according to the<a href=\"https://developers.google.com/adwords/api/docs/appendix/cities-DMAregions\">geotargetingin Google AdWords API.$geoip_latitudelatitude.$geoip_longitudelongitude.$geoip_regiontwo-symbol country region code (region, territory, state, province, federal landand the like), for example,“48”, “DC”.$geoip_region_namecountry region name (region, territory, state, province, federal landand the like), for example,“Moscow City”, “District of Columbia”.$geoip_citycity name, for example,“Moscow”, “Washington”.$geoip_postal_codepostal code."},{"directive":"geo","defaultValue":"","syntax":"","context":"","description":""},{"directive":"geo","defaultValue":"","syntax":"","context":"","description":""},{"directive":"flv","defaultValue":"","syntax":"","context":"","description":""},{"directive":"fastcgi_temp_path","defaultValue":"fastcgi_temp_path fastcgi_temp;","syntax":"fastcgi_temp_path     path    [level1    [level2    [level3]]];","context":"http, server, location","description":"Defines a directory for storing temporary fileswith data received from FastCGI servers.Up to three-level subdirectory hierarchy can be used underneath the specifieddirectory.For example, in the following configuration fastcgi_temp_path /spool/nginx/fastcgi_temp 1 2; a temporary file might look like this: /spool/nginx/fastcgi_temp/7/45/00000123457 See also the use_temp_path parameter of thefastcgi_cache_path directive."},{"directive":"fastcgi_temp_file_write_size","defaultValue":"fastcgi_temp_file_write_size 8k|16k;","syntax":"fastcgi_temp_file_write_size size;","context":"http, server, location","description":"Limits the size of data written to a temporary fileat a time, when buffering of responses from the FastCGI serverto temporary files is enabled.By default, size is limited by two buffers set by thefastcgi_buffer_size and fastcgi_buffers directives.The maximum size of a temporary file is set by thefastcgi_max_temp_file_size directive."},{"directive":"fastcgi_store_access","defaultValue":"fastcgi_store_access user:rw;","syntax":"fastcgi_store_access users:permissions ...;","context":"http, server, location","description":"Sets access permissions for newly created files and directories, e.g.: fastcgi_store_access user:rw group:rw all:r; If any group or all access permissionsare specified then user permissions may be omitted: fastcgi_store_access group:rw all:r;"},{"directive":"fastcgi_store","defaultValue":"fastcgi_store off;","syntax":"fastcgi_store     on |    off |    string;","context":"http, server, location","description":"Enables saving of files to a disk.The on parameter saves files with pathscorresponding to the directives<a href=\"ngx_http_core_module.html#alias\">alias or<a href=\"ngx_http_core_module.html#root\">root.The off parameter disables saving of files.In addition, the file name can be set explicitly using thestring with variables: fastcgi_store /data/www$original_uri; The modification time of files is set according to the received“Last-Modified” response header field.The response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the persistent storecan be put on different file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both saved files and adirectory holding temporary files, set by the fastcgi_temp_pathdirective, are put on the same file system.This directive can be used to create local copies of static unchangeablefiles, e.g.: location /images/ {    root                 /data/www;    error_page           404 = /fetch$uri;}location /fetch/ {    internal;    fastcgi_pass         backend:9000;    ...    fastcgi_store        on;    fastcgi_store_access user:rw group:rw all:r;    fastcgi_temp_path    /data/temp;    alias                /data/www/;}"},{"directive":"fastcgi_split_path_info","defaultValue":"—","syntax":"fastcgi_split_path_info regex;","context":"location","description":"Defines a regular expression that captures a value for the$fastcgi_path_info variable.The regular expression should have two captures: the first becomesa value of the $fastcgi_script_name variable, the secondbecomes a value of the $fastcgi_path_info variable.For example, with these settings location ~ ^(.+\\.php)(.*)$ {    fastcgi_split_path_info       ^(.+\\.php)(.*)$;    fastcgi_param SCRIPT_FILENAME /path/to/php$fastcgi_script_name;    fastcgi_param PATH_INFO       $fastcgi_path_info; and the “/show.php/article/0001” request,the SCRIPT_FILENAME parameter will be equal to“/path/to/php/show.php”, and thePATH_INFO parameter will be equal to“/article/0001”."},{"directive":"fastcgi_send_timeout","defaultValue":"fastcgi_send_timeout 60s;","syntax":"fastcgi_send_timeout time;","context":"http, server, location","description":"Sets a timeout for transmitting a request to the FastCGI server.The timeout is set only between two successive write operations,not for the transmission of the whole request.If the FastCGI server does not receive anything within this time,the connection is closed."},{"directive":"fastcgi_send_lowat","defaultValue":"fastcgi_send_lowat 0;","syntax":"fastcgi_send_lowat size;","context":"http, server, location","description":"If the directive is set to a non-zero value, nginx will try tominimize the numberof send operations on outgoing connections to a FastCGI server by using eitherNOTE_LOWAT flag of the<a href=\"../events.html#kqueue\">kqueue method,or the SO_SNDLOWAT socket option,with the specified size.This directive is ignored on Linux, Solaris, and Windows."},{"directive":"fastcgi_request_buffering","defaultValue":"fastcgi_request_buffering on;","syntax":"fastcgi_request_buffering on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.11.            Enables or disables buffering of a client request body.When buffering is enabled, the entire request body is<a href=\"ngx_http_core_module.html#client_body_buffer_size\">readfrom the client before sending the request to a FastCGI server.When buffering is disabled, the request body is sent to the FastCGI serverimmediately as it is received.In this case, the request cannot be passed to thenext serverif nginx already started sending the request body."},{"directive":"fastcgi_read_timeout","defaultValue":"fastcgi_read_timeout 60s;","syntax":"fastcgi_read_timeout time;","context":"http, server, location","description":"Defines a timeout for reading a response from the FastCGI server.The timeout is set only between two successive read operations,not for the transmission of the whole response.If the FastCGI server does not transmit anything within this time,the connection is closed."},{"directive":"fastcgi_pass_request_headers","defaultValue":"fastcgi_pass_request_headers on;","syntax":"fastcgi_pass_request_headers on | off;","context":"http, server, location","description":"Indicates whether the header fields of the original request are passedto the FastCGI server.See also the fastcgi_pass_request_body directive."},{"directive":"fastcgi_pass_request_body","defaultValue":"fastcgi_pass_request_body on;","syntax":"fastcgi_pass_request_body on | off;","context":"http, server, location","description":"Indicates whether the original request body is passedto the FastCGI server.See also the fastcgi_pass_request_headers directive."},{"directive":"fastcgi_pass_header","defaultValue":"—","syntax":"fastcgi_pass_header field;","context":"http, server, location","description":"Permits passing otherwise disabled headerfields from a FastCGI server to a client."},{"directive":"fastcgi_pass","defaultValue":"—","syntax":"fastcgi_pass address;","context":"location, if in location","description":"Sets the address of a FastCGI server.The address can be specified as a domain name or IP address,and a port: fastcgi_pass localhost:9000; or as a UNIX-domain socket path: fastcgi_pass unix:/tmp/fastcgi.socket; If a domain name resolves to several addresses, all of them will beused in a round-robin fashion.In addition, an address can be specified as a<a href=\"ngx_http_upstream_module.html\">server group.Parameter value can contain variables.In this case, if an address is specified as a domain name,the name is searched among the described<a href=\"ngx_http_upstream_module.html\">server groups,and, if not found, is determined using a<a href=\"ngx_http_core_module.html#resolver\">resolver."},{"directive":"fastcgi_param","defaultValue":"—","syntax":"fastcgi_param     parameter value    [if_not_empty];","context":"http, server, location","description":"Sets a parameter that should be passed to the FastCGI server.The value can contain text, variables, and their combination.These directives are inherited from the previous level if andonly if there are nofastcgi_paramdirectives defined on the current level.The following example shows the minimum required settings for PHP: fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;fastcgi_param QUERY_STRING    $query_string; The SCRIPT_FILENAME parameter is used in PHP fordetermining the script name, and the QUERY_STRINGparameter is used to pass request parameters.For scripts that process POST requests, thefollowing three parameters are also required: fastcgi_param REQUEST_METHOD  $request_method;fastcgi_param CONTENT_TYPE    $content_type;fastcgi_param CONTENT_LENGTH  $content_length; If PHP was built with the --enable-force-cgi-redirectconfiguration parameter, the REDIRECT_STATUS parametershould also be passed with the value “200”: fastcgi_param REDIRECT_STATUS 200; If the directive is specified with if_not_empty (1.1.11) thensuch a parameter will not be passed to the server until its value is not empty: fastcgi_param HTTPS           $https if_not_empty;"},{"directive":"fastcgi_no_cache","defaultValue":"—","syntax":"fastcgi_no_cache string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be saved to a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be saved: fastcgi_no_cache $cookie_nocache $arg_nocache$arg_comment;fastcgi_no_cache $http_pragma    $http_authorization; Can be used along with the fastcgi_cache_bypass directive."},{"directive":"fastcgi_next_upstream_tries","defaultValue":"fastcgi_next_upstream_tries 0;","syntax":"fastcgi_next_upstream_tries number;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the number of possible tries for passing a request to thenext server.The 0 value turns off this limitation."},{"directive":"fastcgi_next_upstream_timeout","defaultValue":"fastcgi_next_upstream_timeout 0;","syntax":"fastcgi_next_upstream_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.7.5.            Limits the time during which a request can be passed to thenext server.The 0 value turns off this limitation."},{"directive":"fastcgi_next_upstream","defaultValue":"fastcgi_next_upstream error timeout;","syntax":"fastcgi_next_upstream     error |    timeout |    invalid_header |    http_500 |    http_503 |    http_403 |    http_404 |    http_429 |    non_idempotent |    off    ...;","context":"http, server, location","description":"Specifies in which cases a request should be passed to the next server: erroran error occurred while establishing a connection with theserver, passing a request to it, or reading the response header;timeouta timeout has occurred while establishing a connection with theserver, passing a request to it, or reading the response header;invalid_headera server returned an empty or invalid response;http_500a server returned a response with the code 500;http_503a server returned a response with the code 503;http_403a server returned a response with the code 403;http_404a server returned a response with the code 404;http_429a server returned a response with the code 429 (1.11.13);non_idempotentnormally, requests with a<a href=\"https://tools.ietf.org/html/rfc7231#section-4.2.2\">non-idempotentmethod(POST, LOCK, PATCH)are not passed to the next serverif a request has been sent to an upstream server (1.9.13);enabling this option explicitly allows retrying such requests;offdisables passing a request to the next server. One should bear in mind that passing a request to the next server isonly possible if nothing has been sent to a client yet.That is, if an error or timeout occurs in the middle of thetransferring of a response, fixing this is impossible.The directive also defines what is considered an<a href=\"ngx_http_upstream_module.html#max_fails\">unsuccessfulattempt of communication with a server.The cases of error, timeout andinvalid_header are always considered unsuccessful attempts,even if they are not specified in the directive.The cases of http_500, http_503,and http_429 areconsidered unsuccessful attempts only if they are specified in the directive.The cases of http_403 and http_404are never considered unsuccessful attempts.Passing a request to the next server can be limited bythe number of triesand by time."},{"directive":"fastcgi_max_temp_file_size","defaultValue":"fastcgi_max_temp_file_size 1024m;","syntax":"fastcgi_max_temp_file_size size;","context":"http, server, location","description":"When buffering of responses from the FastCGIserver is enabled, and the whole response does not fit into the buffersset by the fastcgi_buffer_size and fastcgi_buffersdirectives, a part of the response can be saved to a temporary file.This directive sets the maximum size of the temporary file.The size of data written to the temporary file at a time is setby the fastcgi_temp_file_write_size directive.The zero value disables buffering of responses to temporary files. This restriction does not apply to responsesthat will be cachedor stored on disk."},{"directive":"fastcgi_limit_rate","defaultValue":"fastcgi_limit_rate 0;","syntax":"fastcgi_limit_rate rate;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Limits the speed of reading the response from the FastCGI server.The rate is specified in bytes per second.The zero value disables rate limiting.The limit is set per a request, and so if nginx simultaneously openstwo connections to the FastCFI server,the overall rate will be twice as much as the specified limit.The limitation works only ifbuffering of responses from the FastCGIserver is enabled."},{"directive":"fastcgi_keep_conn","defaultValue":"fastcgi_keep_conn off;","syntax":"fastcgi_keep_conn on | off;","context":"http, server, location","description":"This directive appeared in version 1.1.4.            By default, a FastCGI server will close a connection right aftersending the response.However, when this directive is set to the value on,nginx will instruct a FastCGI server to keep connections open.This is necessary, in particular, for<a href=\"ngx_http_upstream_module.html#keepalive\">keepaliveconnections to FastCGI servers to function."},{"directive":"fastcgi_intercept_errors","defaultValue":"fastcgi_intercept_errors off;","syntax":"fastcgi_intercept_errors on | off;","context":"http, server, location","description":"Determines whether FastCGI server responses with codes greater than or equalto 300 should be passed to a clientor be intercepted and redirected to nginx for processingwith the <a href=\"ngx_http_core_module.html#error_page\">error_page directive."},{"directive":"fastcgi_index","defaultValue":"—","syntax":"fastcgi_index name;","context":"http, server, location","description":"Sets a file name that will be appended after a URI that ends witha slash, in the value of the $fastcgi_script_name variable.For example, with these settings fastcgi_index index.php;fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name; and the “/page.php” request,the SCRIPT_FILENAME parameter will be equal to“/home/www/scripts/php/page.php”,and with the “/” request it will be equal to“/home/www/scripts/php/index.php”."},{"directive":"fastcgi_ignore_headers","defaultValue":"—","syntax":"fastcgi_ignore_headers field ...;","context":"http, server, location","description":"Disables processing of certain response header fields from the FastCGI server.The following fields can be ignored: “X-Accel-Redirect”,“X-Accel-Expires”, “X-Accel-Limit-Rate” (1.1.6),“X-Accel-Buffering” (1.1.6),“X-Accel-Charset” (1.1.6), “Expires”,“Cache-Control”, “Set-Cookie” (0.8.44),and “Vary” (1.7.7).If not disabled, processing of these header fields has the followingeffect: “X-Accel-Expires”, “Expires”,“Cache-Control”, “Set-Cookie”,and “Vary”set the parameters of response caching;“X-Accel-Redirect” performs an<a href=\"ngx_http_core_module.html#internal\">internalredirect to the specified URI;“X-Accel-Limit-Rate” sets the<a href=\"ngx_http_core_module.html#limit_rate\">ratelimit for transmission of a response to a client;“X-Accel-Buffering” enables or disablesbuffering of a response;“X-Accel-Charset” sets the desired<a href=\"ngx_http_charset_module.html#charset\">charsetof a response."},{"directive":"fastcgi_ignore_client_abort","defaultValue":"fastcgi_ignore_client_abort off;","syntax":"fastcgi_ignore_client_abort on | off;","context":"http, server, location","description":"Determines whether the connection with a FastCGI server should beclosed when a client closes the connection without waitingfor a response."},{"directive":"fastcgi_hide_header","defaultValue":"—","syntax":"fastcgi_hide_header field;","context":"http, server, location","description":"By default,nginx does not pass the header fields “Status” and“X-Accel-...” from the response of a FastCGIserver to a client.The fastcgi_hide_header directive sets additional fieldsthat will not be passed.If, on the contrary, the passing of fields needs to be permitted,the fastcgi_pass_header directive can be used."},{"directive":"fastcgi_force_ranges","defaultValue":"fastcgi_force_ranges off;","syntax":"fastcgi_force_ranges on | off;","context":"http, server, location","description":"This directive appeared in version 1.7.7.            Enables byte-range supportfor both cached and uncached responses from the FastCGI serverregardless of the “Accept-Ranges” field in these responses."},{"directive":"fastcgi_connect_timeout","defaultValue":"fastcgi_connect_timeout 60s;","syntax":"fastcgi_connect_timeout time;","context":"http, server, location","description":"Defines a timeout for establishing a connection with a FastCGI server.It should be noted that this timeout cannot usually exceed 75 seconds."},{"directive":"fastcgi_catch_stderr","defaultValue":"—","syntax":"fastcgi_catch_stderr string;","context":"http, server, location","description":"Sets a string to search for in the error stream of a responsereceived from a FastCGI server.If the string is found then it is considered that the FastCGIserver has returned an invalid response.This allows handling application errors in nginx, for example: location /php {    fastcgi_pass backend:9000;    ...    fastcgi_catch_stderr \"PHP Fatal error\";    fastcgi_next_upstream error timeout invalid_header;}"},{"directive":"fastcgi_cache_valid","defaultValue":"—","syntax":"fastcgi_cache_valid [code ...] time;","context":"http, server, location","description":"Sets caching time for different response codes.For example, the following directives fastcgi_cache_valid 200 302 10m;fastcgi_cache_valid 404      1m; set 10 minutes of caching for responses with codes 200 and 302and 1 minute for responses with code 404.If only caching time is specified fastcgi_cache_valid 5m; then only 200, 301, and 302 responses are cached.In addition, the any parameter can be specifiedto cache any responses: fastcgi_cache_valid 200 302 10m;fastcgi_cache_valid 301      1h;fastcgi_cache_valid any      1m; Parameters of caching can also be set directlyin the response header.This has higher priority than setting of caching time using the directive. The “X-Accel-Expires” header field sets caching time of aresponse in seconds.The zero value disables caching for a response.If the value starts with the @ prefix, it sets an absolutetime in seconds since Epoch, up to which the response may be cached.If the header does not include the “X-Accel-Expires” field,parameters of caching may be set in the header fields“Expires” or “Cache-Control”.If the header includes the “Set-Cookie” field, such aresponse will not be cached.If the header includes the “Vary” fieldwith the special value “*”, such aresponse will not be cached (1.7.7).If the header includes the “Vary” fieldwith another value, such a response will be cachedtaking into account the corresponding request header fields (1.7.7). Processing of one or more of these response header fields can be disabledusing the fastcgi_ignore_headers directive."},{"directive":"fastcgi_cache_use_stale","defaultValue":"fastcgi_cache_use_stale off;","syntax":"fastcgi_cache_use_stale     error |    timeout |    invalid_header |    updating |    http_500 |    http_503 |    http_403 |    http_404 |    http_429 |    off    ...;","context":"http, server, location","description":"Determines in which cases a stale cached response can be usedwhen an error occurs during communication with the FastCGI server.The directive’s parameters match the parameters of thefastcgi_next_upstream directive.The error parameter also permitsusing a stale cached response if a FastCGI server to process a requestcannot be selected."},{"directive":"fastcgi_cache_revalidate","defaultValue":"fastcgi_cache_revalidate off;","syntax":"fastcgi_cache_revalidate on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Enables revalidation of expired cache items using conditional requests withthe “If-Modified-Since” and “If-None-Match”header fields."},{"directive":"fastcgi_cache_purge","defaultValue":"—","syntax":"fastcgi_cache_purge string ...;","context":"http, server, location","description":"This directive appeared in version 1.5.7.            Defines conditions under which the request will be considered a cachepurge request.If at least one value of the string parameters is not empty and is not equalto “0” then the cache entry with a correspondingcache key is removed.The result of successful operation is indicated by returningthe 204 (No Content) response.If the cache key of a purge request endswith an asterisk (“*”), all cache entries matching thewildcard key will be removed from the cache.However, these entries will remain on the disk until they are deletedfor either inactivity,or processed by the cache purger (1.7.12),or a client attempts to access them.Example configuration: fastcgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;map $request_method $purge_method {    PURGE   1;    default 0;}server {    ...    location / {        fastcgi_pass        backend;        fastcgi_cache       cache_zone;        fastcgi_cache_key   $uri;        fastcgi_cache_purge $purge_method;    }}  This functionality is available as part of our<a href=\"http://nginx.com/products/\">commercial subscription."},{"directive":"fastcgi_cache_path","defaultValue":"—","syntax":"fastcgi_cache_path     path    [levels=levels]    [use_temp_path=on|off]    keys_zone=name:size    [inactive=time]    [max_size=size]    [manager_files=number]    [manager_sleep=time]    [manager_threshold=time]    [loader_files=number]    [loader_sleep=time]    [loader_threshold=time]    [purger=on|off]    [purger_files=number]    [purger_sleep=time]    [purger_threshold=time];","context":"http","description":"Sets the path and other parameters of a cache.Cache data are stored in files.Both the key and file name in a cache are a result ofapplying the MD5 function to the proxied URL.The levels parameter defines hierarchy levels of a cache:from 1 to 3, each level accepts values 1 or 2.For example, in the following configuration fastcgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m; file names in a cache will look like this: /data/nginx/cache/c/29/b7f54b2df7773722d382f4809d65029c A cached response is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the cache can be put ondifferent file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both cache and a directoryholding temporary filesare put on the same file system.A directory for temporary files is set based onthe use_temp_path parameter (1.7.10).If this parameter is omitted or set to the value on,the directory set by the fastcgi_temp_path directivefor the given location will be used.If the value is set to off,temporary files will be put directly in the cache directory.In addition, all active keys and information about data are storedin a shared memory zone, whose name and sizeare configured by the keys_zone parameter.One megabyte zone can store about 8 thousand keys.Cached data that are not accessed during the time specified by theinactive parameter get removed from the cacheregardless of their freshness.By default, inactive is set to 10 minutes.The special “cache manager” process monitors the maximum cache size setby the max_size parameter.When this size is exceeded, it removes the least recently used data.The data is removed in iterations configured bymanager_files,manager_threshold, andmanager_sleep parameters (1.11.5).During one iteration no more than manager_files itemsare deleted (by default, 100).The duration of one iteration is limited by themanager_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the manager_sleepparameter (by default, 50 milliseconds) is made.A minute after the start the special “cache loader” process is activated.It loads information about previously cached data stored on file systeminto a cache zone.The loading is also done in iterations.During one iteration no more than loader_files itemsare loaded (by default, 100).Besides, the duration of one iteration is limited by theloader_threshold parameter (by default, 200 milliseconds).Between iterations, a pause configured by the loader_sleepparameter (by default, 50 milliseconds) is made.Additionally,the following parameters are available as part of our<a href=\"http://nginx.com/products/\">commercial subscription: purger=on|offInstructs whether cache entries that match awildcard keywill be removed from the disk by the cache purger (1.7.12).Setting the parameter to on(default is off)will activate the “cache purger” process thatpermanently iterates through all cache entriesand deletes the entries that match the wildcard key.purger_files=numberSets the number of items that will be scanned during one iteration (1.7.12).By default, purger_files is set to 10.purger_threshold=numberSets the duration of one iteration (1.7.12).By default, purger_threshold is set to 50 milliseconds.purger_sleep=numberSets a pause between iterations (1.7.12).By default, purger_sleep is set to 50 milliseconds.  In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed.Previously cached responses will be considered invalidafter upgrading to a newer nginx version."},{"directive":"fastcgi_cache_min_uses","defaultValue":"fastcgi_cache_min_uses 1;","syntax":"fastcgi_cache_min_uses number;","context":"http, server, location","description":"Sets the number of requests after which the responsewill be cached."},{"directive":"fastcgi_cache_methods","defaultValue":"fastcgi_cache_methods GET HEAD;","syntax":"fastcgi_cache_methods     GET |    HEAD |    POST    ...;","context":"http, server, location","description":"This directive appeared in version 0.7.59.            If the client request method is listed in this directive thenthe response will be cached.“GET” and “HEAD” methods are alwaysadded to the list, though it is recommended to specify them explicitly.See also the fastcgi_no_cache directive."},{"directive":"fastcgi_cache_max_range_offset","defaultValue":"—","syntax":"fastcgi_cache_max_range_offset number;","context":"http, server, location","description":"This directive appeared in version 1.11.6.            Sets an offset in bytes for byte-range requests.If the range is beyond the offset,the range request will be passed to the FastCGI serverand the response will not be cached."},{"directive":"fastcgi_cache_lock_timeout","defaultValue":"fastcgi_cache_lock_timeout 5s;","syntax":"fastcgi_cache_lock_timeout time;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            Sets a timeout for fastcgi_cache_lock.When the time expires,the request will be passed to the FastCGI server,however, the response will not be cached. Before 1.7.8, the response could be cached."},{"directive":"fastcgi_cache_lock_age","defaultValue":"fastcgi_cache_lock_age 5s;","syntax":"fastcgi_cache_lock_age time;","context":"http, server, location","description":"This directive appeared in version 1.7.8.            If the last request passed to the FastCGI serverfor populating a new cache elementhas not completed for the specified time,one more request may be passed to the FastCGI server."},{"directive":"fastcgi_cache_lock","defaultValue":"fastcgi_cache_lock off;","syntax":"fastcgi_cache_lock on | off;","context":"http, server, location","description":"This directive appeared in version 1.1.12.            When enabled, only one request at a time will be allowed to populatea new cache element identified according to the fastcgi_cache_keydirective by passing a request to a FastCGI server.Other requests of the same cache element will either waitfor a response to appear in the cache or the cache lock forthis element to be released, up to the time set by thefastcgi_cache_lock_timeout directive."},{"directive":"fastcgi_cache_key","defaultValue":"—","syntax":"fastcgi_cache_key string;","context":"http, server, location","description":"Defines a key for caching, for example fastcgi_cache_key localhost:9000$request_uri;"},{"directive":"fastcgi_cache_bypass","defaultValue":"—","syntax":"fastcgi_cache_bypass string ...;","context":"http, server, location","description":"Defines conditions under which the response will not be taken from a cache.If at least one value of the string parameters is not empty and is notequal to “0” then the response will not be taken from the cache: fastcgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;fastcgi_cache_bypass $http_pragma    $http_authorization; Can be used along with the fastcgi_no_cache directive."},{"directive":"fastcgi_cache_background_update","defaultValue":"fastcgi_cache_background_update off;","syntax":"fastcgi_cache_background_update on | off;","context":"http, server, location","description":"This directive appeared in version 1.11.10.            Allows starting a background subrequestto update an expired cache item,while a stale cached response is returned to the client.Note that it is necessary toallowthe usage of a stale cached response when it is being updated."},{"directive":"fastcgi_cache","defaultValue":"fastcgi_cache off;","syntax":"fastcgi_cache zone | off;","context":"http, server, location","description":"Defines a shared memory zone used for caching.The same zone can be used in several places.Parameter value can contain variables (1.7.9).The off parameter disables caching inheritedfrom the previous configuration level."},{"directive":"fastcgi_busy_buffers_size","defaultValue":"fastcgi_busy_buffers_size 8k|16k;","syntax":"fastcgi_busy_buffers_size size;","context":"http, server, location","description":"When buffering of responses from the FastCGIserver is enabled, limits the total size of buffers thatcan be busy sending a response to the client while the response is notyet fully read.In the meantime, the rest of the buffers can be used for reading the responseand, if needed, buffering part of the response to a temporary file.By default, size is limited by the size of two buffers set by thefastcgi_buffer_size and fastcgi_buffers directives."},{"directive":"fastcgi_buffers","defaultValue":"fastcgi_buffers 8 4k|8k;","syntax":"fastcgi_buffers number size;","context":"http, server, location","description":"Sets the number and size of thebuffers used for reading a response from the FastCGI server,for a single connection.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform."},{"directive":"fastcgi_buffering","defaultValue":"fastcgi_buffering on;","syntax":"fastcgi_buffering on | off;","context":"http, server, location","description":"This directive appeared in version 1.5.6.            Enables or disables buffering of responses from the FastCGI server.When buffering is enabled, nginx receives a response from the FastCGI serveras soon as possible, saving it into the buffers set by thefastcgi_buffer_size and fastcgi_buffers directives.If the whole response does not fit into memory, a part of it can be savedto a temporary file on the disk.Writing to temporary files is controlled by thefastcgi_max_temp_file_size andfastcgi_temp_file_write_size directives.When buffering is disabled, the response is passed to a client synchronously,immediately as it is received.nginx will not try to read the whole response from the FastCGI server.The maximum size of the data that nginx can receive from the serverat a time is set by the fastcgi_buffer_size directive.Buffering can also be enabled or disabled by passing“yes” or “no” in the“X-Accel-Buffering” response header field.This capability can be disabled using thefastcgi_ignore_headers directive."},{"directive":"fastcgi_buffer_size","defaultValue":"fastcgi_buffer_size 4k|8k;","syntax":"fastcgi_buffer_size size;","context":"http, server, location","description":"Sets the size of the buffer used for reading the first partof the response received from the FastCGI server.This part usually contains a small response header.By default, the buffer size is equal to one memory page.This is either 4K or 8K, depending on a platform.It can be made smaller, however."},{"directive":"fastcgi_bind","defaultValue":"—","syntax":"fastcgi_bind     address    [transparent] |    off;","context":"http, server, location","description":"This directive appeared in version 0.8.22.            Makes outgoing connections to a FastCGI server originatefrom the specified local IP address with an optional port (1.11.2).Parameter value can contain variables (1.3.12).The special value off (1.3.12) cancels the effectof the fastcgi_bind directiveinherited from the previous configuration level, which allows thesystem to auto-assign the local IP address and port."},{"directive":"f4f_buffer_size","defaultValue":"","syntax":"","context":"","description":""},{"directive":"f4f","defaultValue":"—","syntax":"f4f;","context":"location","description":"Turns on module processing in the surrounding location."},{"directive":"expires","defaultValue":"","syntax":"","context":"","description":""},{"directive":"events","defaultValue":"—","syntax":"events { ... }","context":"main","description":"Provides the configuration file context in which the directives thataffect connection processing are specified."},{"directive":"etag","defaultValue":"etag on;","syntax":"etag on | off;","context":"http, server, location","description":"This directive appeared in version 1.3.3.            Enables or disables automatic generation of the “ETag”response header field for static resources."},{"directive":"error_page","defaultValue":"—","syntax":"error_page     code ...    [=[response]]    uri;","context":"http, server, location, if in location","description":"Defines the URI that will be shown for the specified errors.A uri value can contain variables.Example: error_page 404             /404.html;error_page 500 502 503 504 /50x.html; This causes an internal redirect to the specified uriwith the client request method changed to “GET”(for all methods other than“GET” and “HEAD”).Furthermore, it is possible to change the response code to anotherusing the “=response” syntax, for example: error_page 404 =200 /empty.gif; If an error response is processed by a proxied serveror a FastCGI/uwsgi/SCGI server,and the server may return different response codes (e.g., 200, 302, 401or 404), it is possible to respond with the code it returns: error_page 404 = /404.php; If there is no need to change URI and method during internal redirectionit is possible to pass error processing into a named location: location / {    error_page 404 = @fallback;}location @fallback {    proxy_pass http://backend;}  If uri processing leads to an error,the status code of the last occurred error is returned to the client. It is also possible to use URL redirects for error processing: error_page 403      http://example.com/forbidden.html;error_page 404 =301 http://example.com/notfound.html; In this case, by default, the response code 302 is returned to the client.It can only be changed to one of the redirect statuscodes (301, 302, 303, 307, and 308).These directives are inherited from the previous level if andonly if there are noerror_pagedirectives defined on the current level."},{"directive":"error_log","defaultValue":"error_log logs/error.log error;","syntax":"error_log file [level];","context":"main, http, mail, stream, server, location","description":"Configures logging.Several logs can be specified on the same level (1.5.2).If on the main configuration level writing a log to a fileis not explicitly defined, the default file will be used.The first parameter defines a file that will store the log.The special value stderr selects the standard error file.Logging to <a href=\"syslog.html\">syslog can be configured by specifyingthe “syslog:” prefix.Logging to a<a href=\"debugging_log.html#memory\">cyclic memory buffercan be configured by specifying the “memory:” prefix andbuffer size, and is generally used for debugging (1.7.11).The second parameter determines the level of logging,and can be one of the following:debug, info, notice,warn, error, crit,alert, or emerg.Log levels above are listed in the order of increasing severity.Setting a certain log level will cause all messages ofthe specified and more severe log levels to be logged.For example, the default level error willcause error, crit,alert, and emerg messagesto be logged.If this parameter is omitted then error is used. For debug logging to work, nginx needs tobe built with --with-debug,see “<a href=\"debugging_log.html\">A debugging log”.  The directive can be specified on thestream levelstarting from version 1.7.11,and on the mail levelstarting from version 1.9.0."},{"directive":"env","defaultValue":"env TZ;","syntax":"env variable[=value];","context":"main","description":"By default, nginx removes all environment variables inheritedfrom its parent process except the TZ variable.This directive allows preserving some of the inherited variables,changing their values, or creating new environment variables.These variables are then: inherited during a <a href=\"control.html#upgrade\">live upgradeof an executable file;used by the<a href=\"http/ngx_http_perl_module.html\">ngx_http_perl_module module;used by worker processes.One should bear in mind that controlling system libraries in this wayis not always possible as it is common for libraries to checkvariables only during initialization, well before they can be setusing this directive.An exception from this is an above mentioned<a href=\"control.html#upgrade\">live upgradeof an executable file. The TZ variable is always inherited and available to the<a href=\"http/ngx_http_perl_module.html\">ngx_http_perl_modulemodule, unless it is configured explicitly.Usage example: env MALLOC_OPTIONS;env PERL5LIB=/data/site/modules;env OPENSSL_ALLOW_PROXY_CERTS=1;  The NGINX environment variable is used internally by nginxand should not be set directly by the user."},{"directive":"empty_gif","defaultValue":"","syntax":"","context":"","description":""},{"directive":"disable_symlinks","defaultValue":"disable_symlinks off;","syntax":"disable_symlinks off;disable_symlinks     on |    if_not_owner    [from=part];","context":"http, server, location","description":"This directive appeared in version 1.1.15.            Determines how symbolic links should be treated when opening files: offSymbolic links in the pathname are allowed and not checked.This is the default behavior.onIf any component of the pathname is a symbolic link,access to a file is denied.if_not_ownerAccess to a file is denied if any component of the pathnameis a symbolic link, and the link and object that the linkpoints to have different owners.from=partWhen checking symbolic links(parameters on and if_not_owner),all components of the pathname are normally checked.Checking of symbolic links in the initial part of the pathnamemay be avoided by specifying additionally thefrom=part parameter.In this case, symbolic links are checked only fromthe pathname component that follows the specified initial part.If the value is not an initial part of the pathname checked, the wholepathname is checked as if this parameter was not specified at all.If the value matches the whole file name,symbolic links are not checked.The parameter value can contain variables. Example: disable_symlinks on from=$document_root; This directive is only available on systems that have theopenat() and fstatat() interfaces.Such systems include modern versions of FreeBSD, Linux, and Solaris.Parameters on and if_not_owneradd a processing overhead. On systems that do not support opening of directories only for search,to use these parameters it is required that worker processeshave read permissions for all directories being checked.  The<a href=\"ngx_http_autoindex_module.html\">ngx_http_autoindex_module,<a href=\"ngx_http_random_index_module.html\">ngx_http_random_index_module,and <a href=\"ngx_http_dav_module.html\">ngx_http_dav_modulemodules currently ignore this directive."},{"directive":"directio_alignment","defaultValue":"directio_alignment 512;","syntax":"directio_alignment size;","context":"http, server, location","description":"This directive appeared in version 0.8.11.            Sets the alignment fordirectio.In most cases, a 512-byte alignment is enough.However, when using XFS under Linux, it needs to be increased to 4K."},{"directive":"directio","defaultValue":"directio off;","syntax":"directio size | off;","context":"http, server, location","description":"This directive appeared in version 0.7.7.            Enables the use ofthe O_DIRECT flag (FreeBSD, Linux),the F_NOCACHE flag (macOS),or the directio() function (Solaris),when reading files that are larger than or equal tothe specified size.The directive automatically disables (0.7.15) the use ofsendfilefor a given request.It can be useful for serving large files: directio 4m; or when using aio on Linux."},{"directive":"deny","defaultValue":"","syntax":"","context":"","description":""},{"directive":"deny","defaultValue":"","syntax":"","context":"","description":""},{"directive":"default_type","defaultValue":"default_type text/plain;","syntax":"default_type mime-type;","context":"http, server, location","description":"Defines the default MIME type of a response.Mapping of file name extensions to MIME types can be setwith the types directive."},{"directive":"debug_points","defaultValue":"—","syntax":"debug_points abort | stop;","context":"main","description":"This directive is used for debugging.When internal error is detected, e.g. the leak of sockets onrestart of working processes, enabling debug_pointsleads to a core file creation (abort)or to stopping of a process (stop) for furtheranalysis using a system debugger."},{"directive":"debug_connection","defaultValue":"—","syntax":"debug_connection     address |    CIDR |    unix:;","context":"events","description":"Enables debugging log for selected client connections.Other connections will use logging level set by theerror_log directive.Debugged connections are specified by IPv4 or IPv6 (1.3.0, 1.2.1)address or network.A connection may also be specified using a hostname.For connections using UNIX-domain sockets (1.3.0, 1.2.1),debugging log is enabled by the “unix:” parameter. events {    debug_connection 127.0.0.1;    debug_connection localhost;    debug_connection 192.0.2.0/24;    debug_connection ::1;    debug_connection 2001:0db8::/32;    debug_connection unix:;    ...}  For this directive to work, nginx needs tobe built with --with-debug,see “<a href=\"debugging_log.html\">A debugging log”."},{"directive":"dav_methods","defaultValue":"dav_methods off;","syntax":"dav_methods     off | method ...;","context":"http, server, location","description":"Allows the specified HTTP and WebDAV methods.The parameter off denies all methods processedby this module.The following methods are supported:PUT, DELETE, MKCOL,COPY, and MOVE.A file uploaded with the PUT method is first written to a temporary file,and then the file is renamed.Starting from version 0.8.9, temporary files and the persistent storecan be put on different file systems.However, be aware that in this case a file is copiedacross two file systems instead of the cheap renaming operation.It is thus recommended that for any given location both saved files and adirectory holding temporary files, set by the<a href=\"ngx_http_core_module.html#client_body_temp_path\">client_body_temp_pathdirective, are put on the same file system.When creating a file with the PUT method, it is possible to specifythe modification date by passing it in the “Date”header field."},{"directive":"dav_access","defaultValue":"dav_access user:rw;","syntax":"dav_access users:permissions ...;","context":"http, server, location","description":"Sets access permissions for newly created files and directories, e.g.: dav_access user:rw group:rw all:r; If any group or all access permissionsare specified then user permissions may be omitted: dav_access group:rw all:r;"},{"directive":"daemon","defaultValue":"daemon on;","syntax":"daemon on | off;","context":"main","description":"Determines whether nginx should become a daemon.Mainly used during development."},{"directive":"create_full_put_path","defaultValue":"create_full_put_path off;","syntax":"create_full_put_path on | off;","context":"http, server, location","description":"The WebDAV specification only allows creating files in alreadyexisting directories.This directive allows creating all needed intermediate directories."},{"directive":"connection_pool_size","defaultValue":"connection_pool_size 256|512;","syntax":"connection_pool_size size;","context":"http, server","description":"Allows accurate tuning of per-connection memory allocations.This directive has minimal impact on performanceand should not generally be used.By default, the size is equal to256 bytes on 32-bit platforms and 512 bytes on 64-bit platforms. Prior to version 1.9.8, the default value was 256 on all platforms."},{"directive":"client_max_body_size","defaultValue":"client_max_body_size 1m;","syntax":"client_max_body_size size;","context":"http, server, location","description":"Sets the maximum allowed size of the client request body,specified in the“Content-Length”request header field.If the size in a request exceeds the configured value, the413 (Request Entity Too Large)error is returned to the client.Please be aware thatbrowsers cannot correctly displaythis error.Setting size to 0 disables checking of clientrequest body size."},{"directive":"client_header_timeout","defaultValue":"client_header_timeout 60s;","syntax":"client_header_timeout time;","context":"http, server","description":"Defines a timeout for reading client request header.If a client does not transmit the entire header within this time, the408 (Request Time-out)error is returned to the client."},{"directive":"client_header_buffer_size","defaultValue":"client_header_buffer_size 1k;","syntax":"client_header_buffer_size size;","context":"http, server","description":"Sets buffer size for reading client request header.For most requests, a buffer of 1K bytes is enough.However, if a request includes long cookies, or comes from a WAP client,it may not fit into 1K.If a request line or a request header field does not fit intothis buffer then larger buffers, configured by thelarge_client_header_buffers directive,are allocated."},{"directive":"client_body_timeout","defaultValue":"client_body_timeout 60s;","syntax":"client_body_timeout time;","context":"http, server, location","description":"Defines a timeout for reading client request body.The timeout is set only for a period between two successive read operations,not for the transmission of the whole request body.If a client does not transmit anything within this time, the408 (Request Time-out)error is returned to the client."},{"directive":"client_body_temp_path","defaultValue":"client_body_temp_path client_body_temp;","syntax":"client_body_temp_path     path    [level1    [level2    [level3]]];","context":"http, server, location","description":"Defines a directory for storing temporary files holding client request bodies.Up to three-level subdirectory hierarchy can be used under the specifieddirectory.For example, in the following configuration client_body_temp_path /spool/nginx/client_temp 1 2; a path to a temporary file might look like this: /spool/nginx/client_temp/7/45/00000123457"},{"directive":"client_body_in_single_buffer","defaultValue":"client_body_in_single_buffer off;","syntax":"client_body_in_single_buffer on | off;","context":"http, server, location","description":"Determines whether nginx should save the entire client request bodyin a single buffer.The directive is recommended when using the$request_bodyvariable, to save the number of copy operations involved."},{"directive":"client_body_in_file_only","defaultValue":"client_body_in_file_only off;","syntax":"client_body_in_file_only     on |    clean |    off;","context":"http, server, location","description":"Determines whether nginx should save the entire client request bodyinto a file.This directive can be used during debugging, or when using the$request_body_filevariable, or the<a href=\"ngx_http_perl_module.html#methods\">$r-&gt;request_body_filemethod of the module<a href=\"ngx_http_perl_module.html\">ngx_http_perl_module.When set to the value on, temporary files are notremoved after request processing.The value clean will cause the temporary filesleft after request processing to be removed."},{"directive":"client_body_buffer_size","defaultValue":"client_body_buffer_size 8k|16k;","syntax":"client_body_buffer_size size;","context":"http, server, location","description":"Sets buffer size for reading client request body.In case the request body is larger than the buffer,the whole body or only its part is written to atemporary file.By default, buffer size is equal to two memory pages.This is 8K on x86, other 32-bit platforms, and x86-64.It is usually 16K on other 64-bit platforms."},{"directive":"chunked_transfer_encoding","defaultValue":"chunked_transfer_encoding on;","syntax":"chunked_transfer_encoding on | off;","context":"http, server, location","description":"Allows disabling chunked transfer encoding in HTTP/1.1.It may come in handy when using a software failing to supportchunked encoding despite the standard’s requirement."},{"directive":"charset_types","defaultValue":"charset_types text/html text/xml text/plain text/vnd.wap.wmlapplication/javascript application/rss+xml;","syntax":"charset_types mime-type ...;","context":"http, server, location","description":"This directive appeared in version 0.7.9.            Enables module processing in responses with the specified MIME typesin addition to “text/html”.The special value “*” matches any MIME type (0.8.29). Until version 1.5.4, “application/x-javascript” was usedas the default MIME type instead of “application/javascript”."},{"directive":"charset_map","defaultValue":"—","syntax":"charset_map charset1 charset2 { ... }","context":"http","description":"Describes the conversion table from one charset to another.A reverse conversion table is built using the same data.Character codes are given in hexadecimal.Missing characters in the range 80-FF are replaced with “?”.When converting from UTF-8, characters missing in a one-byte charsetare replaced with “&amp;#XXXX;”.Example: charset_map koi8-r windows-1251 {    C0 FE ; # small yu    C1 E0 ; # small a    C2 E1 ; # small b    C3 F6 ; # small ts    ...} When describing a conversion table to UTF-8, codes for the UTF-8 charset shouldbe given in the second column, for example: charset_map koi8-r utf-8 {    C0 D18E ; # small yu    C1 D0B0 ; # small a    C2 D0B1 ; # small b    C3 D186 ; # small ts    ...} Full conversion tables from koi8-r towindows-1251, and from koi8-r andwindows-1251 to utf-8are provided in the distribution files conf/koi-win,conf/koi-utf, and conf/win-utf."},{"directive":"charset","defaultValue":"charset off;","syntax":"charset charset | off;","context":"http, server, location, if in location","description":"Adds the specified charset to the “Content-Type”response header field.If this charset is different from the charset specifiedin the source_charset directive, a conversion is performed.The parameter off cancels the addition of charsetto the “Content-Type” response header field.A charset can be defined with a variable: charset $charset; In such a case, all possible values of a variable need to be presentin the configuration at least once in the form of thecharset_map, charset, orsource_charset directives.For utf-8, windows-1251, andkoi8-r charsets, it is sufficient to include the filesconf/koi-win, conf/koi-utf, andconf/win-utf into configuration.For other charsets, simply making a fictitious conversion table works,for example: charset_map iso-8859-5 _ { } In addition, a charset can be set in the“X-Accel-Charset” response header field.This capability can be disabled using the<a href=\"ngx_http_proxy_module.html#proxy_ignore_headers\">proxy_ignore_headers,<a href=\"ngx_http_fastcgi_module.html#fastcgi_ignore_headers\">fastcgi_ignore_headers,<a href=\"ngx_http_uwsgi_module.html#uwsgi_ignore_headers\">uwsgi_ignore_headers,and<a href=\"ngx_http_scgi_module.html#scgi_ignore_headers\">scgi_ignore_headersdirectives."},{"directive":"break","defaultValue":"—","syntax":"break;","context":"server, location, if","description":"Stops processing the current set ofngx_http_rewrite_module directives.If a directive is specified inside the<a href=\"ngx_http_core_module.html#location\">location,further processing of the request continues in this location.Example: if ($slow) {    limit_rate 10k;    break;}"},{"directive":"autoindex_localtime","defaultValue":"","syntax":"","context":"","description":""},{"directive":"autoindex_format","defaultValue":"autoindex_format html;","syntax":"autoindex_format     html |    xml |    json |    jsonp;","context":"http, server, location","description":"This directive appeared in version 1.7.9.            Sets the format of a directory listing.When the JSONP format is used, the name of a callback function is setwith the callback request argument.If the argument is missing or has an empty value,then the JSON format is used.The XML output can be transformed using the<a href=\"ngx_http_xslt_module.html\">ngx_http_xslt_module module."},{"directive":"autoindex_exact_size","defaultValue":"autoindex_exact_size on;","syntax":"autoindex_exact_size on | off;","context":"http, server, location","description":"For the HTML format,specifies whether exact file sizes should be output in the directory listing,or rather rounded to kilobytes, megabytes, and gigabytes."},{"directive":"autoindex","defaultValue":"autoindex off;","syntax":"autoindex on | off;","context":"http, server, location","description":"Enables or disables the directory listing output."},{"directive":"auth_request_set","defaultValue":"","syntax":"","context":"","description":""},{"directive":"auth_request","defaultValue":"auth_request off;","syntax":"auth_request uri | off;","context":"http, server, location","description":"Enables authorization based on the result of a subrequest and setsthe URI to which the subrequest will be sent."},{"directive":"auth_jwt_key_file","defaultValue":"—","syntax":"auth_jwt_key_file file;","context":"http, server, location","description":"Specifies a file in<a href=\"https://tools.ietf.org/html/rfc7517#section-5\">JSON Web Key Setformat for validating JWT signature.Parameter value can contain variables."},{"directive":"auth_jwt_header_set","defaultValue":"—","syntax":"auth_jwt_header_set $variable name;","context":"http","description":"This directive appeared in version 1.11.10.            Sets the variable to the givenJOSE header parameter name."},{"directive":"auth_jwt_claim_set","defaultValue":"—","syntax":"auth_jwt_claim_set $variable name;","context":"http","description":"This directive appeared in version 1.11.10.            Sets the variable to the givenJWT claim parameter name."},{"directive":"auth_jwt","defaultValue":"auth_jwt off;","syntax":"auth_jwt     string    [token=$variable] |    off;","context":"http, server, location","description":"Enables validation of JSON Web Token.The specified string is used as a realm.Parameter value can contain variables.The optional token parameter specifies a variablethat contains JSON Web Token.By default, JWT is passed in the “Authorization” headeras a<a href=\"https://tools.ietf.org/html/rfc6750\">Bearer Token.JWT may be also passed as a cookie or a part of a query string: auth_jwt \"closed site\" token=$cookie_auth_token; The special value off cancels the effectof the auth_jwt directiveinherited from the previous configuration level."},{"directive":"auth_http_timeout","defaultValue":"auth_http_timeout 60s;","syntax":"auth_http_timeout time;","context":"mail, server","description":"Sets the timeout for communication with the authentication server."},{"directive":"auth_http_pass_client_cert","defaultValue":"auth_http_pass_client_cert off;","syntax":"auth_http_pass_client_cert on | off;","context":"mail, server","description":"This directive appeared in version 1.7.11.            Appends the “Auth-SSL-Cert” header with the<a href=\"ngx_mail_ssl_module.html#ssl_verify_client\">clientcertificate in the PEM format (urlencoded)to requests sent to the authentication server."},{"directive":"auth_http_header","defaultValue":"—","syntax":"auth_http_header header value;","context":"mail, server","description":"Appends the specified header to requests sent to the authentication server.This header can be used as the shared secret to verifythat the request comes from nginx.For example: auth_http_header X-Auth-Key \"secret_string\";"},{"directive":"auth_http","defaultValue":"—","syntax":"auth_http URL;","context":"mail, server","description":"Sets the URL of the HTTP authentication server.The protocol is described below."},{"directive":"auth_basic_user_file","defaultValue":"","syntax":"","context":"","description":""},{"directive":"auth_basic","defaultValue":"auth_basic off;","syntax":"auth_basic string | off;","context":"http, server, location, limit_except","description":"Enables validation of user name and password using the“HTTP Basic Authentication” protocol.The specified parameter is used as a realm.Parameter value can contain variables (1.3.10, 1.2.7).The special value off allows cancelling the effectof the auth_basic directiveinherited from the previous configuration level."},{"directive":"api","defaultValue":"—","syntax":"api [write=on|off];","context":"location","description":"Turns on the REST API interface in the surrounding location.Access to this location should be<a href=\"ngx_http_core_module.html#satisfy\">limited.The write parameter determines whether the APIis read-only or read-write.By default, the API is read-only.All API requests should contain a supported API version in the URI.If the request URI equals the location prefix,the list of supported API versions is returned.The current and the only API version is “1”.The optional “fields” argument in the request linespecifies which fields of the requested objects will be output: http://127.0.0.1/api/1/nginx?fields=version,build"},{"directive":"ancient_browser_value","defaultValue":"ancient_browser_value 1;","syntax":"ancient_browser_value string;","context":"http, server, location","description":"Sets a value for the $ancient_browser variables."},{"directive":"ancient_browser","defaultValue":"—","syntax":"ancient_browser string ...;","context":"http, server, location","description":"If any of the specified substrings is found in the “User-Agent”request header field, the browser will be considered ancient.The special string “netscape4” corresponds to theregular expression “^Mozilla/[1-4]”."},{"directive":"allow","defaultValue":"—","syntax":"allow     address |    CIDR |    unix: |    all;","context":"stream, server","description":"Allows access for the specified network or address.If the special value unix: is specified,allows access for all UNIX-domain sockets."},{"directive":"allow","defaultValue":"—","syntax":"allow     address |    CIDR |    unix: |    all;","context":"http, server, location, limit_except","description":"Allows access for the specified network or address.If the special value unix: is specified (1.5.1),allows access for all UNIX-domain sockets."},{"directive":"alias","defaultValue":"—","syntax":"alias path;","context":"location","description":"Defines a replacement for the specified location.For example, with the following configuration location /i/ {    alias /data/w3/images/;} on request of“/i/top.gif”, the file/data/w3/images/top.gif will be sent.The path value can contain variables,except $document_root and $realpath_root.If alias is used inside a location definedwith a regular expression then such regular expression shouldcontain captures and alias should refer tothese captures (0.7.40), for example: location ~ ^/users/(.+\\.(?:gif|jpe?g|png))$ {    alias /data/w3/images/$1;} When location matches the last part of the directive’s value: location /images/ {    alias /data/w3/images/;} it is better to use therootdirective instead: location /images/ {    root /data/w3;}"},{"directive":"aio_write","defaultValue":"aio_write off;","syntax":"aio_write on | off;","context":"http, server, location","description":"This directive appeared in version 1.9.13.            If aio is enabled, specifies whether it is used for writing files.Currently, this only works when usingaio threadsand is limited to writing temporary fileswith data received from proxied servers."},{"directive":"aio","defaultValue":"aio off;","syntax":"aio     on |    off |    threads[=pool];","context":"http, server, location","description":"This directive appeared in version 0.8.11.            Enables or disables the use of asynchronous file I/O (AIO)on FreeBSD and Linux: location /video/ {    aio            on;    output_buffers 1 64k;} On FreeBSD, AIO can be used starting from FreeBSD 4.3.Prior to FreeBSD 11.0,AIO can either be linked statically into a kernel: options VFS_AIO or loaded dynamically as a kernel loadable module: kldload aio On Linux, AIO can be used starting from kernel version 2.6.22.Also, it is necessary to enabledirectio,or otherwise reading will be blocking: location /video/ {    aio            on;    directio       512;    output_buffers 1 128k;} On Linux,directiocan only be used for reading blocks that are aligned on 512-byteboundaries (or 4K for XFS).File’s unaligned end is read in blocking mode.The same holds true for byte range requests and for FLV requestsnot from the beginning of a file: reading of unaligned data at thebeginning and end of a file will be blocking.When both AIO and sendfile are enabled on Linux,AIO is used for files that are larger than or equal tothe size specified in the directio directive,while sendfile is used for files of smaller sizesor when directio is disabled. location /video/ {    sendfile       on;    aio            on;    directio       8m;} Finally, files can be read and sentusing multi-threading (1.7.11),without blocking a worker process: location /video/ {    sendfile       on;    aio            threads;} Read and send file operations are offloaded to threads of the specified<a href=\"../ngx_core_module.html#thread_pool\">pool.If the pool name is omitted,the pool with the name “default” is used.The pool name can also be set with variables: aio threads=pool$disk; By default, multi-threading is disabled, it should beenabled with the--with-threads configuration parameter.Currently, multi-threading is compatible only with the<a href=\"../events.html#epoll\">epoll,<a href=\"../events.html#kqueue\">kqueue,and<a href=\"../events.html#eventport\">eventport methods.Multi-threaded sending of files is only supported on Linux.See also the sendfile directive."},{"directive":"addition_types","defaultValue":"","syntax":"","context":"","description":""},{"directive":"add_trailer","defaultValue":"—","syntax":"add_trailer name value[always];","context":"http, server, location, if in location","description":"This directive appeared in version 1.13.2.            Adds the specified field to the end of a response provided thatthe response code equals 200, 201, 206, 301, 302, 303, 307, or 308.The value can contain variables.There could be several add_trailer directives.These directives are inherited from the previous level if andonly if there are noadd_trailerdirectives defined on the current level.If the always parameter is specifiedthe specified field will be added regardless of the response code."},{"directive":"add_header","defaultValue":"—","syntax":"add_header name value[always];","context":"http, server, location, if in location","description":"Adds the specified field to a response header provided thatthe response code equals 200, 201, 204, 206, 301, 302, 303, 304, 307, or 308.The value can contain variables.There could be several add_header directives.These directives are inherited from the previous level if andonly if there are noadd_headerdirectives defined on the current level.If the always parameter is specified (1.7.5),the header field will be added regardless of the response code."},{"directive":"add_before_body","defaultValue":"—","syntax":"add_before_body uri;","context":"http, server, location","description":"Adds the text returned as a result of processing a given subrequestbefore the response body.An empty string (\"\") as a parameter cancels additioninherited from the previous configuration level."},{"directive":"add_after_body","defaultValue":"—","syntax":"add_after_body uri;","context":"http, server, location","description":"Adds the text returned as a result of processing a given subrequestafter the response body.An empty string (\"\") as a parameter cancels additioninherited from the previous configuration level."},{"directive":"access_log","defaultValue":"access_log off;","syntax":"access_log     path    format    [buffer=size]    [gzip[=level]]    [flush=time]    [if=condition];access_log off;","context":"stream, server","description":"Sets the path, format,and configuration for a buffered log write.Several logs can be specified on the same level.Logging to <a href=\"../syslog.html\">syslogcan be configured by specifyingthe “syslog:” prefix in the first parameter.The special value off cancels allaccess_log directives on the current level.If either the buffer or gzipparameter is used, writes to log will be buffered. The buffer size must not exceed the size of an atomic write to a disk file.For FreeBSD this size is unlimited. When buffering is enabled, the data will be written to the file: if the next log line does not fit into the buffer;if the buffered data is older than specified by the flushparameter;when a worker process is <a href=\"../control.html\">re-opening logfiles or is shutting down. If the gzip parameter is used, then the buffered data willbe compressed before writing to the file.The compression level can be set between 1 (fastest, less compression)and 9 (slowest, best compression).By default, the buffer size is equal to 64K bytes, and the compression levelis set to 1.Since the data is compressed in atomic blocks, the log file can be decompressedor read by “zcat” at any time.Example: access_log /path/to/log.gz basic gzip flush=5m;  For gzip compression to work, nginx must be built with the zlib library. The file path can contain variables,but such logs have some constraints: the <a href=\"../ngx_core_module.html#user\">userwhose credentials are used by worker processes shouldhave permissions to create files in a directory withsuch logs;buffered writes do not work;the file is opened and closed for each log write.However, since the descriptors of frequently used files can be storedin a cache, writing to the old filecan continue during the time specified by the open_log_file_cachedirective’s valid parameter The if parameter enables conditional logging.A session will not be logged if the condition evaluates to “0”or an empty string."},{"directive":"access_log","defaultValue":"access_log logs/access.log combined;","syntax":"access_log     path    [format    [buffer=size]    [gzip[=level]]    [flush=time]    [if=condition]];access_log off;","context":"http, server, location, if in location, limit_except","description":"Sets the path, format, and configuration for a buffered log write.Several logs can be specified on the same level.Logging to <a href=\"../syslog.html\">syslogcan be configured by specifyingthe “syslog:” prefix in the first parameter.The special value off cancels allaccess_log directives on the current level.If the format is not specified then the predefined“combined” format is used.If either the buffer or gzip(1.3.10, 1.2.7)parameter is used, writes to log will be buffered. The buffer size must not exceed the size of an atomic write to a disk file.For FreeBSD this size is unlimited. When buffering is enabled, the data will be written to the file: if the next log line does not fit into the buffer;if the buffered data is older than specified by the flushparameter (1.3.10, 1.2.7);when a worker process is <a href=\"../control.html\">re-opening logfiles or is shutting down. If the gzip parameter is used, then the buffered data willbe compressed before writing to the file.The compression level can be set between 1 (fastest, less compression)and 9 (slowest, best compression).By default, the buffer size is equal to 64K bytes, and the compression levelis set to 1.Since the data is compressed in atomic blocks, the log file can be decompressedor read by “zcat” at any time.Example: access_log /path/to/log.gz combined gzip flush=5m;  For gzip compression to work, nginx must be built with the zlib library. The file path can contain variables (0.7.6+),but such logs have some constraints: the <a href=\"../ngx_core_module.html#user\">userwhose credentials are used by worker processes shouldhave permissions to create files in a directory withsuch logs;buffered writes do not work;the file is opened and closed for each log write.However, since the descriptors of frequently used files can be storedin a cache, writing to the old filecan continue during the time specified by the open_log_file_cachedirective’s valid parameterduring each log write the existence of the request’s<a href=\"ngx_http_core_module.html#root\">root directoryis checked, and if it does not exist the log is notcreated.It is thus a good idea to specify both<a href=\"ngx_http_core_module.html#root\">rootand access_log on the same level:server {    root       /spool/vhost/data/$host;    access_log /spool/vhost/logs/$host;    ... The if parameter (1.7.0) enables conditional logging.A request will not be logged if the condition evaluates to “0”or an empty string.In the following example, the requests with response codes 2xx and 3xxwill not be logged: map $status $loggable {    ~^[23]  0;    default 1;}access_log /path/to/access.log combined if=$loggable;"},{"directive":"accept_mutex_delay","defaultValue":"accept_mutex_delay 500ms;","syntax":"accept_mutex_delay time;","context":"events","description":"If accept_mutex is enabled, specifies the maximum timeduring which a worker process will try to restart accepting newconnections if another worker process is currently acceptingnew connections."},{"directive":"accept_mutex","defaultValue":"accept_mutex off;","syntax":"accept_mutex on | off;","context":"events","description":"If accept_mutex is enabled,worker processes will accept new connections by turn.Otherwise, all worker processes will be notified about new connections,and if volume of new connections is low, some of the worker processesmay just waste system resources. There is no need to enable accept_mutexon systems that support the<a href=\"events.html#epoll\">EPOLLEXCLUSIVE flag (1.11.3) orwhen using <a href=\"http/ngx_http_core_module.html#reuseport\">reuseport.  Prior to version 1.11.3, the default value was on."},{"directive":"absolute_redirect","defaultValue":"absolute_redirect on;","syntax":"absolute_redirect on | off;","context":"http, server, location","description":"This directive appeared in version 1.11.8.            If disabled, redirects issued by nginx will be relative.See also server_name_in_redirectand port_in_redirect directives."}]